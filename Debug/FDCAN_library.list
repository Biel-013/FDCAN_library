
FDCAN_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a58  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001928  08005cf0  08005cf0  00015cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007618  08007618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800761c  0800761c  0001761c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  24000000  08007620  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000aa0  24000090  080076b0  00020090  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000b30  080076b0  00020b30  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eb4a  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001cb0  00000000  00000000  0002ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b00  00000000  00000000  000308b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a28  00000000  00000000  000313b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035d5f  00000000  00000000  00031de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c461  00000000  00000000  00067b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00158df2  00000000  00000000  00073fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ccd92  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000332c  00000000  00000000  001ccde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000090 	.word	0x24000090
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005cd8 	.word	0x08005cd8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000094 	.word	0x24000094
 80002d4:	08005cd8 	.word	0x08005cd8

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_d2lz>:
 8000650:	b508      	push	{r3, lr}
 8000652:	4602      	mov	r2, r0
 8000654:	460b      	mov	r3, r1
 8000656:	ec43 2b17 	vmov	d7, r2, r3
 800065a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800065e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000662:	d403      	bmi.n	800066c <__aeabi_d2lz+0x1c>
 8000664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000668:	f000 b80a 	b.w	8000680 <__aeabi_d2ulz>
 800066c:	eeb1 7b47 	vneg.f64	d7, d7
 8000670:	ec51 0b17 	vmov	r0, r1, d7
 8000674:	f000 f804 	bl	8000680 <__aeabi_d2ulz>
 8000678:	4240      	negs	r0, r0
 800067a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800067e:	bd08      	pop	{r3, pc}

08000680 <__aeabi_d2ulz>:
 8000680:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006b0 <__aeabi_d2ulz+0x30>
 8000684:	ec41 0b17 	vmov	d7, r0, r1
 8000688:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006b8 <__aeabi_d2ulz+0x38>
 800068c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000690:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000694:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000698:	eea4 7b45 	vfms.f64	d7, d4, d5
 800069c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006a0:	ee16 1a10 	vmov	r1, s12
 80006a4:	ee17 0a90 	vmov	r0, s15
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	f3af 8000 	nop.w
 80006b0:	00000000 	.word	0x00000000
 80006b4:	3df00000 	.word	0x3df00000
 80006b8:	00000000 	.word	0x00000000
 80006bc:	41f00000 	.word	0x41f00000

080006c0 <HAL_FDCAN_RxFifo0Callback>:
 * @brief  Função chamada quando detectado uma mensagem no barramento da CAN
 * @param  hfdcan: Handle da CAN || normalmente "hfdcan1"
 * @param  RxFifo0ITs: FIFO de interrupção utilizado
 * @retval ***NONE***
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	/* Pisca o  LED 2 caso tenha algo para receber pela CAN */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80006ca:	2101      	movs	r1, #1
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <HAL_FDCAN_RxFifo0Callback+0x44>)
 80006ce:	f002 fe60 	bl	8003392 <HAL_GPIO_TogglePin>

	/* Pega as informações e dados da CAN, e armazena respectivamente em RxHeader e RxData */
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80006da:	f001 fd89 	bl	80021f0 <HAL_FDCAN_GetRxMessage>

	/* Chama a função de tratamento de dados */
	CAN_Stream_ReceiveCallback(&RxHeader, RxData);
 80006de:	490a      	ldr	r1, [pc, #40]	; (8000708 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80006e2:	f000 f8e1 	bl	80008a8 <CAN_Stream_ReceiveCallback>

	/* Ativa novamente a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80006e6:	2200      	movs	r2, #0
 80006e8:	2101      	movs	r1, #1
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80006ec:	f001 ff00 	bl	80024f0 <HAL_FDCAN_ActivateNotification>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_FDCAN_RxFifo0Callback+0x3a>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 80006f6:	f000 ffb1 	bl	800165c <Error_Handler>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	58020400 	.word	0x58020400
 8000708:	24000a58 	.word	0x24000a58
 800070c:	24000a30 	.word	0x24000a30
 8000710:	24000a60 	.word	0x24000a60

08000714 <CAN_Configure_Init>:
/**
 * @brief  Configura a CAN, overwrite do .IOC
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Configure_Init() {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	/* Configura os parâmetros da CAN - LEITURA DO RELATORIO */
	hfdcan1.Instance = FDCAN1;
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800071a:	4a30      	ldr	r2, [pc, #192]	; (80007dc <CAN_Configure_Init+0xc8>)
 800071c:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000720:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000724:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000726:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000728:	2203      	movs	r2, #3
 800072a:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800072e:	2200      	movs	r2, #0
 8000730:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000734:	2200      	movs	r2, #0
 8000736:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800073a:	2200      	movs	r2, #0
 800073c:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 1;
 800073e:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000740:	2201      	movs	r2, #1
 8000742:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 7;
 8000744:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000746:	2207      	movs	r2, #7
 8000748:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 42;
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800074c:	222a      	movs	r2, #42	; 0x2a
 800074e:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 27;
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000752:	221b      	movs	r2, #27
 8000754:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 2;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000758:	2202      	movs	r2, #2
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 12;
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800075e:	220c      	movs	r2, #12
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 12;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000764:	220c      	movs	r2, #12
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 12;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800076a:	220c      	movs	r2, #12
 800076c:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000770:	2200      	movs	r2, #0
 8000772:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000776:	2200      	movs	r2, #0
 8000778:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800077c:	2200      	movs	r2, #0
 800077e:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000782:	2201      	movs	r2, #1
 8000784:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000788:	2204      	movs	r2, #4
 800078a:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800078e:	2200      	movs	r2, #0
 8000790:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <CAN_Configure_Init+0xc4>)
 8000794:	2204      	movs	r2, #4
 8000796:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <CAN_Configure_Init+0xc4>)
 800079a:	2200      	movs	r2, #0
 800079c:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <CAN_Configure_Init+0xc4>)
 80007a0:	2204      	movs	r2, #4
 80007a2:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <CAN_Configure_Init+0xc4>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <CAN_Configure_Init+0xc4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <CAN_Configure_Init+0xc4>)
 80007b2:	2220      	movs	r2, #32
 80007b4:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007b6:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <CAN_Configure_Init+0xc4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <CAN_Configure_Init+0xc4>)
 80007be:	2204      	movs	r2, #4
 80007c0:	669a      	str	r2, [r3, #104]	; 0x68

	/* Inicializa a CAN com os parâmetros definidos */
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <CAN_Configure_Init+0xc4>)
 80007c4:	f001 fab0 	bl	8001d28 <HAL_FDCAN_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <CAN_Configure_Init+0xbe>
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 80007ce:	f000 ff45 	bl	800165c <Error_Handler>
	}
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	24000a60 	.word	0x24000a60
 80007dc:	4000a000 	.word	0x4000a000

080007e0 <CAN_Clean_Buffers>:
/**
 * @brief  Inicialização do vetor de dados da CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Clean_Buffers(void) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
	/* Zera cada posição do vetor de dados - Redundância */
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	80fb      	strh	r3, [r7, #6]
 80007ea:	e01a      	b.n	8000822 <CAN_Clean_Buffers+0x42>
		free(CAN_stream.Data_buf[i]);
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	4a11      	ldr	r2, [pc, #68]	; (8000834 <CAN_Clean_Buffers+0x54>)
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 fe5b 	bl	80054b0 <free>
		CAN_stream.Data_buf[i] = NULL;
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <CAN_Clean_Buffers+0x54>)
 80007fe:	2100      	movs	r1, #0
 8000800:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		*CAN_stream.Data_buf[i] = 0;
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <CAN_Clean_Buffers+0x54>)
 8000808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
		CAN_stream.Size_buf[i] = 0;
 8000810:	88fb      	ldrh	r3, [r7, #6]
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <CAN_Clean_Buffers+0x54>)
 8000814:	4413      	add	r3, r2
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	3301      	adds	r3, #1
 8000820:	80fb      	strh	r3, [r7, #6]
 8000822:	88fb      	ldrh	r3, [r7, #6]
 8000824:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000828:	d3e0      	bcc.n	80007ec <CAN_Clean_Buffers+0xc>
	}
}
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	240000ac 	.word	0x240000ac

08000838 <CAN_Init>:
/**
 * @brief  Inicialização da comunicação via CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Init(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	/* Chama a função de configuração dos parâmetros da CAN */
		CAN_Configure_Init();
 800083c:	f7ff ff6a 	bl	8000714 <CAN_Configure_Init>

	/* Chama a função de limpeza do vetor de armazenamento de dados */
	CAN_Clean_Buffers();
 8000840:	f7ff ffce 	bl	80007e0 <CAN_Clean_Buffers>

	/* Começa a comunicação via CAN */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000844:	4816      	ldr	r0, [pc, #88]	; (80008a0 <CAN_Init+0x68>)
 8000846:	f001 fc4d 	bl	80020e4 <HAL_FDCAN_Start>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <CAN_Init+0x1c>
		// Caso de errado, chama a função de erro
		Error_Handler();
 8000850:	f000 ff04 	bl	800165c <Error_Handler>
	}

	/* Ativa a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <CAN_Init+0x68>)
 800085a:	f001 fe49 	bl	80024f0 <HAL_FDCAN_ActivateNotification>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <CAN_Init+0x30>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000864:	f000 fefa 	bl	800165c <Error_Handler>
	}

	/* Configura os parametros para envio de mensagem */
	TxHeader.IdType = FDCAN_STANDARD_ID; // TIPO DE IDENTIFICADOR - STANDARD OU EXTENDED
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <CAN_Init+0x6c>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // TIPO DE FLAME - DATA OU REMOTE
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <CAN_Init+0x6c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8; // TAMANHO DOS DADOS - 0 A 64 WORDS - CONVERTIDO PRA 4
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <CAN_Init+0x6c>)
 8000876:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800087a:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // INDICADOR DE ERRO - ATIVO OU PASSIVO
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <CAN_Init+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;	// BIT DE INTERRUPÇÃO - ON OU OFF
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <CAN_Init+0x6c>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;		// TIPO DE CAN - NORMAL OU FDCAN
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <CAN_Init+0x6c>)
 800088a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800088e:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // ARMAZENAMENTO DE EVENTOS DE ENVIO - ON OU OFF
 8000890:	4b04      	ldr	r3, [pc, #16]	; (80008a4 <CAN_Init+0x6c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;				// MASCARA DA MENSAGEM - 0 A 0xFF
 8000896:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <CAN_Init+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	24000a60 	.word	0x24000a60
 80008a4:	24000a0c 	.word	0x24000a0c

080008a8 <CAN_Stream_ReceiveCallback>:
 * @brief  Função de tratamento das mensagens recebidas
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_Stream_ReceiveCallback(FDCAN_RxHeaderTypeDef *hRxFDCAN, uint8_t *DATA) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
	/* Caso o ID passe do maior valor, a função quebra */

	/* Variavel para armazenamento do tamanho de dados */
	uint8_t SIZE_DATA = hRxFDCAN->DataLength >> 16U;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	0c1b      	lsrs	r3, r3, #16
 80008b8:	73fb      	strb	r3, [r7, #15]

	/* Variavel para armazenamento do identificador */
	uint16_t IDENTIFIER = hRxFDCAN->Identifier;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	81bb      	strh	r3, [r7, #12]

	uint8_t TYPE_DATA = DATA[0] & 0x03;
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	72fb      	strb	r3, [r7, #11]

	/* Caso o indentificador não faça parte dos ID's utilizados a função quebra */
	if (IDENTIFIER > CAN_IDS_NUMBER)
 80008ca:	89bb      	ldrh	r3, [r7, #12]
 80008cc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80008d0:	d82e      	bhi.n	8000930 <CAN_Stream_ReceiveCallback+0x88>
		return;

	switch (TYPE_DATA) {
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d82d      	bhi.n	8000934 <CAN_Stream_ReceiveCallback+0x8c>
 80008d8:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <CAN_Stream_ReceiveCallback+0x38>)
 80008da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008de:	bf00      	nop
 80008e0:	080008f1 	.word	0x080008f1
 80008e4:	08000901 	.word	0x08000901
 80008e8:	08000911 	.word	0x08000911
 80008ec:	08000921 	.word	0x08000921
	case 0x00:
		CAN_Storage_POSITIVE(IDENTIFIER, SIZE_DATA, DATA);
 80008f0:	89bb      	ldrh	r3, [r7, #12]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	7bf9      	ldrb	r1, [r7, #15]
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 f81f 	bl	800093c <CAN_Storage_POSITIVE>
		break;
 80008fe:	e01a      	b.n	8000936 <CAN_Stream_ReceiveCallback+0x8e>
	case 0x01:
		CAN_Storage_NEGATIVE(IDENTIFIER, SIZE_DATA, DATA);
 8000900:	89bb      	ldrh	r3, [r7, #12]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	7bf9      	ldrb	r1, [r7, #15]
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f87f 	bl	8000a0c <CAN_Storage_NEGATIVE>
		break;
 800090e:	e012      	b.n	8000936 <CAN_Stream_ReceiveCallback+0x8e>
	case 0x02:
		CAN_Storage_FLOAT(IDENTIFIER, SIZE_DATA, DATA);
 8000910:	89bb      	ldrh	r3, [r7, #12]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	7bf9      	ldrb	r1, [r7, #15]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f8df 	bl	8000adc <CAN_Storage_FLOAT>
		break;
 800091e:	e00a      	b.n	8000936 <CAN_Stream_ReceiveCallback+0x8e>
	case 0x03:
		CAN_Storage_DOUBLE(IDENTIFIER, SIZE_DATA, DATA);
 8000920:	89bb      	ldrh	r3, [r7, #12]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	7bf9      	ldrb	r1, [r7, #15]
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	4618      	mov	r0, r3
 800092a:	f000 f93f 	bl	8000bac <CAN_Storage_DOUBLE>
		break;
 800092e:	e002      	b.n	8000936 <CAN_Stream_ReceiveCallback+0x8e>
		return;
 8000930:	bf00      	nop
 8000932:	e000      	b.n	8000936 <CAN_Stream_ReceiveCallback+0x8e>
	default:
		break;
 8000934:	bf00      	nop
	}
}
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <CAN_Storage_POSITIVE>:

void CAN_Storage_POSITIVE(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	603a      	str	r2, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	460b      	mov	r3, r1
 800094a:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &value;
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	617b      	str	r3, [r7, #20]
	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <CAN_Storage_POSITIVE+0xcc>)
 8000962:	4413      	add	r3, r2
 8000964:	79ba      	ldrb	r2, [r7, #6]
 8000966:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_POSITIVE;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <CAN_Storage_POSITIVE+0xcc>)
 800096e:	4413      	add	r3, r2
 8000970:	2200      	movs	r2, #0
 8000972:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <CAN_Storage_POSITIVE+0xcc>)
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fd96 	bl	80054b0 <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	79fc      	ldrb	r4, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fd89 	bl	80054a0 <malloc>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <CAN_Storage_POSITIVE+0xcc>)
 8000994:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	for (int i = 0; i < Size; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	e00a      	b.n	80009b4 <CAN_Storage_POSITIVE+0x78>
		pValue[i] = Data[i];
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	441a      	add	r2, r3
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	6979      	ldr	r1, [r7, #20]
 80009a8:	440b      	add	r3, r1
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3301      	adds	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf0      	blt.n	800099e <CAN_Storage_POSITIVE+0x62>

	value = value >> 2U;
 80009bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	0882      	lsrs	r2, r0, #2
 80009ca:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80009ce:	088b      	lsrs	r3, r1, #2
 80009d0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Armazena o valor na memória alocada*/
	for (int i = 0; i < Size; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	e00d      	b.n	80009f6 <CAN_Storage_POSITIVE+0xba>
		CAN_stream.Data_buf[Identifier][i] = pValue[i];
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	441a      	add	r2, r3
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4909      	ldr	r1, [pc, #36]	; (8000a08 <CAN_Storage_POSITIVE+0xcc>)
 80009e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	440b      	add	r3, r1
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	3301      	adds	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dbed      	blt.n	80009da <CAN_Storage_POSITIVE+0x9e>
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3724      	adds	r7, #36	; 0x24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	240000ac 	.word	0x240000ac

08000a0c <CAN_Storage_NEGATIVE>:

void CAN_Storage_NEGATIVE(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	603a      	str	r2, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &value;
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	617b      	str	r3, [r7, #20]

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4a29      	ldr	r2, [pc, #164]	; (8000ad8 <CAN_Storage_NEGATIVE+0xcc>)
 8000a32:	4413      	add	r3, r2
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_NEGATIVE;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <CAN_Storage_NEGATIVE+0xcc>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <CAN_Storage_NEGATIVE+0xcc>)
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fd2e 	bl	80054b0 <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	79fc      	ldrb	r4, [r7, #7]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fd21 	bl	80054a0 <malloc>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <CAN_Storage_NEGATIVE+0xcc>)
 8000a64:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	for (int i = 0; i < Size; i++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	e00a      	b.n	8000a84 <CAN_Storage_NEGATIVE+0x78>
		pValue[i] = Data[i];
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	441a      	add	r2, r3
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	6979      	ldr	r1, [r7, #20]
 8000a78:	440b      	add	r3, r1
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3301      	adds	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <CAN_Storage_NEGATIVE+0x62>

	value = value >> 2U;
 8000a8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	0882      	lsrs	r2, r0, #2
 8000a9a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8000a9e:	088b      	lsrs	r3, r1, #2
 8000aa0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Armazena o valor na memória alocada*/
	for (int i = 0; i < Size; i++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	e00d      	b.n	8000ac6 <CAN_Storage_NEGATIVE+0xba>
		CAN_stream.Data_buf[Identifier][i] = pValue[i];
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	441a      	add	r2, r3
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4909      	ldr	r1, [pc, #36]	; (8000ad8 <CAN_Storage_NEGATIVE+0xcc>)
 8000ab4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	440b      	add	r3, r1
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dbed      	blt.n	8000aaa <CAN_Storage_NEGATIVE+0x9e>
}
 8000ace:	bf00      	nop
 8000ad0:	bf00      	nop
 8000ad2:	3724      	adds	r7, #36	; 0x24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	240000ac 	.word	0x240000ac

08000adc <CAN_Storage_FLOAT>:

void CAN_Storage_FLOAT(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	603a      	str	r2, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 8000aec:	f04f 0200 	mov.w	r2, #0
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &value;
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	617b      	str	r3, [r7, #20]

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4a29      	ldr	r2, [pc, #164]	; (8000ba8 <CAN_Storage_FLOAT+0xcc>)
 8000b02:	4413      	add	r3, r2
 8000b04:	79ba      	ldrb	r2, [r7, #6]
 8000b06:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_FLOAT;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4a26      	ldr	r2, [pc, #152]	; (8000ba8 <CAN_Storage_FLOAT+0xcc>)
 8000b0e:	4413      	add	r3, r2
 8000b10:	2202      	movs	r2, #2
 8000b12:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <CAN_Storage_FLOAT+0xcc>)
 8000b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f004 fcc6 	bl	80054b0 <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	79fc      	ldrb	r4, [r7, #7]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 fcb9 	bl	80054a0 <malloc>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <CAN_Storage_FLOAT+0xcc>)
 8000b34:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	for (int i = 0; i < Size; i++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
 8000b3c:	e00a      	b.n	8000b54 <CAN_Storage_FLOAT+0x78>
		pValue[i] = Data[i];
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	441a      	add	r2, r3
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	6979      	ldr	r1, [r7, #20]
 8000b48:	440b      	add	r3, r1
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3301      	adds	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	79bb      	ldrb	r3, [r7, #6]
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <CAN_Storage_FLOAT+0x62>

	value = value >> 2U;
 8000b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	0882      	lsrs	r2, r0, #2
 8000b6a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8000b6e:	088b      	lsrs	r3, r1, #2
 8000b70:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Armazena o valor na memória alocada*/
	for (int i = 0; i < Size; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	e00d      	b.n	8000b96 <CAN_Storage_FLOAT+0xba>
		CAN_stream.Data_buf[Identifier][i] = pValue[i];
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	441a      	add	r2, r3
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4909      	ldr	r1, [pc, #36]	; (8000ba8 <CAN_Storage_FLOAT+0xcc>)
 8000b84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	440b      	add	r3, r1
 8000b8c:	7812      	ldrb	r2, [r2, #0]
 8000b8e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000b90:	69bb      	ldr	r3, [r7, #24]
 8000b92:	3301      	adds	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	79bb      	ldrb	r3, [r7, #6]
 8000b98:	69ba      	ldr	r2, [r7, #24]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dbed      	blt.n	8000b7a <CAN_Storage_FLOAT+0x9e>
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	3724      	adds	r7, #36	; 0x24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd90      	pop	{r4, r7, pc}
 8000ba8:	240000ac 	.word	0x240000ac

08000bac <CAN_Storage_DOUBLE>:

void CAN_Storage_DOUBLE(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 8000bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bb0:	b089      	sub	sp, #36	; 0x24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	603a      	str	r2, [r7, #0]
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	f04f 0300 	mov.w	r3, #0
 8000bc6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &value;
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	613b      	str	r3, [r7, #16]

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a31      	ldr	r2, [pc, #196]	; (8000c98 <CAN_Storage_DOUBLE+0xec>)
 8000bd4:	4413      	add	r3, r2
 8000bd6:	79ba      	ldrb	r2, [r7, #6]
 8000bd8:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_DOUBLE;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	4a2e      	ldr	r2, [pc, #184]	; (8000c98 <CAN_Storage_DOUBLE+0xec>)
 8000be0:	4413      	add	r3, r2
 8000be2:	2203      	movs	r2, #3
 8000be4:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a2b      	ldr	r2, [pc, #172]	; (8000c98 <CAN_Storage_DOUBLE+0xec>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 fc5d 	bl	80054b0 <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	79fe      	ldrb	r6, [r7, #7]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fc50 	bl	80054a0 <malloc>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <CAN_Storage_DOUBLE+0xec>)
 8000c06:	f843 2026 	str.w	r2, [r3, r6, lsl #2]

	for (uint64_t i = 0; i < Size; i++)
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000c16:	e00f      	b.n	8000c38 <CAN_Storage_DOUBLE+0x8c>
		pValue[i] = Data[i];
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	6939      	ldr	r1, [r7, #16]
 8000c22:	440b      	add	r3, r1
 8000c24:	7812      	ldrb	r2, [r2, #0]
 8000c26:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < Size; i++)
 8000c28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c2c:	f112 0801 	adds.w	r8, r2, #1
 8000c30:	f143 0900 	adc.w	r9, r3, #0
 8000c34:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	461c      	mov	r4, r3
 8000c3e:	4615      	mov	r5, r2
 8000c40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000c44:	42a2      	cmp	r2, r4
 8000c46:	41ab      	sbcs	r3, r5
 8000c48:	d3e6      	bcc.n	8000c18 <CAN_Storage_DOUBLE+0x6c>

	value = value >> 2U;
 8000c4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	f04f 0300 	mov.w	r3, #0
 8000c56:	0882      	lsrs	r2, r0, #2
 8000c58:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8000c5c:	088b      	lsrs	r3, r1, #2
 8000c5e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Armazena o valor na memória alocada*/
	for (int i = 0; i < Size; i++)
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	e00d      	b.n	8000c84 <CAN_Storage_DOUBLE+0xd8>
		CAN_stream.Data_buf[Identifier][i] = pValue[i];
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	441a      	add	r2, r3
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4909      	ldr	r1, [pc, #36]	; (8000c98 <CAN_Storage_DOUBLE+0xec>)
 8000c72:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	440b      	add	r3, r1
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	79bb      	ldrb	r3, [r7, #6]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbed      	blt.n	8000c68 <CAN_Storage_DOUBLE+0xbc>
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c98:	240000ac 	.word	0x240000ac

08000c9c <CAN_TxData>:
 * @brief  Envio de mensagem pelo barramento CAN
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_TxData(uint16_t Identifier, uint64_t Data) {
 8000c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ca0:	b08d      	sub	sp, #52	; 0x34
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000caa:	460b      	mov	r3, r1
 8000cac:	82fb      	strh	r3, [r7, #22]
	uint64_t Time = HAL_GetTick();
 8000cae:	f000 ff13 	bl	8001ad8 <HAL_GetTick>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	uint64_t *pData = &Data;
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	61fb      	str	r3, [r7, #28]
	uint32_t Size_data = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < 8; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cd0:	e01b      	b.n	8000d0a <CAN_TxData+0x6e>
		if (Data >> 8 * i == 0) {
 8000cd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cd8:	00c9      	lsls	r1, r1, #3
 8000cda:	f1c1 0620 	rsb	r6, r1, #32
 8000cde:	f1a1 0020 	sub.w	r0, r1, #32
 8000ce2:	fa22 f401 	lsr.w	r4, r2, r1
 8000ce6:	fa03 f606 	lsl.w	r6, r3, r6
 8000cea:	4334      	orrs	r4, r6
 8000cec:	fa23 f000 	lsr.w	r0, r3, r0
 8000cf0:	4304      	orrs	r4, r0
 8000cf2:	fa23 f501 	lsr.w	r5, r3, r1
 8000cf6:	ea54 0305 	orrs.w	r3, r4, r5
 8000cfa:	d103      	bne.n	8000d04 <CAN_TxData+0x68>
			Size_data = i << 16U;
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	041b      	lsls	r3, r3, #16
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8000d02:	e005      	b.n	8000d10 <CAN_TxData+0x74>
	for (int i = 0; i < 8; i++)
 8000d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d06:	3301      	adds	r3, #1
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0c:	2b07      	cmp	r3, #7
 8000d0e:	dde0      	ble.n	8000cd2 <CAN_TxData+0x36>
		}

	/* Armazena o identificador da mensagem no struct de informação (TxHeader) */
	TxHeader.Identifier = Identifier;
 8000d10:	8afb      	ldrh	r3, [r7, #22]
 8000d12:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <CAN_TxData+0xd0>)
 8000d14:	6013      	str	r3, [r2, #0]

	TxHeader.DataLength = Size_data;
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <CAN_TxData+0xd0>)
 8000d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1a:	60d3      	str	r3, [r2, #12]


	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0)
 8000d1c:	e010      	b.n	8000d40 <CAN_TxData+0xa4>
		if(HAL_GetTick() - Time > TIME_TO_BREAK)
 8000d1e:	f000 fedb 	bl	8001ad8 <HAL_GetTick>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2200      	movs	r2, #0
 8000d26:	469a      	mov	sl, r3
 8000d28:	4693      	mov	fp, r2
 8000d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000d2e:	ebba 0802 	subs.w	r8, sl, r2
 8000d32:	eb6b 0903 	sbc.w	r9, fp, r3
 8000d36:	f1b8 0f0b 	cmp.w	r8, #11
 8000d3a:	f179 0300 	sbcs.w	r3, r9, #0
 8000d3e:	d210      	bcs.n	8000d62 <CAN_TxData+0xc6>
	while (HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1) == 0)
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <CAN_TxData+0xd4>)
 8000d42:	f001 fbc3 	bl	80024cc <HAL_FDCAN_GetTxFifoFreeLevel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0e8      	beq.n	8000d1e <CAN_TxData+0x82>
			return;

	/* Envia os dados recebidos na chamada (data) pela CAN, de acordo com as informações de TxHeader */
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, (uint8_t*) pData)
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	4907      	ldr	r1, [pc, #28]	; (8000d6c <CAN_TxData+0xd0>)
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <CAN_TxData+0xd4>)
 8000d52:	f001 f9f2 	bl	800213a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <CAN_TxData+0xc8>
			!= HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000d5c:	f000 fc7e 	bl	800165c <Error_Handler>
 8000d60:	e000      	b.n	8000d64 <CAN_TxData+0xc8>
			return;
 8000d62:	bf00      	nop
	}
}
 8000d64:	3734      	adds	r7, #52	; 0x34
 8000d66:	46bd      	mov	sp, r7
 8000d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d6c:	24000a0c 	.word	0x24000a0c
 8000d70:	24000a60 	.word	0x24000a60

08000d74 <CAN_Get_value>:

int64_t CAN_Get_value(uint16_t Identifier) {
 8000d74:	b4b0      	push	{r4, r5, r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80fb      	strh	r3, [r7, #6]
	int64_t VALUE = 0;
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &VALUE;
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	617b      	str	r3, [r7, #20]

	switch (CAN_stream.Type_buf[Identifier]) {
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	4a27      	ldr	r2, [pc, #156]	; (8000e30 <CAN_Get_value+0xbc>)
 8000d94:	4413      	add	r3, r2
 8000d96:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <CAN_Get_value+0x30>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d01b      	beq.n	8000dda <CAN_Get_value+0x66>
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
			pValue[i] = CAN_stream.Data_buf[Identifier][i];
		VALUE = -VALUE;
		break;
	default:
		break;
 8000da2:	e03d      	b.n	8000e20 <CAN_Get_value+0xac>
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
 8000da8:	e00d      	b.n	8000dc6 <CAN_Get_value+0x52>
			pValue[i] = CAN_stream.Data_buf[Identifier][i];
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <CAN_Get_value+0xbc>)
 8000dae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	441a      	add	r2, r3
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	6979      	ldr	r1, [r7, #20]
 8000dba:	440b      	add	r3, r1
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	; (8000e30 <CAN_Get_value+0xbc>)
 8000dca:	4413      	add	r3, r2
 8000dcc:	f893 3640 	ldrb.w	r3, [r3, #1600]	; 0x640
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	dbe8      	blt.n	8000daa <CAN_Get_value+0x36>
		break;
 8000dd8:	e022      	b.n	8000e20 <CAN_Get_value+0xac>
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
 8000dde:	e00d      	b.n	8000dfc <CAN_Get_value+0x88>
			pValue[i] = CAN_stream.Data_buf[Identifier][i];
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	4a13      	ldr	r2, [pc, #76]	; (8000e30 <CAN_Get_value+0xbc>)
 8000de4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	441a      	add	r2, r3
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	6979      	ldr	r1, [r7, #20]
 8000df0:	440b      	add	r3, r1
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000df6:	69bb      	ldr	r3, [r7, #24]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	4a0c      	ldr	r2, [pc, #48]	; (8000e30 <CAN_Get_value+0xbc>)
 8000e00:	4413      	add	r3, r2
 8000e02:	f893 3640 	ldrb.w	r3, [r3, #1600]	; 0x640
 8000e06:	461a      	mov	r2, r3
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	dbe8      	blt.n	8000de0 <CAN_Get_value+0x6c>
		VALUE = -VALUE;
 8000e0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e12:	2100      	movs	r1, #0
 8000e14:	4254      	negs	r4, r2
 8000e16:	eb61 0503 	sbc.w	r5, r1, r3
 8000e1a:	e9c7 4502 	strd	r4, r5, [r7, #8]
		break;
 8000e1e:	bf00      	nop
	}

	return VALUE;
 8000e20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bcb0      	pop	{r4, r5, r7}
 8000e2e:	4770      	bx	lr
 8000e30:	240000ac 	.word	0x240000ac

08000e34 <CAN_Get_value_FLOAT>:

float CAN_Get_value_FLOAT(uint16_t Identifier) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	ed2d 8b02 	vpush	{d8}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80fb      	strh	r3, [r7, #6]
	if (CAN_stream.Type_buf[Identifier] != CAN_FLOAT)
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	4a3e      	ldr	r2, [pc, #248]	; (8000f40 <CAN_Get_value_FLOAT+0x10c>)
 8000e46:	4413      	add	r3, r2
 8000e48:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d002      	beq.n	8000e56 <CAN_Get_value_FLOAT+0x22>
		return 0;
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	e06b      	b.n	8000f2e <CAN_Get_value_FLOAT+0xfa>
	uint64_t DATA_STORAGE = 0;
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t PRECISION = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	75fb      	strb	r3, [r7, #23]
	uint8_t SIGNAL = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	75bb      	strb	r3, [r7, #22]
	float VALUE = 0;
 8000e6a:	f04f 0300 	mov.w	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
	uint8_t *pData_Storage = (uint8_t*) &DATA_STORAGE;
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	e00d      	b.n	8000e98 <CAN_Get_value_FLOAT+0x64>
		pData_Storage[i] = CAN_stream.Data_buf[Identifier][i];
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	4a30      	ldr	r2, [pc, #192]	; (8000f40 <CAN_Get_value_FLOAT+0x10c>)
 8000e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	441a      	add	r2, r3
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	6939      	ldr	r1, [r7, #16]
 8000e8c:	440b      	add	r3, r1
 8000e8e:	7812      	ldrb	r2, [r2, #0]
 8000e90:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	3301      	adds	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <CAN_Get_value_FLOAT+0x10c>)
 8000e9c:	4413      	add	r3, r2
 8000e9e:	f893 3640 	ldrb.w	r3, [r3, #1600]	; 0x640
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	dbe8      	blt.n	8000e7c <CAN_Get_value_FLOAT+0x48>

	PRECISION = DATA_STORAGE & 0x3F;
 8000eaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000eae:	b2d3      	uxtb	r3, r2
 8000eb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000eb4:	75fb      	strb	r3, [r7, #23]

	SIGNAL = (DATA_STORAGE & 0x40) >> 6;
 8000eb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	0982      	lsrs	r2, r0, #6
 8000ec4:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8000ec8:	098b      	lsrs	r3, r1, #6
 8000eca:	b2d3      	uxtb	r3, r2
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	75bb      	strb	r3, [r7, #22]

	VALUE = (DATA_STORAGE >> 7) * pow(10, -PRECISION);
 8000ed2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	09c2      	lsrs	r2, r0, #7
 8000ee0:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8000ee4:	09cb      	lsrs	r3, r1, #7
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fb7b 	bl	80005e4 <__aeabi_ul2d>
 8000eee:	ec41 0b18 	vmov	d8, r0, r1
 8000ef2:	7dfb      	ldrb	r3, [r7, #23]
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000efe:	eeb0 1b47 	vmov.f64	d1, d7
 8000f02:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000f06:	f004 fc23 	bl	8005750 <pow>
 8000f0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000f0e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000f12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f16:	edc7 7a07 	vstr	s15, [r7, #28]

	if (SIGNAL == 1)
 8000f1a:	7dbb      	ldrb	r3, [r7, #22]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d105      	bne.n	8000f2c <CAN_Get_value_FLOAT+0xf8>
		VALUE = -VALUE;
 8000f20:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f24:	eef1 7a67 	vneg.f32	s15, s15
 8000f28:	edc7 7a07 	vstr	s15, [r7, #28]

	return VALUE;
 8000f2c:	69fb      	ldr	r3, [r7, #28]
}
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3720      	adds	r7, #32
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	ecbd 8b02 	vpop	{d8}
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	240000ac 	.word	0x240000ac
 8000f44:	00000000 	.word	0x00000000

08000f48 <CAN_Get_value_DOUBLE>:

double CAN_Get_value_DOUBLE(uint16_t Identifier) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	ed2d 8b02 	vpush	{d8}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
	if (CAN_stream.Type_buf[Identifier] != CAN_DOUBLE)
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	4a41      	ldr	r2, [pc, #260]	; (8001060 <CAN_Get_value_DOUBLE+0x118>)
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	d002      	beq.n	8000f6a <CAN_Get_value_DOUBLE+0x22>
		return 0;
 8000f64:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8001058 <CAN_Get_value_DOUBLE+0x110>
 8000f68:	e06c      	b.n	8001044 <CAN_Get_value_DOUBLE+0xfc>
	uint64_t DATA_STORAGE = 0;
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t PRECISION = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]
	uint8_t SIGNAL = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75bb      	strb	r3, [r7, #22]
	float VALUE = 0;
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
	uint8_t *pData_Storage = (uint8_t*) &DATA_STORAGE;
 8000f84:	f107 0308 	add.w	r3, r7, #8
 8000f88:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
 8000f8e:	e00d      	b.n	8000fac <CAN_Get_value_DOUBLE+0x64>
		pData_Storage[i] = CAN_stream.Data_buf[Identifier][i];
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	4a33      	ldr	r2, [pc, #204]	; (8001060 <CAN_Get_value_DOUBLE+0x118>)
 8000f94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	441a      	add	r2, r3
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	6939      	ldr	r1, [r7, #16]
 8000fa0:	440b      	add	r3, r1
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4a2c      	ldr	r2, [pc, #176]	; (8001060 <CAN_Get_value_DOUBLE+0x118>)
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f893 3640 	ldrb.w	r3, [r3, #1600]	; 0x640
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	dbe8      	blt.n	8000f90 <CAN_Get_value_DOUBLE+0x48>

	PRECISION = DATA_STORAGE & 0x1FF;
 8000fbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	75fb      	strb	r3, [r7, #23]

	SIGNAL = (DATA_STORAGE & 0x200) >> 9;
 8000fc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	0a42      	lsrs	r2, r0, #9
 8000fd4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8000fd8:	0a4b      	lsrs	r3, r1, #9
 8000fda:	b2d3      	uxtb	r3, r2
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	75bb      	strb	r3, [r7, #22]

	VALUE = (DATA_STORAGE >> 10) * pow(10, -PRECISION);
 8000fe2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	0a82      	lsrs	r2, r0, #10
 8000ff0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000ff4:	0a8b      	lsrs	r3, r1, #10
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff faf3 	bl	80005e4 <__aeabi_ul2d>
 8000ffe:	ec41 0b18 	vmov	d8, r0, r1
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	425b      	negs	r3, r3
 8001006:	ee07 3a90 	vmov	s15, r3
 800100a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800100e:	eeb0 1b47 	vmov.f64	d1, d7
 8001012:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001016:	f004 fb9b 	bl	8005750 <pow>
 800101a:	eeb0 7b40 	vmov.f64	d7, d0
 800101e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001022:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001026:	edc7 7a07 	vstr	s15, [r7, #28]

	if (SIGNAL == 1)
 800102a:	7dbb      	ldrb	r3, [r7, #22]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d105      	bne.n	800103c <CAN_Get_value_DOUBLE+0xf4>
		VALUE = -VALUE;
 8001030:	edd7 7a07 	vldr	s15, [r7, #28]
 8001034:	eef1 7a67 	vneg.f32	s15, s15
 8001038:	edc7 7a07 	vstr	s15, [r7, #28]

	return VALUE;
 800103c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001040:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
}
 8001044:	eeb0 0b47 	vmov.f64	d0, d7
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	ecbd 8b02 	vpop	{d8}
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
	...
 8001060:	240000ac 	.word	0x240000ac

08001064 <CAN_Send>:
 * @brief  Envio de mensagem pelo barramento CAN
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_Send(uint16_t Identifier, int64_t Data) {
 8001064:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	4601      	mov	r1, r0
 800106e:	e9c7 2300 	strd	r2, r3, [r7]
 8001072:	460b      	mov	r3, r1
 8001074:	81fb      	strh	r3, [r7, #14]

	if (Data >= 0)
 8001076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0c      	blt.n	8001098 <CAN_Send+0x34>

		Data = (Data << 2) | 0x00;
 800107e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	008b      	lsls	r3, r1, #2
 800108c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001090:	0082      	lsls	r2, r0, #2
 8001092:	e9c7 2300 	strd	r2, r3, [r7]
 8001096:	e012      	b.n	80010be <CAN_Send+0x5a>
	else
		Data = ((-Data) << 2) | 0x01;
 8001098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800109c:	2100      	movs	r1, #0
 800109e:	4254      	negs	r4, r2
 80010a0:	eb61 0503 	sbc.w	r5, r1, r3
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	00ab      	lsls	r3, r5, #2
 80010ae:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80010b2:	00a2      	lsls	r2, r4, #2
 80010b4:	f042 0801 	orr.w	r8, r2, #1
 80010b8:	4699      	mov	r9, r3
 80010ba:	e9c7 8900 	strd	r8, r9, [r7]

	CAN_TxData(Identifier, Data);
 80010be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010c2:	89f9      	ldrh	r1, [r7, #14]
 80010c4:	4608      	mov	r0, r1
 80010c6:	f7ff fde9 	bl	8000c9c <CAN_TxData>
}
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080010d4 <CAN_Send_Float>:

void CAN_Send_Float(uint16_t Identifier, float Data, uint8_t Precision) {
 80010d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010d8:	ed2d 8b02 	vpush	{d8}
 80010dc:	b08e      	sub	sp, #56	; 0x38
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
 80010e6:	460a      	mov	r2, r1
 80010e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80010ea:	4613      	mov	r3, r2
 80010ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int64_t Valor = Data * pow(10, Precision);
 80010f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80010f4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80010f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001104:	eeb0 1b47 	vmov.f64	d1, d7
 8001108:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 800110c:	f004 fb20 	bl	8005750 <pow>
 8001110:	eeb0 7b40 	vmov.f64	d7, d0
 8001114:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001118:	ec51 0b17 	vmov	r0, r1, d7
 800111c:	f7ff fa98 	bl	8000650 <__aeabi_d2lz>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	if (Data >= 0)
 8001128:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800112c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	db24      	blt.n	8001180 <CAN_Send_Float+0xac>
		Valor = (Valor << 9) | 0x000 | (Precision << 2) | 0x02;
 8001136:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	f04f 0300 	mov.w	r3, #0
 8001142:	024b      	lsls	r3, r1, #9
 8001144:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001148:	0242      	lsls	r2, r0, #9
 800114a:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800114e:	0089      	lsls	r1, r1, #2
 8001150:	17c8      	asrs	r0, r1, #31
 8001152:	6239      	str	r1, [r7, #32]
 8001154:	6278      	str	r0, [r7, #36]	; 0x24
 8001156:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800115a:	4621      	mov	r1, r4
 800115c:	4311      	orrs	r1, r2
 800115e:	61b9      	str	r1, [r7, #24]
 8001160:	4629      	mov	r1, r5
 8001162:	4319      	orrs	r1, r3
 8001164:	61f9      	str	r1, [r7, #28]
 8001166:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800116a:	460b      	mov	r3, r1
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	4613      	mov	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800117a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800117e:	e027      	b.n	80011d0 <CAN_Send_Float+0xfc>
	else
		Valor = ((-Valor) << 9) | 0x100 | (Precision << 2) | 0x02;
 8001180:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4254      	negs	r4, r2
 8001188:	eb61 0503 	sbc.w	r5, r1, r3
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	026b      	lsls	r3, r5, #9
 8001196:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800119a:	0262      	lsls	r2, r4, #9
 800119c:	f442 7a80 	orr.w	sl, r2, #256	; 0x100
 80011a0:	469b      	mov	fp, r3
 80011a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	17da      	asrs	r2, r3, #31
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	617a      	str	r2, [r7, #20]
 80011ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80011b2:	460b      	mov	r3, r1
 80011b4:	ea4a 0803 	orr.w	r8, sl, r3
 80011b8:	4613      	mov	r3, r2
 80011ba:	ea4b 0903 	orr.w	r9, fp, r3
 80011be:	f048 0302 	orr.w	r3, r8, #2
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	f8c7 9004 	str.w	r9, [r7, #4]
 80011c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011cc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	CAN_TxData(Identifier, Valor);
 80011d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011d4:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80011d6:	4608      	mov	r0, r1
 80011d8:	f7ff fd60 	bl	8000c9c <CAN_TxData>
}
 80011dc:	bf00      	nop
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	ecbd 8b02 	vpop	{d8}
 80011e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080011ea <CAN_Send_Double>:

void CAN_Send_Double(uint16_t Identifier, double Data, uint8_t Precision) {
 80011ea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ee:	b090      	sub	sp, #64	; 0x40
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80011f8:	460a      	mov	r2, r1
 80011fa:	86fb      	strh	r3, [r7, #54]	; 0x36
 80011fc:	4613      	mov	r3, r2
 80011fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int64_t Valor = Data * pow(10, Precision);
 8001202:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800120e:	eeb0 1b47 	vmov.f64	d1, d7
 8001212:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8001216:	f004 fa9b 	bl	8005750 <pow>
 800121a:	eeb0 6b40 	vmov.f64	d6, d0
 800121e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001222:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001226:	ec51 0b17 	vmov	r0, r1, d7
 800122a:	f7ff fa11 	bl	8000650 <__aeabi_d2lz>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	if (Data >= 0)
 8001236:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800123a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	db24      	blt.n	800128e <CAN_Send_Double+0xa4>
		Valor = (Valor << 12) | 0x000 | (Precision << 2) | 0x03;
 8001244:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	f04f 0300 	mov.w	r3, #0
 8001250:	030b      	lsls	r3, r1, #12
 8001252:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001256:	0302      	lsls	r2, r0, #12
 8001258:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800125c:	0089      	lsls	r1, r1, #2
 800125e:	17c8      	asrs	r0, r1, #31
 8001260:	6239      	str	r1, [r7, #32]
 8001262:	6278      	str	r0, [r7, #36]	; 0x24
 8001264:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001268:	4621      	mov	r1, r4
 800126a:	4311      	orrs	r1, r2
 800126c:	61b9      	str	r1, [r7, #24]
 800126e:	4629      	mov	r1, r5
 8001270:	4319      	orrs	r1, r3
 8001272:	61f9      	str	r1, [r7, #28]
 8001274:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001278:	460b      	mov	r3, r1
 800127a:	f043 0303 	orr.w	r3, r3, #3
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4613      	mov	r3, r2
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001288:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 800128c:	e027      	b.n	80012de <CAN_Send_Double+0xf4>
	else
		Valor = ((-Valor) << 12) | 0x800 | (Precision << 2) | 0x03;
 800128e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001292:	2100      	movs	r1, #0
 8001294:	4254      	negs	r4, r2
 8001296:	eb61 0503 	sbc.w	r5, r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	f04f 0300 	mov.w	r3, #0
 80012a2:	032b      	lsls	r3, r5, #12
 80012a4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80012a8:	0322      	lsls	r2, r4, #12
 80012aa:	f442 6a00 	orr.w	sl, r2, #2048	; 0x800
 80012ae:	469b      	mov	fp, r3
 80012b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	17da      	asrs	r2, r3, #31
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	617a      	str	r2, [r7, #20]
 80012bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80012c0:	460b      	mov	r3, r1
 80012c2:	ea4a 0803 	orr.w	r8, sl, r3
 80012c6:	4613      	mov	r3, r2
 80012c8:	ea4b 0903 	orr.w	r9, fp, r3
 80012cc:	f048 0303 	orr.w	r3, r8, #3
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	f8c7 9004 	str.w	r9, [r7, #4]
 80012d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80012da:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

	CAN_TxData(Identifier, Valor);
 80012de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012e2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80012e4:	4608      	mov	r0, r1
 80012e6:	f7ff fcd9 	bl	8000c9c <CAN_TxData>
}
 80012ea:	bf00      	nop
 80012ec:	3740      	adds	r7, #64	; 0x40
 80012ee:	46bd      	mov	sp, r7
 80012f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080012f4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012f8:	f000 fb68 	bl	80019cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012fc:	f000 f852 	bl	80013a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001300:	f000 f932 	bl	8001568 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8001304:	f000 f8ca 	bl	800149c <MX_FDCAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_Init();
 8001308:	f7ff fa96 	bl	8000838 <CAN_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		CAN_Send(100, INTEIRO_Tx);
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <main+0x8c>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	2064      	movs	r0, #100	; 0x64
 8001314:	f7ff fea6 	bl	8001064 <CAN_Send>
		CAN_Send_Float(101, FLOAT_Tx, Precisao_FLOAT);
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <main+0x90>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <main+0x94>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	eeb0 0a67 	vmov.f32	s0, s15
 8001328:	2065      	movs	r0, #101	; 0x65
 800132a:	f7ff fed3 	bl	80010d4 <CAN_Send_Float>
		CAN_Send_Double(102, DOUBLE_Tx, Precisao_DOUBLE);
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <main+0x98>)
 8001330:	ed93 7b00 	vldr	d7, [r3]
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <main+0x9c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	eeb0 0b47 	vmov.f64	d0, d7
 800133e:	2066      	movs	r0, #102	; 0x66
 8001340:	f7ff ff53 	bl	80011ea <CAN_Send_Double>
		INTEIRO_Rx = CAN_Get_value(100);
 8001344:	2064      	movs	r0, #100	; 0x64
 8001346:	f7ff fd15 	bl	8000d74 <CAN_Get_value>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4911      	ldr	r1, [pc, #68]	; (8001394 <main+0xa0>)
 8001350:	e9c1 2300 	strd	r2, r3, [r1]
		FLOAT_Rx = CAN_Get_value_FLOAT(101);
 8001354:	2065      	movs	r0, #101	; 0x65
 8001356:	f7ff fd6d 	bl	8000e34 <CAN_Get_value_FLOAT>
 800135a:	eef0 7a40 	vmov.f32	s15, s0
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <main+0xa4>)
 8001360:	edc3 7a00 	vstr	s15, [r3]
		DOUBLE_Rx = CAN_Get_value_DOUBLE(102);
 8001364:	2066      	movs	r0, #102	; 0x66
 8001366:	f7ff fdef 	bl	8000f48 <CAN_Get_value_DOUBLE>
 800136a:	eeb0 7b40 	vmov.f64	d7, d0
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <main+0xa8>)
 8001370:	ed83 7b00 	vstr	d7, [r3]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 8001374:	2102      	movs	r1, #2
 8001376:	480a      	ldr	r0, [pc, #40]	; (80013a0 <main+0xac>)
 8001378:	f002 f80b 	bl	8003392 <HAL_GPIO_TogglePin>
		CAN_Send(100, INTEIRO_Tx);
 800137c:	e7c6      	b.n	800130c <main+0x18>
 800137e:	bf00      	nop
 8001380:	24000000 	.word	0x24000000
 8001384:	24000008 	.word	0x24000008
 8001388:	2400000c 	.word	0x2400000c
 800138c:	24000010 	.word	0x24000010
 8001390:	24000018 	.word	0x24000018
 8001394:	24000b00 	.word	0x24000b00
 8001398:	24000b08 	.word	0x24000b08
 800139c:	24000b10 	.word	0x24000b10
 80013a0:	58021000 	.word	0x58021000

080013a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b09c      	sub	sp, #112	; 0x70
 80013a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	224c      	movs	r2, #76	; 0x4c
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 f892 	bl	80054dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2220      	movs	r2, #32
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f004 f88c 	bl	80054dc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013c4:	2002      	movs	r0, #2
 80013c6:	f001 ffff 	bl	80033c8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b31      	ldr	r3, [pc, #196]	; (8001494 <SystemClock_Config+0xf0>)
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	4a30      	ldr	r2, [pc, #192]	; (8001494 <SystemClock_Config+0xf0>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <SystemClock_Config+0xf0>)
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4b2c      	ldr	r3, [pc, #176]	; (8001498 <SystemClock_Config+0xf4>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013ec:	4a2a      	ldr	r2, [pc, #168]	; (8001498 <SystemClock_Config+0xf4>)
 80013ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b28      	ldr	r3, [pc, #160]	; (8001498 <SystemClock_Config+0xf4>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001400:	bf00      	nop
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <SystemClock_Config+0xf4>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140e:	d1f8      	bne.n	8001402 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001410:	2301      	movs	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	2302      	movs	r3, #2
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 16;
 8001426:	2310      	movs	r3, #16
 8001428:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 800142a:	2302      	movs	r3, #2
 800142c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800142e:	2304      	movs	r3, #4
 8001430:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001432:	2302      	movs	r3, #2
 8001434:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001436:	230c      	movs	r3, #12
 8001438:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800143a:	2300      	movs	r3, #0
 800143c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001446:	4618      	mov	r0, r3
 8001448:	f001 fff8 	bl	800343c <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xb2>
		Error_Handler();
 8001452:	f000 f903 	bl	800165c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001456:	233f      	movs	r3, #63	; 0x3f
 8001458:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2303      	movs	r3, #3
 800145c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2102      	movs	r1, #2
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fc0c 	bl	8003c98 <HAL_RCC_ClockConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xe6>
		Error_Handler();
 8001486:	f000 f8e9 	bl	800165c <Error_Handler>
	}
}
 800148a:	bf00      	nop
 800148c:	3770      	adds	r7, #112	; 0x70
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58000400 	.word	0x58000400
 8001498:	58024800 	.word	0x58024800

0800149c <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014a2:	4a30      	ldr	r2, [pc, #192]	; (8001564 <MX_FDCAN1_Init+0xc8>)
 80014a4:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ac:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 1;
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 7;
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014ce:	2207      	movs	r2, #7
 80014d0:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 42;
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014d4:	222a      	movs	r2, #42	; 0x2a
 80014d6:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 27;
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014da:	221b      	movs	r2, #27
 80014dc:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 2;
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 12;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 12;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014ec:	220c      	movs	r2, #12
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 12;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 80014f6:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 8001504:	2200      	movs	r2, #0
 8001506:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 800150a:	2201      	movs	r2, #1
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 8001510:	2204      	movs	r2, #4
 8001512:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 8001516:	2200      	movs	r2, #0
 8001518:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 800151c:	2204      	movs	r2, #4
 800151e:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 8001522:	2200      	movs	r2, #0
 8001524:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 8001528:	2204      	movs	r2, #4
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 800152e:	2200      	movs	r2, #0
 8001530:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 8001534:	2200      	movs	r2, #0
 8001536:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 800153a:	2220      	movs	r2, #32
 800153c:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 8001540:	2200      	movs	r2, #0
 8001542:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 8001546:	2204      	movs	r2, #4
 8001548:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_FDCAN1_Init+0xc4>)
 800154c:	f000 fbec 	bl	8001d28 <HAL_FDCAN_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_FDCAN1_Init+0xbe>
		Error_Handler();
 8001556:	f000 f881 	bl	800165c <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	24000a60 	.word	0x24000a60
 8001564:	4000a000 	.word	0x4000a000

08001568 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <MX_GPIO_Init+0xe8>)
 8001580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001584:	4a32      	ldr	r2, [pc, #200]	; (8001650 <MX_GPIO_Init+0xe8>)
 8001586:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MX_GPIO_Init+0xe8>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <MX_GPIO_Init+0xe8>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	4a2b      	ldr	r2, [pc, #172]	; (8001650 <MX_GPIO_Init+0xe8>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <MX_GPIO_Init+0xe8>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <MX_GPIO_Init+0xe8>)
 80015bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <MX_GPIO_Init+0xe8>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ca:	4b21      	ldr	r3, [pc, #132]	; (8001650 <MX_GPIO_Init+0xe8>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <MX_GPIO_Init+0xe8>)
 80015da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <MX_GPIO_Init+0xe8>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <MX_GPIO_Init+0xe8>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	f244 0101 	movw	r1, #16385	; 0x4001
 80015fc:	4815      	ldr	r0, [pc, #84]	; (8001654 <MX_GPIO_Init+0xec>)
 80015fe:	f001 feaf 	bl	8003360 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	2102      	movs	r1, #2
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <MX_GPIO_Init+0xf0>)
 8001608:	f001 feaa 	bl	8003360 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14;
 800160c:	f244 0301 	movw	r3, #16385	; 0x4001
 8001610:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	480b      	ldr	r0, [pc, #44]	; (8001654 <MX_GPIO_Init+0xec>)
 8001626:	f001 fceb 	bl	8003000 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800162a:	2302      	movs	r3, #2
 800162c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_GPIO_Init+0xf0>)
 8001642:	f001 fcdd 	bl	8003000 <HAL_GPIO_Init>

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	58024400 	.word	0x58024400
 8001654:	58020400 	.word	0x58020400
 8001658:	58021000 	.word	0x58021000

0800165c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001668:	4801      	ldr	r0, [pc, #4]	; (8001670 <Error_Handler+0x14>)
 800166a:	f001 fe92 	bl	8003392 <HAL_GPIO_TogglePin>
 800166e:	e7f9      	b.n	8001664 <Error_Handler+0x8>
 8001670:	58020400 	.word	0x58020400

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_MspInit+0x30>)
 800167c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001680:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_MspInit+0x30>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_MspInit+0x30>)
 800168c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	58024400 	.word	0x58024400

080016a8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b0b8      	sub	sp, #224	; 0xe0
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	22bc      	movs	r2, #188	; 0xbc
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 ff07 	bl	80054dc <memset>
  if(hfdcan->Instance==FDCAN1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a29      	ldr	r2, [pc, #164]	; (8001778 <HAL_FDCAN_MspInit+0xd0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d14b      	bne.n	8001770 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80016d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80016de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80016e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e4:	f107 0310 	add.w	r3, r7, #16
 80016e8:	4618      	mov	r0, r3
 80016ea:	f002 fe05 	bl	80042f8 <HAL_RCCEx_PeriphCLKConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80016f4:	f7ff ffb2 	bl	800165c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80016f8:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_FDCAN_MspInit+0xd4>)
 80016fa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_FDCAN_MspInit+0xd4>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_FDCAN_MspInit+0xd4>)
 800170a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_FDCAN_MspInit+0xd4>)
 8001718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171c:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_FDCAN_MspInit+0xd4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_FDCAN_MspInit+0xd4>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001734:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800174e:	2309      	movs	r3, #9
 8001750:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001754:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001758:	4619      	mov	r1, r3
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <HAL_FDCAN_MspInit+0xd8>)
 800175c:	f001 fc50 	bl	8003000 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2013      	movs	r0, #19
 8001766:	f000 faaa 	bl	8001cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800176a:	2013      	movs	r0, #19
 800176c:	f000 fac1 	bl	8001cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	37e0      	adds	r7, #224	; 0xe0
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	4000a000 	.word	0x4000a000
 800177c:	58024400 	.word	0x58024400
 8001780:	58020000 	.word	0x58020000

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>
	...

0800178c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001794:	4801      	ldr	r0, [pc, #4]	; (800179c <HardFault_Handler+0x10>)
 8001796:	f001 fdfc 	bl	8003392 <HAL_GPIO_TogglePin>
 800179a:	e7f9      	b.n	8001790 <HardFault_Handler+0x4>
 800179c:	58020400 	.word	0x58020400

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e0:	f000 f966 	bl	8001ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <FDCAN1_IT0_IRQHandler+0x10>)
 80017ee:	f000 fef9 	bl	80025e4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	24000a60 	.word	0x24000a60

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f003 fe0e 	bl	800544c <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	24080000 	.word	0x24080000
 800185c:	00000400 	.word	0x00000400
 8001860:	24000b18 	.word	0x24000b18
 8001864:	24000b30 	.word	0x24000b30

08001868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800186c:	4b37      	ldr	r3, [pc, #220]	; (800194c <SystemInit+0xe4>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	4a36      	ldr	r2, [pc, #216]	; (800194c <SystemInit+0xe4>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800187c:	4b34      	ldr	r3, [pc, #208]	; (8001950 <SystemInit+0xe8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	2b06      	cmp	r3, #6
 8001886:	d807      	bhi.n	8001898 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001888:	4b31      	ldr	r3, [pc, #196]	; (8001950 <SystemInit+0xe8>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 030f 	bic.w	r3, r3, #15
 8001890:	4a2f      	ldr	r2, [pc, #188]	; (8001950 <SystemInit+0xe8>)
 8001892:	f043 0307 	orr.w	r3, r3, #7
 8001896:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <SystemInit+0xec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a2d      	ldr	r2, [pc, #180]	; (8001954 <SystemInit+0xec>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <SystemInit+0xec>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <SystemInit+0xec>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4929      	ldr	r1, [pc, #164]	; (8001954 <SystemInit+0xec>)
 80018b0:	4b29      	ldr	r3, [pc, #164]	; (8001958 <SystemInit+0xf0>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018b6:	4b26      	ldr	r3, [pc, #152]	; (8001950 <SystemInit+0xe8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d007      	beq.n	80018d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018c2:	4b23      	ldr	r3, [pc, #140]	; (8001950 <SystemInit+0xe8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 030f 	bic.w	r3, r3, #15
 80018ca:	4a21      	ldr	r2, [pc, #132]	; (8001950 <SystemInit+0xe8>)
 80018cc:	f043 0307 	orr.w	r3, r3, #7
 80018d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <SystemInit+0xec>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <SystemInit+0xec>)
 80018da:	2200      	movs	r2, #0
 80018dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80018de:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <SystemInit+0xec>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <SystemInit+0xec>)
 80018e6:	4a1d      	ldr	r2, [pc, #116]	; (800195c <SystemInit+0xf4>)
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <SystemInit+0xec>)
 80018ec:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <SystemInit+0xf8>)
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <SystemInit+0xec>)
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <SystemInit+0xfc>)
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <SystemInit+0xec>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <SystemInit+0xec>)
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <SystemInit+0xfc>)
 8001900:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <SystemInit+0xec>)
 8001904:	2200      	movs	r2, #0
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <SystemInit+0xec>)
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <SystemInit+0xfc>)
 800190c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <SystemInit+0xec>)
 8001910:	2200      	movs	r2, #0
 8001912:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <SystemInit+0xec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <SystemInit+0xec>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <SystemInit+0xec>)
 8001922:	2200      	movs	r2, #0
 8001924:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <SystemInit+0x100>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <SystemInit+0x104>)
 800192c:	4013      	ands	r3, r2
 800192e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001932:	d202      	bcs.n	800193a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <SystemInit+0x108>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <SystemInit+0x10c>)
 800193c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001940:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	52002000 	.word	0x52002000
 8001954:	58024400 	.word	0x58024400
 8001958:	eaf6ed7f 	.word	0xeaf6ed7f
 800195c:	02020200 	.word	0x02020200
 8001960:	01ff0000 	.word	0x01ff0000
 8001964:	01010280 	.word	0x01010280
 8001968:	5c001000 	.word	0x5c001000
 800196c:	ffff0000 	.word	0xffff0000
 8001970:	51008108 	.word	0x51008108
 8001974:	52004000 	.word	0x52004000

08001978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800197c:	f7ff ff74 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001982:	490d      	ldr	r1, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019a6:	f003 fd57 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019aa:	f7ff fca3 	bl	80012f4 <main>
  bx  lr
 80019ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019b8:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 80019bc:	08007620 	.word	0x08007620
  ldr r2, =_sbss
 80019c0:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 80019c4:	24000b30 	.word	0x24000b30

080019c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC3_IRQHandler>
	...

080019cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f000 f968 	bl	8001ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019d8:	f002 fb14 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_Init+0x68>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	0a1b      	lsrs	r3, r3, #8
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	4913      	ldr	r1, [pc, #76]	; (8001a38 <HAL_Init+0x6c>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_Init+0x68>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_Init+0x6c>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <HAL_Init+0x70>)
 8001a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a10:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <HAL_Init+0x74>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a16:	200f      	movs	r0, #15
 8001a18:	f000 f814 	bl	8001a44 <HAL_InitTick>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e002      	b.n	8001a2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a26:	f7ff fe25 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	58024400 	.word	0x58024400
 8001a38:	08005d3c 	.word	0x08005d3c
 8001a3c:	24000020 	.word	0x24000020
 8001a40:	2400001c 	.word	0x2400001c

08001a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_InitTick+0x60>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e021      	b.n	8001a9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_InitTick+0x64>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_InitTick+0x60>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f94d 	bl	8001d0e <HAL_SYSTICK_Config>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b0f      	cmp	r3, #15
 8001a82:	d80a      	bhi.n	8001a9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f917 	bl	8001cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <HAL_InitTick+0x68>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	24000028 	.word	0x24000028
 8001aa8:	2400001c 	.word	0x2400001c
 8001aac:	24000024 	.word	0x24000024

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	24000028 	.word	0x24000028
 8001ad4:	24000b1c 	.word	0x24000b1c

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	24000b1c 	.word	0x24000b1c

08001af0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <HAL_GetREVID+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0c1b      	lsrs	r3, r3, #16
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	5c001000 	.word	0x5c001000

08001b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <__NVIC_SetPriorityGrouping+0x40>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b24:	4013      	ands	r3, r2
 8001b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b36:	4a04      	ldr	r2, [pc, #16]	; (8001b48 <__NVIC_SetPriorityGrouping+0x40>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	60d3      	str	r3, [r2, #12]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	05fa0000 	.word	0x05fa0000

08001b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <__NVIC_GetPriorityGrouping+0x18>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	0a1b      	lsrs	r3, r3, #8
 8001b5a:	f003 0307 	and.w	r3, r3, #7
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	db0a      	blt.n	8001bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	490c      	ldr	r1, [pc, #48]	; (8001bf4 <__NVIC_SetPriority+0x4c>)
 8001bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc6:	0112      	lsls	r2, r2, #4
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	440b      	add	r3, r1
 8001bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd0:	e00a      	b.n	8001be8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4908      	ldr	r1, [pc, #32]	; (8001bf8 <__NVIC_SetPriority+0x50>)
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	3b04      	subs	r3, #4
 8001be0:	0112      	lsls	r2, r2, #4
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	440b      	add	r3, r1
 8001be6:	761a      	strb	r2, [r3, #24]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000e100 	.word	0xe000e100
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	f1c3 0307 	rsb	r3, r3, #7
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	bf28      	it	cs
 8001c1a:	2304      	movcs	r3, #4
 8001c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3304      	adds	r3, #4
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d902      	bls.n	8001c2c <NVIC_EncodePriority+0x30>
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3b03      	subs	r3, #3
 8001c2a:	e000      	b.n	8001c2e <NVIC_EncodePriority+0x32>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	401a      	ands	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	43d9      	mvns	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c54:	4313      	orrs	r3, r2
         );
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3724      	adds	r7, #36	; 0x24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c74:	d301      	bcc.n	8001c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00f      	b.n	8001c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <SysTick_Config+0x40>)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c82:	210f      	movs	r1, #15
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f7ff ff8e 	bl	8001ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <SysTick_Config+0x40>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <SysTick_Config+0x40>)
 8001c94:	2207      	movs	r2, #7
 8001c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	e000e010 	.word	0xe000e010

08001ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ff29 	bl	8001b08 <__NVIC_SetPriorityGrouping>
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b086      	sub	sp, #24
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ccc:	f7ff ff40 	bl	8001b50 <__NVIC_GetPriorityGrouping>
 8001cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68b9      	ldr	r1, [r7, #8]
 8001cd6:	6978      	ldr	r0, [r7, #20]
 8001cd8:	f7ff ff90 	bl	8001bfc <NVIC_EncodePriority>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff5f 	bl	8001ba8 <__NVIC_SetPriority>
}
 8001cea:	bf00      	nop
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff33 	bl	8001b6c <__NVIC_EnableIRQ>
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffa4 	bl	8001c64 <SysTick_Config>
 8001d1c:	4603      	mov	r3, r0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b098      	sub	sp, #96	; 0x60
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001d30:	4a84      	ldr	r2, [pc, #528]	; (8001f44 <HAL_FDCAN_Init+0x21c>)
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	4611      	mov	r1, r2
 8001d38:	224c      	movs	r2, #76	; 0x4c
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fbc0 	bl	80054c0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e1c6      	b.n	80020d8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7e      	ldr	r2, [pc, #504]	; (8001f48 <HAL_FDCAN_Init+0x220>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d106      	bne.n	8001d62 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fc96 	bl	80016a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0210 	bic.w	r2, r2, #16
 8001d8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d8c:	f7ff fea4 	bl	8001ad8 <HAL_GetTick>
 8001d90:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001d92:	e014      	b.n	8001dbe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001d94:	f7ff fea0 	bl	8001ad8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b0a      	cmp	r3, #10
 8001da0:	d90d      	bls.n	8001dbe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e18c      	b.n	80020d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d0e3      	beq.n	8001d94 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699a      	ldr	r2, [r3, #24]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ddc:	f7ff fe7c 	bl	8001ad8 <HAL_GetTick>
 8001de0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001de2:	e014      	b.n	8001e0e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001de4:	f7ff fe78 	bl	8001ad8 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b0a      	cmp	r3, #10
 8001df0:	d90d      	bls.n	8001e0e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2203      	movs	r2, #3
 8001e06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e164      	b.n	80020d8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0e3      	beq.n	8001de4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0202 	orr.w	r2, r2, #2
 8001e2a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7c1b      	ldrb	r3, [r3, #16]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e42:	619a      	str	r2, [r3, #24]
 8001e44:	e007      	b.n	8001e56 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699a      	ldr	r2, [r3, #24]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e54:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7c5b      	ldrb	r3, [r3, #17]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e6c:	619a      	str	r2, [r3, #24]
 8001e6e:	e007      	b.n	8001e80 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e7e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7c9b      	ldrb	r3, [r3, #18]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d108      	bne.n	8001e9a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e96:	619a      	str	r2, [r3, #24]
 8001e98:	e007      	b.n	8001eaa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ea8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001ece:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0210 	bic.w	r2, r2, #16
 8001ede:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d108      	bne.n	8001efa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699a      	ldr	r2, [r3, #24]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0204 	orr.w	r2, r2, #4
 8001ef6:	619a      	str	r2, [r3, #24]
 8001ef8:	e030      	b.n	8001f5c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02c      	beq.n	8001f5c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d020      	beq.n	8001f4c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f18:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0210 	orr.w	r2, r2, #16
 8001f28:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d114      	bne.n	8001f5c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699a      	ldr	r2, [r3, #24]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0220 	orr.w	r2, r2, #32
 8001f40:	619a      	str	r2, [r3, #24]
 8001f42:	e00b      	b.n	8001f5c <HAL_FDCAN_Init+0x234>
 8001f44:	08005cf0 	.word	0x08005cf0
 8001f48:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0220 	orr.w	r2, r2, #32
 8001f5a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f6c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f74:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001f84:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f86:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f90:	d115      	bne.n	8001fbe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001fa0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001faa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001fba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001fbc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe4:	4413      	add	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d011      	beq.n	800200e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001ff2:	f023 0107 	bic.w	r1, r3, #7
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3360      	adds	r3, #96	; 0x60
 8001ffe:	443b      	add	r3, r7
 8002000:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d011      	beq.n	800203a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800201e:	f023 0107 	bic.w	r1, r3, #7
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3360      	adds	r3, #96	; 0x60
 800202a:	443b      	add	r3, r7
 800202c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203e:	2b00      	cmp	r3, #0
 8002040:	d012      	beq.n	8002068 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800204a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	3360      	adds	r3, #96	; 0x60
 8002056:	443b      	add	r3, r7
 8002058:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800205c:	011a      	lsls	r2, r3, #4
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002078:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3360      	adds	r3, #96	; 0x60
 8002084:	443b      	add	r3, r7
 8002086:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800208a:	021a      	lsls	r2, r3, #8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_FDCAN_Init+0x3b8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d107      	bne.n	80020b0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f022 0203 	bic.w	r2, r2, #3
 80020ae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fd95 	bl	8002bf8 <FDCAN_CalcultateRamBlockAddresses>
 80020ce:	4603      	mov	r3, r0
 80020d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80020d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3760      	adds	r7, #96	; 0x60
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	4000a000 	.word	0x4000a000

080020e4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d111      	bne.n	800211c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699a      	ldr	r2, [r3, #24]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	e008      	b.n	800212e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002122:	f043 0204 	orr.w	r2, r3, #4
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d141      	bne.n	80021d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800215a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d109      	bne.n	8002176 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002168:	f043 0220 	orr.w	r2, r3, #32
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e038      	b.n	80021e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800217e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800218c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e026      	b.n	80021e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80021a2:	0c1b      	lsrs	r3, r3, #16
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	68b9      	ldr	r1, [r7, #8]
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fea7 	bl	8002f04 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2101      	movs	r1, #1
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80021c6:	2201      	movs	r2, #1
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e008      	b.n	80021e8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021dc:	f043 0208 	orr.w	r2, r3, #8
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002208:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800220a:	7efb      	ldrb	r3, [r7, #27]
 800220c:	2b02      	cmp	r3, #2
 800220e:	f040 814b 	bne.w	80024a8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d14d      	bne.n	80022b4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002220:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800222e:	f043 0220 	orr.w	r2, r3, #32
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e13e      	b.n	80024ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e12c      	b.n	80024ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002268:	0e1b      	lsrs	r3, r3, #24
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d10b      	bne.n	800228a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800227a:	0fdb      	lsrs	r3, r3, #31
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002284:	d101      	bne.n	800228a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002286:	2301      	movs	r3, #1
 8002288:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	4413      	add	r3, r2
 800229c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	69f9      	ldr	r1, [r7, #28]
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
 80022b2:	e069      	b.n	8002388 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b41      	cmp	r3, #65	; 0x41
 80022b8:	d14d      	bne.n	8002356 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022d0:	f043 0220 	orr.w	r2, r3, #32
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e0ed      	b.n	80024ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80022e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0db      	b.n	80024ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800230a:	0e1b      	lsrs	r3, r3, #24
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d10b      	bne.n	800232c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800231c:	0fdb      	lsrs	r3, r3, #31
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002326:	d101      	bne.n	800232c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002328:	2301      	movs	r3, #1
 800232a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002348:	69f9      	ldr	r1, [r7, #28]
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	4413      	add	r3, r2
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
 8002354:	e018      	b.n	8002388 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	429a      	cmp	r2, r3
 800235e:	d309      	bcc.n	8002374 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002366:	f043 0220 	orr.w	r2, r3, #32
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0a2      	b.n	80024ba <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	0c9b      	lsrs	r3, r3, #18
 80023a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e005      	b.n	80023b8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	3304      	adds	r3, #4
 80023d4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0e1b      	lsrs	r3, r3, #24
 800240a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0fda      	lsrs	r2, r3, #31
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	3304      	adds	r3, #4
 8002420:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	e00a      	b.n	8002442 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	441a      	add	r2, r3
 8002432:	6839      	ldr	r1, [r7, #0]
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	440b      	add	r3, r1
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	3301      	adds	r3, #1
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	4a1f      	ldr	r2, [pc, #124]	; (80024c8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	461a      	mov	r2, r3
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	4293      	cmp	r3, r2
 8002452:	d3eb      	bcc.n	800242c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b40      	cmp	r3, #64	; 0x40
 8002458:	d105      	bne.n	8002466 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	69fa      	ldr	r2, [r7, #28]
 8002460:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8002464:	e01e      	b.n	80024a4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b41      	cmp	r3, #65	; 0x41
 800246a:	d105      	bne.n	8002478 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002476:	e015      	b.n	80024a4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b1f      	cmp	r3, #31
 800247c:	d808      	bhi.n	8002490 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2101      	movs	r1, #1
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800248e:	e009      	b.n	80024a4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 021f 	and.w	r2, r3, #31
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e008      	b.n	80024ba <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024ae:	f043 0208 	orr.w	r2, r3, #8
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	372c      	adds	r7, #44	; 0x2c
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	08005d4c 	.word	0x08005d4c

080024cc <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002502:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002504:	7dfb      	ldrb	r3, [r7, #23]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d002      	beq.n	8002510 <HAL_FDCAN_ActivateNotification+0x20>
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d155      	bne.n	80025bc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4013      	ands	r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d108      	bne.n	8002530 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	65da      	str	r2, [r3, #92]	; 0x5c
 800252e:	e014      	b.n	800255a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4013      	ands	r3, r2
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	429a      	cmp	r2, r3
 800253e:	d108      	bne.n	8002552 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0202 	orr.w	r2, r2, #2
 800254e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002550:	e003      	b.n	800255a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2203      	movs	r2, #3
 8002558:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002560:	2b00      	cmp	r3, #0
 8002562:	d009      	beq.n	8002578 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	430a      	orrs	r2, r1
 8002574:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	430a      	orrs	r2, r1
 8002592:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <HAL_FDCAN_ActivateNotification+0xec>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	430b      	orrs	r3, r1
 80025a8:	6553      	str	r3, [r2, #84]	; 0x54
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	0f9b      	lsrs	r3, r3, #30
 80025b2:	490b      	ldr	r1, [pc, #44]	; (80025e0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	e008      	b.n	80025ce <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025c2:	f043 0202 	orr.w	r2, r3, #2
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
  }
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	3fcfffff 	.word	0x3fcfffff
 80025e0:	4000a800 	.word	0x4000a800

080025e4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b096      	sub	sp, #88	; 0x58
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80025ec:	4b9a      	ldr	r3, [pc, #616]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	079b      	lsls	r3, r3, #30
 80025f2:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80025f4:	4b98      	ldr	r3, [pc, #608]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	079b      	lsls	r3, r3, #30
 80025fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025fc:	4013      	ands	r3, r2
 80025fe:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800260a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002614:	4013      	ands	r3, r2
 8002616:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800262c:	4013      	ands	r3, r2
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800263a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002644:	4013      	ands	r3, r2
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002652:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800265c:	4013      	ands	r3, r2
 800265e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002666:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800266a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002674:	4013      	ands	r3, r2
 8002676:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002686:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d010      	beq.n	80026b6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00a      	beq.n	80026b6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a8:	651a      	str	r2, [r3, #80]	; 0x50
 80026aa:	4b6b      	ldr	r3, [pc, #428]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 fa54 	bl	8002b5e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80026b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026b8:	0a9b      	lsrs	r3, r3, #10
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01d      	beq.n	80026fe <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	0a9b      	lsrs	r3, r3, #10
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d017      	beq.n	80026fe <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80026e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026e2:	4013      	ands	r3, r2
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ee:	651a      	str	r2, [r3, #80]	; 0x50
 80026f0:	4b59      	ldr	r3, [pc, #356]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80026f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fa07 	bl	8002b0c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00d      	beq.n	8002720 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800270a:	4b54      	ldr	r3, [pc, #336]	; (800285c <HAL_FDCAN_IRQHandler+0x278>)
 800270c:	400b      	ands	r3, r1
 800270e:	6513      	str	r3, [r2, #80]	; 0x50
 8002710:	4a51      	ldr	r2, [pc, #324]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 8002712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002714:	0f9b      	lsrs	r3, r3, #30
 8002716:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f9c0 	bl	8002aa0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00d      	beq.n	8002742 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800272c:	4b4b      	ldr	r3, [pc, #300]	; (800285c <HAL_FDCAN_IRQHandler+0x278>)
 800272e:	400b      	ands	r3, r1
 8002730:	6513      	str	r3, [r2, #80]	; 0x50
 8002732:	4a49      	ldr	r2, [pc, #292]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 8002734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002736:	0f9b      	lsrs	r3, r3, #30
 8002738:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800273a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f9ba 	bl	8002ab6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00d      	beq.n	8002764 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800274e:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_FDCAN_IRQHandler+0x278>)
 8002750:	400b      	ands	r3, r1
 8002752:	6513      	str	r3, [r2, #80]	; 0x50
 8002754:	4a40      	ldr	r2, [pc, #256]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 8002756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002758:	0f9b      	lsrs	r3, r3, #30
 800275a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800275c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fd ffae 	bl	80006c0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002770:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_FDCAN_IRQHandler+0x278>)
 8002772:	400b      	ands	r3, r1
 8002774:	6513      	str	r3, [r2, #80]	; 0x50
 8002776:	4a38      	ldr	r2, [pc, #224]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 8002778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800277a:	0f9b      	lsrs	r3, r3, #30
 800277c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800277e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f9a3 	bl	8002acc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002788:	0adb      	lsrs	r3, r3, #11
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d010      	beq.n	80027b4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002794:	0adb      	lsrs	r3, r3, #11
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027a6:	651a      	str	r2, [r3, #80]	; 0x50
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f997 	bl	8002ae2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80027b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b6:	0a5b      	lsrs	r3, r3, #9
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01d      	beq.n	80027fc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	0a5b      	lsrs	r3, r3, #9
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d017      	beq.n	80027fc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027d4:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e0:	4013      	ands	r3, r2
 80027e2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ec:	651a      	str	r2, [r3, #80]	; 0x50
 80027ee:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80027f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f97d 	bl	8002af6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80027fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fe:	0cdb      	lsrs	r3, r3, #19
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d010      	beq.n	800282a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280a:	0cdb      	lsrs	r3, r3, #19
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800281c:	651a      	str	r2, [r3, #80]	; 0x50
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f97c 	bl	8002b22 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800282a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800284a:	651a      	str	r2, [r3, #80]	; 0x50
 800284c:	4b02      	ldr	r3, [pc, #8]	; (8002858 <HAL_FDCAN_IRQHandler+0x274>)
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	e004      	b.n	8002860 <HAL_FDCAN_IRQHandler+0x27c>
 8002856:	bf00      	nop
 8002858:	4000a800 	.word	0x4000a800
 800285c:	3fcfffff 	.word	0x3fcfffff
 8002860:	f000 f969 	bl	8002b36 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002866:	0c9b      	lsrs	r3, r3, #18
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d010      	beq.n	8002892 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002872:	0c9b      	lsrs	r3, r3, #18
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002884:	651a      	str	r2, [r3, #80]	; 0x50
 8002886:	4b83      	ldr	r3, [pc, #524]	; (8002a94 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f95c 	bl	8002b4a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002894:	0c5b      	lsrs	r3, r3, #17
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d015      	beq.n	80028ca <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a0:	0c5b      	lsrs	r3, r3, #17
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00f      	beq.n	80028ca <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b2:	651a      	str	r2, [r3, #80]	; 0x50
 80028b4:	4b77      	ldr	r3, [pc, #476]	; (8002a94 <HAL_FDCAN_IRQHandler+0x4b0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80028ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00d      	beq.n	80028ec <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028d6:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <HAL_FDCAN_IRQHandler+0x4b4>)
 80028d8:	400b      	ands	r3, r1
 80028da:	6513      	str	r3, [r2, #80]	; 0x50
 80028dc:	4a6d      	ldr	r2, [pc, #436]	; (8002a94 <HAL_FDCAN_IRQHandler+0x4b0>)
 80028de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e0:	0f9b      	lsrs	r3, r3, #30
 80028e2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80028e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f94d 	bl	8002b86 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80028ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d011      	beq.n	8002916 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_FDCAN_IRQHandler+0x4b4>)
 80028fa:	400b      	ands	r3, r1
 80028fc:	6513      	str	r3, [r2, #80]	; 0x50
 80028fe:	4a65      	ldr	r2, [pc, #404]	; (8002a94 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002902:	0f9b      	lsrs	r3, r3, #30
 8002904:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800290c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a60      	ldr	r2, [pc, #384]	; (8002a9c <HAL_FDCAN_IRQHandler+0x4b8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	f040 80ac 	bne.w	8002a7a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 80a4 	beq.w	8002a7a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002946:	4013      	ands	r3, r2
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800295e:	4013      	ands	r3, r2
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002976:	4013      	ands	r3, r2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8002984:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	4013      	ands	r3, r2
 8002990:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800299c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80029c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f8e6 	bl	8002b9c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029dc:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80029de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f8e6 	bl	8002bb2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01a      	beq.n	8002a28 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d014      	beq.n	8002a28 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a14:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2240      	movs	r2, #64	; 0x40
 8002a1c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	6939      	ldr	r1, [r7, #16]
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f8d0 	bl	8002bc8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a34:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f8d1 	bl	8002be0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d00b      	beq.n	8002a5c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	6a3a      	ldr	r2, [r7, #32]
 8002a4a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00b      	beq.n	8002a7a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 f874 	bl	8002b72 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	3758      	adds	r7, #88	; 0x58
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	4000a800 	.word	0x4000a800
 8002a98:	3fcfffff 	.word	0x3fcfffff
 8002a9c:	4000a000 	.word	0x4000a000

08002aa0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b083      	sub	sp, #12
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
	...

08002bf8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002c0e:	4ba7      	ldr	r3, [pc, #668]	; (8002eac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	0091      	lsls	r1, r2, #2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6812      	ldr	r2, [r2, #0]
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c28:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	041a      	lsls	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	4413      	add	r3, r2
 8002c44:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c4e:	4b97      	ldr	r3, [pc, #604]	; (8002eac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	0091      	lsls	r1, r2, #2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	4413      	add	r3, r2
 8002c86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002c90:	4b86      	ldr	r3, [pc, #536]	; (8002eac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	0091      	lsls	r1, r2, #2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002caa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	041a      	lsls	r2, r3, #16
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	4413      	add	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cd8:	4b74      	ldr	r3, [pc, #464]	; (8002eac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	0091      	lsls	r1, r2, #2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cf2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfa:	041a      	lsls	r2, r3, #16
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d0e:	fb02 f303 	mul.w	r3, r2, r3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4413      	add	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002d20:	4b62      	ldr	r3, [pc, #392]	; (8002eac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	0091      	lsls	r1, r2, #2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	4413      	add	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002d4c:	4b57      	ldr	r3, [pc, #348]	; (8002eac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	0091      	lsls	r1, r2, #2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d66:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	041a      	lsls	r2, r3, #16
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	430a      	orrs	r2, r1
 8002d76:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4413      	add	r3, r2
 8002d84:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d8e:	4b47      	ldr	r3, [pc, #284]	; (8002eac <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	0091      	lsls	r1, r2, #2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002da8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002dc4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dcc:	061a      	lsls	r2, r3, #24
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ddc:	4b34      	ldr	r3, [pc, #208]	; (8002eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002dde:	4413      	add	r3, r2
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	441a      	add	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	441a      	add	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	441a      	add	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	441a      	add	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	441a      	add	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d915      	bls.n	8002ed4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002ea8:	e006      	b.n	8002eb8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002eaa:	bf00      	nop
 8002eac:	ffff0003 	.word	0xffff0003
 8002eb0:	10002b00 	.word	0x10002b00
 8002eb4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ebe:	f043 0220 	orr.w	r2, r3, #32
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2203      	movs	r2, #3
 8002ecc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e010      	b.n	8002ef6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	e005      	b.n	8002ee8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d3f3      	bcc.n	8002edc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop

08002f04 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002f22:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	e00a      	b.n	8002f46 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002f38:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002f3e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002f40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f44:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002f50:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002f56:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002f5c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f70:	6839      	ldr	r1, [r7, #0]
 8002f72:	fb01 f303 	mul.w	r3, r1, r3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	3304      	adds	r3, #4
 8002f86:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	3304      	adds	r3, #4
 8002f92:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e020      	b.n	8002fdc <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3303      	adds	r3, #3
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3302      	adds	r3, #2
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	440b      	add	r3, r1
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002fb2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	440b      	add	r3, r1
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002fc0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	440a      	add	r2, r1
 8002fc8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002fca:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
 8002fe2:	4a06      	ldr	r2, [pc, #24]	; (8002ffc <FDCAN_CopyMessageToRAM+0xf8>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d3d5      	bcc.n	8002f9a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
 8002ff2:	3724      	adds	r7, #36	; 0x24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	08005d4c 	.word	0x08005d4c

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800300e:	4b89      	ldr	r3, [pc, #548]	; (8003234 <HAL_GPIO_Init+0x234>)
 8003010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003012:	e194      	b.n	800333e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8186 	beq.w	8003338 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d005      	beq.n	8003044 <HAL_GPIO_Init+0x44>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d130      	bne.n	80030a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800307a:	2201      	movs	r2, #1
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 0201 	and.w	r2, r3, #1
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d017      	beq.n	80030e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d123      	bne.n	8003136 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4313      	orrs	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0203 	and.w	r2, r3, #3
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80e0 	beq.w	8003338 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003178:	4b2f      	ldr	r3, [pc, #188]	; (8003238 <HAL_GPIO_Init+0x238>)
 800317a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800317e:	4a2e      	ldr	r2, [pc, #184]	; (8003238 <HAL_GPIO_Init+0x238>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003188:	4b2b      	ldr	r3, [pc, #172]	; (8003238 <HAL_GPIO_Init+0x238>)
 800318a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003196:	4a29      	ldr	r2, [pc, #164]	; (800323c <HAL_GPIO_Init+0x23c>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a20      	ldr	r2, [pc, #128]	; (8003240 <HAL_GPIO_Init+0x240>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d052      	beq.n	8003268 <HAL_GPIO_Init+0x268>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_GPIO_Init+0x244>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d031      	beq.n	800322e <HAL_GPIO_Init+0x22e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_GPIO_Init+0x248>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d02b      	beq.n	800322a <HAL_GPIO_Init+0x22a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <HAL_GPIO_Init+0x24c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d025      	beq.n	8003226 <HAL_GPIO_Init+0x226>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_GPIO_Init+0x250>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01f      	beq.n	8003222 <HAL_GPIO_Init+0x222>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_GPIO_Init+0x254>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d019      	beq.n	800321e <HAL_GPIO_Init+0x21e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a1a      	ldr	r2, [pc, #104]	; (8003258 <HAL_GPIO_Init+0x258>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_GPIO_Init+0x21a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a19      	ldr	r2, [pc, #100]	; (800325c <HAL_GPIO_Init+0x25c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00d      	beq.n	8003216 <HAL_GPIO_Init+0x216>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a18      	ldr	r2, [pc, #96]	; (8003260 <HAL_GPIO_Init+0x260>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_Init+0x212>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a17      	ldr	r2, [pc, #92]	; (8003264 <HAL_GPIO_Init+0x264>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_GPIO_Init+0x20e>
 800320a:	2309      	movs	r3, #9
 800320c:	e02d      	b.n	800326a <HAL_GPIO_Init+0x26a>
 800320e:	230a      	movs	r3, #10
 8003210:	e02b      	b.n	800326a <HAL_GPIO_Init+0x26a>
 8003212:	2308      	movs	r3, #8
 8003214:	e029      	b.n	800326a <HAL_GPIO_Init+0x26a>
 8003216:	2307      	movs	r3, #7
 8003218:	e027      	b.n	800326a <HAL_GPIO_Init+0x26a>
 800321a:	2306      	movs	r3, #6
 800321c:	e025      	b.n	800326a <HAL_GPIO_Init+0x26a>
 800321e:	2305      	movs	r3, #5
 8003220:	e023      	b.n	800326a <HAL_GPIO_Init+0x26a>
 8003222:	2304      	movs	r3, #4
 8003224:	e021      	b.n	800326a <HAL_GPIO_Init+0x26a>
 8003226:	2303      	movs	r3, #3
 8003228:	e01f      	b.n	800326a <HAL_GPIO_Init+0x26a>
 800322a:	2302      	movs	r3, #2
 800322c:	e01d      	b.n	800326a <HAL_GPIO_Init+0x26a>
 800322e:	2301      	movs	r3, #1
 8003230:	e01b      	b.n	800326a <HAL_GPIO_Init+0x26a>
 8003232:	bf00      	nop
 8003234:	58000080 	.word	0x58000080
 8003238:	58024400 	.word	0x58024400
 800323c:	58000400 	.word	0x58000400
 8003240:	58020000 	.word	0x58020000
 8003244:	58020400 	.word	0x58020400
 8003248:	58020800 	.word	0x58020800
 800324c:	58020c00 	.word	0x58020c00
 8003250:	58021000 	.word	0x58021000
 8003254:	58021400 	.word	0x58021400
 8003258:	58021800 	.word	0x58021800
 800325c:	58021c00 	.word	0x58021c00
 8003260:	58022000 	.word	0x58022000
 8003264:	58022400 	.word	0x58022400
 8003268:	2300      	movs	r3, #0
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	f002 0203 	and.w	r2, r2, #3
 8003270:	0092      	lsls	r2, r2, #2
 8003272:	4093      	lsls	r3, r2
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800327a:	4938      	ldr	r1, [pc, #224]	; (800335c <HAL_GPIO_Init+0x35c>)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	089b      	lsrs	r3, r3, #2
 8003280:	3302      	adds	r3, #2
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80032ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3301      	adds	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	f47f ae63 	bne.w	8003014 <HAL_GPIO_Init+0x14>
  }
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	3724      	adds	r7, #36	; 0x24
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	58000400 	.word	0x58000400

08003360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003370:	787b      	ldrb	r3, [r7, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800337c:	e003      	b.n	8003386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	619a      	str	r2, [r3, #24]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033a4:	887a      	ldrh	r2, [r7, #2]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	041a      	lsls	r2, r3, #16
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43d9      	mvns	r1, r3
 80033b0:	887b      	ldrh	r3, [r7, #2]
 80033b2:	400b      	ands	r3, r1
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	619a      	str	r2, [r3, #24]
}
 80033ba:	bf00      	nop
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <HAL_PWREx_ConfigSupply+0x70>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d00a      	beq.n	80033f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033dc:	4b16      	ldr	r3, [pc, #88]	; (8003438 <HAL_PWREx_ConfigSupply+0x70>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d001      	beq.n	80033ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e01f      	b.n	800342e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e01d      	b.n	800342e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033f2:	4b11      	ldr	r3, [pc, #68]	; (8003438 <HAL_PWREx_ConfigSupply+0x70>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 0207 	bic.w	r2, r3, #7
 80033fa:	490f      	ldr	r1, [pc, #60]	; (8003438 <HAL_PWREx_ConfigSupply+0x70>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003402:	f7fe fb69 	bl	8001ad8 <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003408:	e009      	b.n	800341e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800340a:	f7fe fb65 	bl	8001ad8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003418:	d901      	bls.n	800341e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_PWREx_ConfigSupply+0x70>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342a:	d1ee      	bne.n	800340a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	58024800 	.word	0x58024800

0800343c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08c      	sub	sp, #48	; 0x30
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d102      	bne.n	8003450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f000 bc1d 	b.w	8003c8a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8087 	beq.w	800356c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345e:	4b99      	ldr	r3, [pc, #612]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003468:	4b96      	ldr	r3, [pc, #600]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800346a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	2b10      	cmp	r3, #16
 8003472:	d007      	beq.n	8003484 <HAL_RCC_OscConfig+0x48>
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	2b18      	cmp	r3, #24
 8003478:	d110      	bne.n	800349c <HAL_RCC_OscConfig+0x60>
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d10b      	bne.n	800349c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	4b8f      	ldr	r3, [pc, #572]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d06c      	beq.n	800356a <HAL_RCC_OscConfig+0x12e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d168      	bne.n	800356a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e3f6      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x78>
 80034a6:	4b87      	ldr	r3, [pc, #540]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a86      	ldr	r2, [pc, #536]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e02e      	b.n	8003512 <HAL_RCC_OscConfig+0xd6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10c      	bne.n	80034d6 <HAL_RCC_OscConfig+0x9a>
 80034bc:	4b81      	ldr	r3, [pc, #516]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a80      	ldr	r2, [pc, #512]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b7e      	ldr	r3, [pc, #504]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a7d      	ldr	r2, [pc, #500]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	e01d      	b.n	8003512 <HAL_RCC_OscConfig+0xd6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034de:	d10c      	bne.n	80034fa <HAL_RCC_OscConfig+0xbe>
 80034e0:	4b78      	ldr	r3, [pc, #480]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a77      	ldr	r2, [pc, #476]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	4b75      	ldr	r3, [pc, #468]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a74      	ldr	r2, [pc, #464]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f6:	6013      	str	r3, [r2, #0]
 80034f8:	e00b      	b.n	8003512 <HAL_RCC_OscConfig+0xd6>
 80034fa:	4b72      	ldr	r3, [pc, #456]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a71      	ldr	r2, [pc, #452]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b6f      	ldr	r3, [pc, #444]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6e      	ldr	r2, [pc, #440]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800350c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003510:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d013      	beq.n	8003542 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351a:	f7fe fadd 	bl	8001ad8 <HAL_GetTick>
 800351e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003522:	f7fe fad9 	bl	8001ad8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e3aa      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003534:	4b63      	ldr	r3, [pc, #396]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0xe6>
 8003540:	e014      	b.n	800356c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fac9 	bl	8001ad8 <HAL_GetTick>
 8003546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800354a:	f7fe fac5 	bl	8001ad8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	; 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e396      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800355c:	4b59      	ldr	r3, [pc, #356]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x10e>
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80cb 	beq.w	8003710 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800357a:	4b52      	ldr	r3, [pc, #328]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003582:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003584:	4b4f      	ldr	r3, [pc, #316]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <HAL_RCC_OscConfig+0x164>
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2b18      	cmp	r3, #24
 8003594:	d156      	bne.n	8003644 <HAL_RCC_OscConfig+0x208>
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d151      	bne.n	8003644 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a0:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_OscConfig+0x17c>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e368      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035b8:	4b42      	ldr	r3, [pc, #264]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f023 0219 	bic.w	r2, r3, #25
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	493f      	ldr	r1, [pc, #252]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035ca:	f7fe fa85 	bl	8001ad8 <HAL_GetTick>
 80035ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fe fa81 	bl	8001ad8 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e352      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035e4:	4b37      	ldr	r3, [pc, #220]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f0:	f7fe fa7e 	bl	8001af0 <HAL_GetREVID>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d817      	bhi.n	800362e <HAL_RCC_OscConfig+0x1f2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d108      	bne.n	8003618 <HAL_RCC_OscConfig+0x1dc>
 8003606:	4b2f      	ldr	r3, [pc, #188]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800360e:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003614:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003616:	e07b      	b.n	8003710 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	031b      	lsls	r3, r3, #12
 8003626:	4927      	ldr	r1, [pc, #156]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003628:	4313      	orrs	r3, r2
 800362a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800362c:	e070      	b.n	8003710 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	061b      	lsls	r3, r3, #24
 800363c:	4921      	ldr	r1, [pc, #132]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800363e:	4313      	orrs	r3, r2
 8003640:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003642:	e065      	b.n	8003710 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d048      	beq.n	80036de <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800364c:	4b1d      	ldr	r3, [pc, #116]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 0219 	bic.w	r2, r3, #25
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	491a      	ldr	r1, [pc, #104]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365e:	f7fe fa3b 	bl	8001ad8 <HAL_GetTick>
 8003662:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003666:	f7fe fa37 	bl	8001ad8 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e308      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	f7fe fa34 	bl	8001af0 <HAL_GetREVID>
 8003688:	4603      	mov	r3, r0
 800368a:	f241 0203 	movw	r2, #4099	; 0x1003
 800368e:	4293      	cmp	r3, r2
 8003690:	d81a      	bhi.n	80036c8 <HAL_RCC_OscConfig+0x28c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d108      	bne.n	80036ac <HAL_RCC_OscConfig+0x270>
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036a2:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a8:	6053      	str	r3, [r2, #4]
 80036aa:	e031      	b.n	8003710 <HAL_RCC_OscConfig+0x2d4>
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	031b      	lsls	r3, r3, #12
 80036ba:	4902      	ldr	r1, [pc, #8]	; (80036c4 <HAL_RCC_OscConfig+0x288>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
 80036c0:	e026      	b.n	8003710 <HAL_RCC_OscConfig+0x2d4>
 80036c2:	bf00      	nop
 80036c4:	58024400 	.word	0x58024400
 80036c8:	4b9a      	ldr	r3, [pc, #616]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	4997      	ldr	r1, [pc, #604]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	e018      	b.n	8003710 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b95      	ldr	r3, [pc, #596]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a94      	ldr	r2, [pc, #592]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7fe f9f5 	bl	8001ad8 <HAL_GetTick>
 80036ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f2:	f7fe f9f1 	bl	8001ad8 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e2c2      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003704:	4b8b      	ldr	r3, [pc, #556]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f0      	bne.n	80036f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b00      	cmp	r3, #0
 800371a:	f000 80a9 	beq.w	8003870 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800371e:	4b85      	ldr	r3, [pc, #532]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003726:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003728:	4b82      	ldr	r3, [pc, #520]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d007      	beq.n	8003744 <HAL_RCC_OscConfig+0x308>
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b18      	cmp	r3, #24
 8003738:	d13a      	bne.n	80037b0 <HAL_RCC_OscConfig+0x374>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d135      	bne.n	80037b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003744:	4b7b      	ldr	r3, [pc, #492]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_OscConfig+0x320>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d001      	beq.n	800375c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e296      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800375c:	f7fe f9c8 	bl	8001af0 <HAL_GetREVID>
 8003760:	4603      	mov	r3, r0
 8003762:	f241 0203 	movw	r2, #4099	; 0x1003
 8003766:	4293      	cmp	r3, r2
 8003768:	d817      	bhi.n	800379a <HAL_RCC_OscConfig+0x35e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	2b20      	cmp	r3, #32
 8003770:	d108      	bne.n	8003784 <HAL_RCC_OscConfig+0x348>
 8003772:	4b70      	ldr	r3, [pc, #448]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800377a:	4a6e      	ldr	r2, [pc, #440]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800377c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003780:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003782:	e075      	b.n	8003870 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003784:	4b6b      	ldr	r3, [pc, #428]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	069b      	lsls	r3, r3, #26
 8003792:	4968      	ldr	r1, [pc, #416]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003798:	e06a      	b.n	8003870 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800379a:	4b66      	ldr	r3, [pc, #408]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	061b      	lsls	r3, r3, #24
 80037a8:	4962      	ldr	r1, [pc, #392]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037ae:	e05f      	b.n	8003870 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d042      	beq.n	800383e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037b8:	4b5e      	ldr	r3, [pc, #376]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5d      	ldr	r2, [pc, #372]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80037be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c4:	f7fe f988 	bl	8001ad8 <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80037cc:	f7fe f984 	bl	8001ad8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e255      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037de:	4b55      	ldr	r3, [pc, #340]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037ea:	f7fe f981 	bl	8001af0 <HAL_GetREVID>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d817      	bhi.n	8003828 <HAL_RCC_OscConfig+0x3ec>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d108      	bne.n	8003812 <HAL_RCC_OscConfig+0x3d6>
 8003800:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003808:	4a4a      	ldr	r2, [pc, #296]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800380a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800380e:	6053      	str	r3, [r2, #4]
 8003810:	e02e      	b.n	8003870 <HAL_RCC_OscConfig+0x434>
 8003812:	4b48      	ldr	r3, [pc, #288]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	069b      	lsls	r3, r3, #26
 8003820:	4944      	ldr	r1, [pc, #272]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
 8003826:	e023      	b.n	8003870 <HAL_RCC_OscConfig+0x434>
 8003828:	4b42      	ldr	r3, [pc, #264]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	061b      	lsls	r3, r3, #24
 8003836:	493f      	ldr	r1, [pc, #252]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003838:	4313      	orrs	r3, r2
 800383a:	60cb      	str	r3, [r1, #12]
 800383c:	e018      	b.n	8003870 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800383e:	4b3d      	ldr	r3, [pc, #244]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a3c      	ldr	r2, [pc, #240]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fe f945 	bl	8001ad8 <HAL_GetTick>
 800384e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003852:	f7fe f941 	bl	8001ad8 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e212      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003864:	4b33      	ldr	r3, [pc, #204]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f0      	bne.n	8003852 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d036      	beq.n	80038ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d019      	beq.n	80038b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003888:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 800388a:	f043 0301 	orr.w	r3, r3, #1
 800388e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fe f922 	bl	8001ad8 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003898:	f7fe f91e 	bl	8001ad8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1ef      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80038ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0x45c>
 80038b6:	e018      	b.n	80038ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b8:	4b1e      	ldr	r3, [pc, #120]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80038ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038bc:	4a1d      	ldr	r2, [pc, #116]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe f908 	bl	8001ad8 <HAL_GetTick>
 80038c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038cc:	f7fe f904 	bl	8001ad8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e1d5      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 80038e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d039      	beq.n	800396a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d01c      	beq.n	8003938 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003908:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800390a:	f7fe f8e5 	bl	8001ad8 <HAL_GetTick>
 800390e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003912:	f7fe f8e1 	bl	8001ad8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1b2      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_OscConfig+0x4f8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x4d6>
 8003930:	e01b      	b.n	800396a <HAL_RCC_OscConfig+0x52e>
 8003932:	bf00      	nop
 8003934:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003938:	4b9b      	ldr	r3, [pc, #620]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a9a      	ldr	r2, [pc, #616]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 800393e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003942:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003944:	f7fe f8c8 	bl	8001ad8 <HAL_GetTick>
 8003948:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800394c:	f7fe f8c4 	bl	8001ad8 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e195      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800395e:	4b92      	ldr	r3, [pc, #584]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8081 	beq.w	8003a7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003978:	4b8c      	ldr	r3, [pc, #560]	; (8003bac <HAL_RCC_OscConfig+0x770>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a8b      	ldr	r2, [pc, #556]	; (8003bac <HAL_RCC_OscConfig+0x770>)
 800397e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003984:	f7fe f8a8 	bl	8001ad8 <HAL_GetTick>
 8003988:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800398c:	f7fe f8a4 	bl	8001ad8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b64      	cmp	r3, #100	; 0x64
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e175      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800399e:	4b83      	ldr	r3, [pc, #524]	; (8003bac <HAL_RCC_OscConfig+0x770>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d0f0      	beq.n	800398c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d106      	bne.n	80039c0 <HAL_RCC_OscConfig+0x584>
 80039b2:	4b7d      	ldr	r3, [pc, #500]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	4a7c      	ldr	r2, [pc, #496]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	6713      	str	r3, [r2, #112]	; 0x70
 80039be:	e02d      	b.n	8003a1c <HAL_RCC_OscConfig+0x5e0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCC_OscConfig+0x5a6>
 80039c8:	4b77      	ldr	r3, [pc, #476]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039cc:	4a76      	ldr	r2, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	6713      	str	r3, [r2, #112]	; 0x70
 80039d4:	4b74      	ldr	r3, [pc, #464]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	4a73      	ldr	r2, [pc, #460]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	6713      	str	r3, [r2, #112]	; 0x70
 80039e0:	e01c      	b.n	8003a1c <HAL_RCC_OscConfig+0x5e0>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x5c8>
 80039ea:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	4a6e      	ldr	r2, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039f0:	f043 0304 	orr.w	r3, r3, #4
 80039f4:	6713      	str	r3, [r2, #112]	; 0x70
 80039f6:	4b6c      	ldr	r3, [pc, #432]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a6b      	ldr	r2, [pc, #428]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0x5e0>
 8003a04:	4b68      	ldr	r3, [pc, #416]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a67      	ldr	r2, [pc, #412]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a10:	4b65      	ldr	r3, [pc, #404]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a64      	ldr	r2, [pc, #400]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003a16:	f023 0304 	bic.w	r3, r3, #4
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d015      	beq.n	8003a50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a24:	f7fe f858 	bl	8001ad8 <HAL_GetTick>
 8003a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a2c:	f7fe f854 	bl	8001ad8 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e123      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a42:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ee      	beq.n	8003a2c <HAL_RCC_OscConfig+0x5f0>
 8003a4e:	e014      	b.n	8003a7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a50:	f7fe f842 	bl	8001ad8 <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a56:	e00a      	b.n	8003a6e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a58:	f7fe f83e 	bl	8001ad8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e10d      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a6e:	4b4e      	ldr	r3, [pc, #312]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ee      	bne.n	8003a58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8102 	beq.w	8003c88 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a84:	4b48      	ldr	r3, [pc, #288]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a8c:	2b18      	cmp	r3, #24
 8003a8e:	f000 80bd 	beq.w	8003c0c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	f040 809e 	bne.w	8003bd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b42      	ldr	r3, [pc, #264]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a41      	ldr	r2, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa8:	f7fe f816 	bl	8001ad8 <HAL_GetTick>
 8003aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab0:	f7fe f812 	bl	8001ad8 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e0e3      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ace:	4b36      	ldr	r3, [pc, #216]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad2:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <HAL_RCC_OscConfig+0x774>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	4931      	ldr	r1, [pc, #196]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	3b01      	subs	r3, #1
 8003aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af6:	3b01      	subs	r3, #1
 8003af8:	025b      	lsls	r3, r3, #9
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	3b01      	subs	r3, #1
 8003b04:	041b      	lsls	r3, r3, #16
 8003b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b10:	3b01      	subs	r3, #1
 8003b12:	061b      	lsls	r3, r3, #24
 8003b14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b18:	4923      	ldr	r1, [pc, #140]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b1e:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b2a:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <HAL_RCC_OscConfig+0x778>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b36:	00d2      	lsls	r2, r2, #3
 8003b38:	491b      	ldr	r1, [pc, #108]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b3e:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f023 020c 	bic.w	r2, r3, #12
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	4917      	ldr	r1, [pc, #92]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b50:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	f023 0202 	bic.w	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	4912      	ldr	r1, [pc, #72]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	4a10      	ldr	r2, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b6e:	4b0e      	ldr	r3, [pc, #56]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003b86:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9e:	f7fd ff9b 	bl	8001ad8 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ba4:	e011      	b.n	8003bca <HAL_RCC_OscConfig+0x78e>
 8003ba6:	bf00      	nop
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	58024800 	.word	0x58024800
 8003bb0:	fffffc0c 	.word	0xfffffc0c
 8003bb4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fd ff8e 	bl	8001ad8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e05f      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bca:	4b32      	ldr	r3, [pc, #200]	; (8003c94 <HAL_RCC_OscConfig+0x858>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x77c>
 8003bd6:	e057      	b.n	8003c88 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd8:	4b2e      	ldr	r3, [pc, #184]	; (8003c94 <HAL_RCC_OscConfig+0x858>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a2d      	ldr	r2, [pc, #180]	; (8003c94 <HAL_RCC_OscConfig+0x858>)
 8003bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fd ff78 	bl	8001ad8 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fd ff74 	bl	8001ad8 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e045      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bfe:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <HAL_RCC_OscConfig+0x858>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x7b0>
 8003c0a:	e03d      	b.n	8003c88 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCC_OscConfig+0x858>)
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_RCC_OscConfig+0x858>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d031      	beq.n	8003c84 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f003 0203 	and.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d12a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d122      	bne.n	8003c84 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d11a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	0a5b      	lsrs	r3, r3, #9
 8003c52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d111      	bne.n	8003c84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	0c1b      	lsrs	r3, r3, #16
 8003c64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d108      	bne.n	8003c84 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0e1b      	lsrs	r3, r3, #24
 8003c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3730      	adds	r7, #48	; 0x30
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400

08003c98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e19c      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b8a      	ldr	r3, [pc, #552]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d910      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b87      	ldr	r3, [pc, #540]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 020f 	bic.w	r2, r3, #15
 8003cc2:	4985      	ldr	r1, [pc, #532]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b83      	ldr	r3, [pc, #524]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e184      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d010      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	4b7b      	ldr	r3, [pc, #492]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d908      	bls.n	8003d0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cf8:	4b78      	ldr	r3, [pc, #480]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	4975      	ldr	r1, [pc, #468]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d010      	beq.n	8003d38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	4b70      	ldr	r3, [pc, #448]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d908      	bls.n	8003d38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d26:	4b6d      	ldr	r3, [pc, #436]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	496a      	ldr	r1, [pc, #424]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699a      	ldr	r2, [r3, #24]
 8003d48:	4b64      	ldr	r3, [pc, #400]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d908      	bls.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d54:	4b61      	ldr	r3, [pc, #388]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	495e      	ldr	r1, [pc, #376]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	4b59      	ldr	r3, [pc, #356]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d908      	bls.n	8003d94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d82:	4b56      	ldr	r3, [pc, #344]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	4953      	ldr	r1, [pc, #332]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	4b4d      	ldr	r3, [pc, #308]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f003 030f 	and.w	r3, r3, #15
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d908      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db0:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f023 020f 	bic.w	r2, r3, #15
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4947      	ldr	r1, [pc, #284]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d055      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003dce:	4b43      	ldr	r3, [pc, #268]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	4940      	ldr	r1, [pc, #256]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003de8:	4b3c      	ldr	r3, [pc, #240]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d121      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0f6      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b03      	cmp	r3, #3
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e00:	4b36      	ldr	r3, [pc, #216]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d115      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0ea      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e18:	4b30      	ldr	r3, [pc, #192]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0de      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e28:	4b2c      	ldr	r3, [pc, #176]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0d6      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e38:	4b28      	ldr	r3, [pc, #160]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f023 0207 	bic.w	r2, r3, #7
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4925      	ldr	r1, [pc, #148]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4a:	f7fd fe45 	bl	8001ad8 <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e52:	f7fd fe41 	bl	8001ad8 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0be      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e68:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d1eb      	bne.n	8003e52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d010      	beq.n	8003ea8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d208      	bcs.n	8003ea8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e96:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f023 020f 	bic.w	r2, r3, #15
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	490e      	ldr	r1, [pc, #56]	; (8003edc <HAL_RCC_ClockConfig+0x244>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 030f 	and.w	r3, r3, #15
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d214      	bcs.n	8003ee0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 020f 	bic.w	r2, r3, #15
 8003ebe:	4906      	ldr	r1, [pc, #24]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec6:	4b04      	ldr	r3, [pc, #16]	; (8003ed8 <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e086      	b.n	8003fe6 <HAL_RCC_ClockConfig+0x34e>
 8003ed8:	52002000 	.word	0x52002000
 8003edc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d010      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	4b3f      	ldr	r3, [pc, #252]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d208      	bcs.n	8003f0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003efc:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	4939      	ldr	r1, [pc, #228]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d010      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695a      	ldr	r2, [r3, #20]
 8003f1e:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d208      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f2a:	4b31      	ldr	r3, [pc, #196]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	492e      	ldr	r1, [pc, #184]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d208      	bcs.n	8003f6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f58:	4b25      	ldr	r3, [pc, #148]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	4922      	ldr	r1, [pc, #136]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d208      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f86:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	4917      	ldr	r1, [pc, #92]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f98:	f000 f834 	bl	8004004 <HAL_RCC_GetSysClockFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	4912      	ldr	r1, [pc, #72]	; (8003ff4 <HAL_RCC_ClockConfig+0x35c>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <HAL_RCC_ClockConfig+0x358>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	4a0d      	ldr	r2, [pc, #52]	; (8003ff4 <HAL_RCC_ClockConfig+0x35c>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	4a0a      	ldr	r2, [pc, #40]	; (8003ff8 <HAL_RCC_ClockConfig+0x360>)
 8003fce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fd0:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <HAL_RCC_ClockConfig+0x364>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <HAL_RCC_ClockConfig+0x368>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd fd32 	bl	8001a44 <HAL_InitTick>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	58024400 	.word	0x58024400
 8003ff4:	08005d3c 	.word	0x08005d3c
 8003ff8:	24000020 	.word	0x24000020
 8003ffc:	2400001c 	.word	0x2400001c
 8004000:	24000024 	.word	0x24000024

08004004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800400a:	4bb3      	ldr	r3, [pc, #716]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004012:	2b18      	cmp	r3, #24
 8004014:	f200 8155 	bhi.w	80042c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <HAL_RCC_GetSysClockFreq+0x1c>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004085 	.word	0x08004085
 8004024:	080042c3 	.word	0x080042c3
 8004028:	080042c3 	.word	0x080042c3
 800402c:	080042c3 	.word	0x080042c3
 8004030:	080042c3 	.word	0x080042c3
 8004034:	080042c3 	.word	0x080042c3
 8004038:	080042c3 	.word	0x080042c3
 800403c:	080042c3 	.word	0x080042c3
 8004040:	080040ab 	.word	0x080040ab
 8004044:	080042c3 	.word	0x080042c3
 8004048:	080042c3 	.word	0x080042c3
 800404c:	080042c3 	.word	0x080042c3
 8004050:	080042c3 	.word	0x080042c3
 8004054:	080042c3 	.word	0x080042c3
 8004058:	080042c3 	.word	0x080042c3
 800405c:	080042c3 	.word	0x080042c3
 8004060:	080040b1 	.word	0x080040b1
 8004064:	080042c3 	.word	0x080042c3
 8004068:	080042c3 	.word	0x080042c3
 800406c:	080042c3 	.word	0x080042c3
 8004070:	080042c3 	.word	0x080042c3
 8004074:	080042c3 	.word	0x080042c3
 8004078:	080042c3 	.word	0x080042c3
 800407c:	080042c3 	.word	0x080042c3
 8004080:	080040b7 	.word	0x080040b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004084:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004090:	4b91      	ldr	r3, [pc, #580]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	08db      	lsrs	r3, r3, #3
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	4a90      	ldr	r2, [pc, #576]	; (80042dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
 80040a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80040a2:	e111      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80040a4:	4b8d      	ldr	r3, [pc, #564]	; (80042dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040a6:	61bb      	str	r3, [r7, #24]
    break;
 80040a8:	e10e      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80040aa:	4b8d      	ldr	r3, [pc, #564]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040ac:	61bb      	str	r3, [r7, #24]
    break;
 80040ae:	e10b      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80040b0:	4b8c      	ldr	r3, [pc, #560]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80040b2:	61bb      	str	r3, [r7, #24]
    break;
 80040b4:	e108      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040b6:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80040c0:	4b85      	ldr	r3, [pc, #532]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040cc:	4b82      	ldr	r3, [pc, #520]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80040d6:	4b80      	ldr	r3, [pc, #512]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	08db      	lsrs	r3, r3, #3
 80040dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f000 80e1 	beq.w	80042bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	f000 8083 	beq.w	8004208 <HAL_RCC_GetSysClockFreq+0x204>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2b02      	cmp	r3, #2
 8004106:	f200 80a1 	bhi.w	800424c <HAL_RCC_GetSysClockFreq+0x248>
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_RCC_GetSysClockFreq+0x114>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d056      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004116:	e099      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004118:	4b6f      	ldr	r3, [pc, #444]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b00      	cmp	r3, #0
 8004122:	d02d      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004124:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	08db      	lsrs	r3, r3, #3
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	4a6b      	ldr	r2, [pc, #428]	; (80042dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
 8004134:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	ee07 3a90 	vmov	s15, r3
 800413c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800414e:	4b62      	ldr	r3, [pc, #392]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800415e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004162:	eddf 5a61 	vldr	s11, [pc, #388]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800416a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800416e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800417e:	e087      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800418a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80042ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800418e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004192:	4b51      	ldr	r3, [pc, #324]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800419a:	ee07 3a90 	vmov	s15, r3
 800419e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041c2:	e065      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d6:	4b40      	ldr	r3, [pc, #256]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004206:	e043      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eddf 6a38 	vldr	s13, [pc, #224]	; 80042f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421a:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800422a:	ed97 6a02 	vldr	s12, [r7, #8]
 800422e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800423a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800423e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800424a:	e021      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	eddf 6a26 	vldr	s13, [pc, #152]	; 80042f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800425a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425e:	4b1e      	ldr	r3, [pc, #120]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004272:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80042e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800427a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800428a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800428e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	0a5b      	lsrs	r3, r3, #9
 8004296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429a:	3301      	adds	r3, #1
 800429c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80042ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b4:	ee17 3a90 	vmov	r3, s15
 80042b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80042ba:	e005      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	61bb      	str	r3, [r7, #24]
    break;
 80042c0:	e002      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80042c2:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042c4:	61bb      	str	r3, [r7, #24]
    break;
 80042c6:	bf00      	nop
  }

  return sysclockfreq;
 80042c8:	69bb      	ldr	r3, [r7, #24]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	58024400 	.word	0x58024400
 80042dc:	03d09000 	.word	0x03d09000
 80042e0:	003d0900 	.word	0x003d0900
 80042e4:	017d7840 	.word	0x017d7840
 80042e8:	46000000 	.word	0x46000000
 80042ec:	4c742400 	.word	0x4c742400
 80042f0:	4a742400 	.word	0x4a742400
 80042f4:	4bbebc20 	.word	0x4bbebc20

080042f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004300:	2300      	movs	r3, #0
 8004302:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004304:	2300      	movs	r3, #0
 8004306:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d03f      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800431c:	d02a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800431e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004322:	d824      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004324:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004328:	d018      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800432a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800432e:	d81e      	bhi.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004338:	d007      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800433a:	e018      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800433c:	4ba3      	ldr	r3, [pc, #652]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4aa2      	ldr	r2, [pc, #648]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004348:	e015      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3304      	adds	r3, #4
 800434e:	2102      	movs	r1, #2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 ff17 	bl	8005184 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800435a:	e00c      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3324      	adds	r3, #36	; 0x24
 8004360:	2102      	movs	r1, #2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 ffc0 	bl	80052e8 <RCCEx_PLL3_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800436c:	e003      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	75fb      	strb	r3, [r7, #23]
      break;
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800437c:	4b93      	ldr	r3, [pc, #588]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800437e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004380:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004388:	4990      	ldr	r1, [pc, #576]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	650b      	str	r3, [r1, #80]	; 0x50
 800438e:	e001      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439c:	2b00      	cmp	r3, #0
 800439e:	d03d      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d826      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043a8:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	080043c5 	.word	0x080043c5
 80043b4:	080043d3 	.word	0x080043d3
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043fd 	.word	0x080043fd
 80043c0:	080043fd 	.word	0x080043fd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c4:	4b81      	ldr	r3, [pc, #516]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	4a80      	ldr	r2, [pc, #512]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043d0:	e015      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fed3 	bl	8005184 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043e2:	e00c      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3324      	adds	r3, #36	; 0x24
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 ff7c 	bl	80052e8 <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043f4:	e003      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
      break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80043fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004404:	4b71      	ldr	r3, [pc, #452]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004408:	f023 0207 	bic.w	r2, r3, #7
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	496e      	ldr	r1, [pc, #440]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	650b      	str	r3, [r1, #80]	; 0x50
 8004416:	e001      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004424:	2b00      	cmp	r3, #0
 8004426:	d042      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004430:	d02b      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004436:	d825      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004438:	2bc0      	cmp	r3, #192	; 0xc0
 800443a:	d028      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800443c:	2bc0      	cmp	r3, #192	; 0xc0
 800443e:	d821      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d016      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d81d      	bhi.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d007      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004450:	e018      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004452:	4b5e      	ldr	r3, [pc, #376]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4a5d      	ldr	r2, [pc, #372]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800445e:	e017      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	2100      	movs	r1, #0
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fe8c 	bl	8005184 <RCCEx_PLL2_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004470:	e00e      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3324      	adds	r3, #36	; 0x24
 8004476:	2100      	movs	r1, #0
 8004478:	4618      	mov	r0, r3
 800447a:	f000 ff35 	bl	80052e8 <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004482:	e005      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
      break;
 8004488:	e002      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800448a:	bf00      	nop
 800448c:	e000      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800448e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004496:	4b4d      	ldr	r3, [pc, #308]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800449a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	494a      	ldr	r1, [pc, #296]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	650b      	str	r3, [r1, #80]	; 0x50
 80044a8:	e001      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d049      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044c4:	d030      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80044c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044ca:	d82a      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044d0:	d02c      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80044d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80044d6:	d824      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044dc:	d018      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80044de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e2:	d81e      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d003      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80044e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044ec:	d007      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x206>
 80044ee:	e018      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044f0:	4b36      	ldr	r3, [pc, #216]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	4a35      	ldr	r2, [pc, #212]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044fc:	e017      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3304      	adds	r3, #4
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fe3d 	bl	8005184 <RCCEx_PLL2_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800450e:	e00e      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3324      	adds	r3, #36	; 0x24
 8004514:	2100      	movs	r1, #0
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fee6 	bl	80052e8 <RCCEx_PLL3_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004520:	e005      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
      break;
 8004526:	e002      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004528:	bf00      	nop
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800452c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10a      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004534:	4b25      	ldr	r3, [pc, #148]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004538:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004542:	4922      	ldr	r1, [pc, #136]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004544:	4313      	orrs	r3, r2
 8004546:	658b      	str	r3, [r1, #88]	; 0x58
 8004548:	e001      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	7dfb      	ldrb	r3, [r7, #23]
 800454c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004556:	2b00      	cmp	r3, #0
 8004558:	d04b      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004560:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004564:	d030      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004566:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800456a:	d82a      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800456c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004570:	d02e      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004572:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004576:	d824      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004578:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800457c:	d018      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800457e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004582:	d81e      	bhi.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800458c:	d007      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800458e:	e018      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004590:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	4a0d      	ldr	r2, [pc, #52]	; (80045cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800459a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800459c:	e019      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fded 	bl	8005184 <RCCEx_PLL2_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045ae:	e010      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3324      	adds	r3, #36	; 0x24
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fe96 	bl	80052e8 <RCCEx_PLL3_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045c0:	e007      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
      break;
 80045c6:	e004      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80045c8:	bf00      	nop
 80045ca:	e002      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80045cc:	58024400 	.word	0x58024400
      break;
 80045d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80045d8:	4b99      	ldr	r3, [pc, #612]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045e6:	4996      	ldr	r1, [pc, #600]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	658b      	str	r3, [r1, #88]	; 0x58
 80045ec:	e001      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	7dfb      	ldrb	r3, [r7, #23]
 80045f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d032      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004602:	2b30      	cmp	r3, #48	; 0x30
 8004604:	d01c      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004606:	2b30      	cmp	r3, #48	; 0x30
 8004608:	d817      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800460a:	2b20      	cmp	r3, #32
 800460c:	d00c      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800460e:	2b20      	cmp	r3, #32
 8004610:	d813      	bhi.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d016      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004616:	2b10      	cmp	r3, #16
 8004618:	d10f      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461a:	4b89      	ldr	r3, [pc, #548]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	4a88      	ldr	r2, [pc, #544]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004624:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004626:	e00e      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	2102      	movs	r1, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fda8 	bl	8005184 <RCCEx_PLL2_Config>
 8004634:	4603      	mov	r3, r0
 8004636:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004638:	e005      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
      break;
 800463e:	e002      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004646:	7dfb      	ldrb	r3, [r7, #23]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800464c:	4b7c      	ldr	r3, [pc, #496]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800464e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004658:	4979      	ldr	r1, [pc, #484]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800465a:	4313      	orrs	r3, r2
 800465c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800465e:	e001      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d047      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004678:	d030      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800467a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467e:	d82a      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004680:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004684:	d02c      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800468a:	d824      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800468c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004690:	d018      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	d81e      	bhi.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800469c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a0:	d007      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80046a2:	e018      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a4:	4b66      	ldr	r3, [pc, #408]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	4a65      	ldr	r2, [pc, #404]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046b0:	e017      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fd63 	bl	8005184 <RCCEx_PLL2_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046c2:	e00e      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3324      	adds	r3, #36	; 0x24
 80046c8:	2100      	movs	r1, #0
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fe0c 	bl	80052e8 <RCCEx_PLL3_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80046d4:	e005      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
      break;
 80046da:	e002      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80046dc:	bf00      	nop
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80046e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80046e8:	4b55      	ldr	r3, [pc, #340]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	4952      	ldr	r1, [pc, #328]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	650b      	str	r3, [r1, #80]	; 0x50
 80046fa:	e001      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
 80046fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d049      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004714:	d02e      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800471a:	d828      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800471c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004720:	d02a      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004722:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004726:	d822      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004728:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800472c:	d026      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800472e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004732:	d81c      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004734:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004738:	d010      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800473a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800473e:	d816      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01d      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d111      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fd17 	bl	8005184 <RCCEx_PLL2_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800475a:	e012      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3324      	adds	r3, #36	; 0x24
 8004760:	2101      	movs	r1, #1
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fdc0 	bl	80052e8 <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800476c:	e009      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
      break;
 8004772:	e006      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004774:	bf00      	nop
 8004776:	e004      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004778:	bf00      	nop
 800477a:	e002      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800477c:	bf00      	nop
 800477e:	e000      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004794:	492a      	ldr	r1, [pc, #168]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004796:	4313      	orrs	r3, r2
 8004798:	650b      	str	r3, [r1, #80]	; 0x50
 800479a:	e001      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d04d      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047b6:	d02e      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80047b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047bc:	d828      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c2:	d02a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d822      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80047ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047ce:	d026      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80047d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80047d4:	d81c      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80047d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047da:	d010      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80047dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e0:	d816      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01d      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80047e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ea:	d111      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	2101      	movs	r1, #1
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fcc6 	bl	8005184 <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80047fc:	e012      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3324      	adds	r3, #36	; 0x24
 8004802:	2101      	movs	r1, #1
 8004804:	4618      	mov	r0, r3
 8004806:	f000 fd6f 	bl	80052e8 <RCCEx_PLL3_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800480e:	e009      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
      break;
 8004814:	e006      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004816:	bf00      	nop
 8004818:	e004      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800481a:	bf00      	nop
 800481c:	e002      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10c      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004838:	4901      	ldr	r1, [pc, #4]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800483a:	4313      	orrs	r3, r2
 800483c:	658b      	str	r3, [r1, #88]	; 0x58
 800483e:	e003      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02f      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800485c:	d00e      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800485e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004862:	d814      	bhi.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d015      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800486c:	d10f      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800486e:	4baf      	ldr	r3, [pc, #700]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	4aae      	ldr	r2, [pc, #696]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800487a:	e00c      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f000 fc7e 	bl	8005184 <RCCEx_PLL2_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800488c:	e003      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	75fb      	strb	r3, [r7, #23]
      break;
 8004892:	e000      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004896:	7dfb      	ldrb	r3, [r7, #23]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800489c:	4ba3      	ldr	r3, [pc, #652]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800489e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a8:	49a0      	ldr	r1, [pc, #640]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	650b      	str	r3, [r1, #80]	; 0x50
 80048ae:	e001      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	7dfb      	ldrb	r3, [r7, #23]
 80048b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d032      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d81b      	bhi.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80048c8:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80048ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ce:	bf00      	nop
 80048d0:	08004907 	.word	0x08004907
 80048d4:	080048e1 	.word	0x080048e1
 80048d8:	080048ef 	.word	0x080048ef
 80048dc:	08004907 	.word	0x08004907
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e0:	4b92      	ldr	r3, [pc, #584]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a91      	ldr	r2, [pc, #580]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048ec:	e00c      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	2102      	movs	r1, #2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fc45 	bl	8005184 <RCCEx_PLL2_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
      break;
 8004904:	e000      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004908:	7dfb      	ldrb	r3, [r7, #23]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800490e:	4b87      	ldr	r3, [pc, #540]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	f023 0203 	bic.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	4984      	ldr	r1, [pc, #528]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800491c:	4313      	orrs	r3, r2
 800491e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004920:	e001      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
 8004924:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8086 	beq.w	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004934:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a7d      	ldr	r2, [pc, #500]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800493a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004940:	f7fd f8ca 	bl	8001ad8 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004946:	e009      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004948:	f7fd f8c6 	bl	8001ad8 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	; 0x64
 8004954:	d902      	bls.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	75fb      	strb	r3, [r7, #23]
        break;
 800495a:	e005      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800495c:	4b74      	ldr	r3, [pc, #464]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ef      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d166      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800496e:	4b6f      	ldr	r3, [pc, #444]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004970:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004978:	4053      	eors	r3, r2
 800497a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497e:	2b00      	cmp	r3, #0
 8004980:	d013      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004982:	4b6a      	ldr	r3, [pc, #424]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800498c:	4b67      	ldr	r3, [pc, #412]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4a66      	ldr	r2, [pc, #408]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004996:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004998:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	4a63      	ldr	r2, [pc, #396]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800499e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049a4:	4a61      	ldr	r2, [pc, #388]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b4:	d115      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b6:	f7fd f88f 	bl	8001ad8 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049bc:	e00b      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fd f88b 	bl	8001ad8 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d902      	bls.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	75fb      	strb	r3, [r7, #23]
            break;
 80049d4:	e005      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d6:	4b55      	ldr	r3, [pc, #340]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ed      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d126      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049f6:	d10d      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80049f8:	4b4c      	ldr	r3, [pc, #304]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a06:	0919      	lsrs	r1, r3, #4
 8004a08:	4b4a      	ldr	r3, [pc, #296]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004a0a:	400b      	ands	r3, r1
 8004a0c:	4947      	ldr	r1, [pc, #284]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	610b      	str	r3, [r1, #16]
 8004a12:	e005      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004a14:	4b45      	ldr	r3, [pc, #276]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	4a44      	ldr	r2, [pc, #272]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004a1e:	6113      	str	r3, [r2, #16]
 8004a20:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a2e:	493f      	ldr	r1, [pc, #252]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	670b      	str	r3, [r1, #112]	; 0x70
 8004a34:	e004      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	75bb      	strb	r3, [r7, #22]
 8004a3a:	e001      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8085 	beq.w	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a52:	2b28      	cmp	r3, #40	; 0x28
 8004a54:	d866      	bhi.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004b39 	.word	0x08004b39
 8004a60:	08004b25 	.word	0x08004b25
 8004a64:	08004b25 	.word	0x08004b25
 8004a68:	08004b25 	.word	0x08004b25
 8004a6c:	08004b25 	.word	0x08004b25
 8004a70:	08004b25 	.word	0x08004b25
 8004a74:	08004b25 	.word	0x08004b25
 8004a78:	08004b25 	.word	0x08004b25
 8004a7c:	08004b01 	.word	0x08004b01
 8004a80:	08004b25 	.word	0x08004b25
 8004a84:	08004b25 	.word	0x08004b25
 8004a88:	08004b25 	.word	0x08004b25
 8004a8c:	08004b25 	.word	0x08004b25
 8004a90:	08004b25 	.word	0x08004b25
 8004a94:	08004b25 	.word	0x08004b25
 8004a98:	08004b25 	.word	0x08004b25
 8004a9c:	08004b13 	.word	0x08004b13
 8004aa0:	08004b25 	.word	0x08004b25
 8004aa4:	08004b25 	.word	0x08004b25
 8004aa8:	08004b25 	.word	0x08004b25
 8004aac:	08004b25 	.word	0x08004b25
 8004ab0:	08004b25 	.word	0x08004b25
 8004ab4:	08004b25 	.word	0x08004b25
 8004ab8:	08004b25 	.word	0x08004b25
 8004abc:	08004b39 	.word	0x08004b39
 8004ac0:	08004b25 	.word	0x08004b25
 8004ac4:	08004b25 	.word	0x08004b25
 8004ac8:	08004b25 	.word	0x08004b25
 8004acc:	08004b25 	.word	0x08004b25
 8004ad0:	08004b25 	.word	0x08004b25
 8004ad4:	08004b25 	.word	0x08004b25
 8004ad8:	08004b25 	.word	0x08004b25
 8004adc:	08004b39 	.word	0x08004b39
 8004ae0:	08004b25 	.word	0x08004b25
 8004ae4:	08004b25 	.word	0x08004b25
 8004ae8:	08004b25 	.word	0x08004b25
 8004aec:	08004b25 	.word	0x08004b25
 8004af0:	08004b25 	.word	0x08004b25
 8004af4:	08004b25 	.word	0x08004b25
 8004af8:	08004b25 	.word	0x08004b25
 8004afc:	08004b39 	.word	0x08004b39
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fb3c 	bl	8005184 <RCCEx_PLL2_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b10:	e013      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	3324      	adds	r3, #36	; 0x24
 8004b16:	2101      	movs	r1, #1
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fbe5 	bl	80052e8 <RCCEx_PLL3_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b22:	e00a      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
      break;
 8004b28:	e007      	b.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b2a:	bf00      	nop
 8004b2c:	58024400 	.word	0x58024400
 8004b30:	58024800 	.word	0x58024800
 8004b34:	00ffffcf 	.word	0x00ffffcf
      break;
 8004b38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b40:	4b96      	ldr	r3, [pc, #600]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b44:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b4c:	4993      	ldr	r1, [pc, #588]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	654b      	str	r3, [r1, #84]	; 0x54
 8004b52:	e001      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d038      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b68:	2b05      	cmp	r3, #5
 8004b6a:	d821      	bhi.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004b6c:	a201      	add	r2, pc, #4	; (adr r2, 8004b74 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b72:	bf00      	nop
 8004b74:	08004bb7 	.word	0x08004bb7
 8004b78:	08004b8d 	.word	0x08004b8d
 8004b7c:	08004b9f 	.word	0x08004b9f
 8004b80:	08004bb7 	.word	0x08004bb7
 8004b84:	08004bb7 	.word	0x08004bb7
 8004b88:	08004bb7 	.word	0x08004bb7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 faf6 	bl	8005184 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004b9c:	e00c      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3324      	adds	r3, #36	; 0x24
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 fb9f 	bl	80052e8 <RCCEx_PLL3_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004bae:	e003      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb4:	e000      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d109      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004bbe:	4b77      	ldr	r3, [pc, #476]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc2:	f023 0207 	bic.w	r2, r3, #7
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bca:	4974      	ldr	r1, [pc, #464]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	654b      	str	r3, [r1, #84]	; 0x54
 8004bd0:	e001      	b.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
 8004bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0304 	and.w	r3, r3, #4
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d03a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	2b05      	cmp	r3, #5
 8004bea:	d821      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004bec:	a201      	add	r2, pc, #4	; (adr r2, 8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf2:	bf00      	nop
 8004bf4:	08004c37 	.word	0x08004c37
 8004bf8:	08004c0d 	.word	0x08004c0d
 8004bfc:	08004c1f 	.word	0x08004c1f
 8004c00:	08004c37 	.word	0x08004c37
 8004c04:	08004c37 	.word	0x08004c37
 8004c08:	08004c37 	.word	0x08004c37
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	2101      	movs	r1, #1
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 fab6 	bl	8005184 <RCCEx_PLL2_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c1c:	e00c      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3324      	adds	r3, #36	; 0x24
 8004c22:	2101      	movs	r1, #1
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fb5f 	bl	80052e8 <RCCEx_PLL3_Config>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004c2e:	e003      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	75fb      	strb	r3, [r7, #23]
      break;
 8004c34:	e000      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c38:	7dfb      	ldrb	r3, [r7, #23]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c3e:	4b57      	ldr	r3, [pc, #348]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c42:	f023 0207 	bic.w	r2, r3, #7
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4c:	4953      	ldr	r1, [pc, #332]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	658b      	str	r3, [r1, #88]	; 0x58
 8004c52:	e001      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
 8004c56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d04b      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c6e:	d02e      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c74:	d828      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7a:	d02a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d822      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c86:	d026      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004c88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c8c:	d81c      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c92:	d010      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c98:	d816      	bhi.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d01d      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ca2:	d111      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	2100      	movs	r1, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa6a 	bl	8005184 <RCCEx_PLL2_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004cb4:	e012      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3324      	adds	r3, #36	; 0x24
 8004cba:	2102      	movs	r1, #2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fb13 	bl	80052e8 <RCCEx_PLL3_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004cc6:	e009      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	75fb      	strb	r3, [r7, #23]
      break;
 8004ccc:	e006      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004cce:	bf00      	nop
 8004cd0:	e004      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004cd2:	bf00      	nop
 8004cd4:	e002      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e000      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ce2:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf0:	492a      	ldr	r1, [pc, #168]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	654b      	str	r3, [r1, #84]	; 0x54
 8004cf6:	e001      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
 8004cfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d04d      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d12:	d02e      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004d14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d18:	d828      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d1e:	d02a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	d822      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d2a:	d026      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004d2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d30:	d81c      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d36:	d010      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d3c:	d816      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01d      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d46:	d111      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fa18 	bl	8005184 <RCCEx_PLL2_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d58:	e012      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3324      	adds	r3, #36	; 0x24
 8004d5e:	2102      	movs	r1, #2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f000 fac1 	bl	80052e8 <RCCEx_PLL3_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004d6a:	e009      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d70:	e006      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d72:	bf00      	nop
 8004d74:	e004      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d94:	4901      	ldr	r1, [pc, #4]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	658b      	str	r3, [r1, #88]	; 0x58
 8004d9a:	e003      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004d9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
 8004da2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d04b      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dba:	d02e      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004dbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004dc0:	d828      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc6:	d02a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dcc:	d822      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004dce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dd2:	d026      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004dd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004dd8:	d81c      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dde:	d010      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de4:	d816      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01d      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dee:	d111      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	3304      	adds	r3, #4
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f9c4 	bl	8005184 <RCCEx_PLL2_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e00:	e012      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3324      	adds	r3, #36	; 0x24
 8004e06:	2102      	movs	r1, #2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fa6d 	bl	80052e8 <RCCEx_PLL3_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e12:	e009      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	75fb      	strb	r3, [r7, #23]
      break;
 8004e18:	e006      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e1a:	bf00      	nop
 8004e1c:	e004      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e002      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e22:	bf00      	nop
 8004e24:	e000      	b.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004e2e:	4b9d      	ldr	r3, [pc, #628]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3c:	4999      	ldr	r1, [pc, #612]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	658b      	str	r3, [r1, #88]	; 0x58
 8004e42:	e001      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	7dfb      	ldrb	r3, [r7, #23]
 8004e46:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01a      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	d10a      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3324      	adds	r3, #36	; 0x24
 8004e64:	2102      	movs	r1, #2
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fa3e 	bl	80052e8 <RCCEx_PLL3_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004e76:	4b8b      	ldr	r3, [pc, #556]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e84:	4987      	ldr	r1, [pc, #540]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ea0:	d10a      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3324      	adds	r3, #36	; 0x24
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fa1d 	bl	80052e8 <RCCEx_PLL3_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eb8:	4b7a      	ldr	r3, [pc, #488]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec6:	4977      	ldr	r1, [pc, #476]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d034      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ede:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee2:	d01d      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee8:	d817      	bhi.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef2:	d009      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004ef4:	e011      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	3304      	adds	r3, #4
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 f941 	bl	8005184 <RCCEx_PLL2_Config>
 8004f02:	4603      	mov	r3, r0
 8004f04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f06:	e00c      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3324      	adds	r3, #36	; 0x24
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f9ea 	bl	80052e8 <RCCEx_PLL3_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f18:	e003      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f1e:	e000      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f28:	4b5e      	ldr	r3, [pc, #376]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f36:	495b      	ldr	r1, [pc, #364]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	658b      	str	r3, [r1, #88]	; 0x58
 8004f3c:	e001      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d033      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f58:	d01c      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004f5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f5e:	d816      	bhi.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f64:	d003      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f6a:	d007      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004f6c:	e00f      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f6e:	4b4d      	ldr	r3, [pc, #308]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	4a4c      	ldr	r2, [pc, #304]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f7a:	e00c      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3324      	adds	r3, #36	; 0x24
 8004f80:	2101      	movs	r1, #1
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f9b0 	bl	80052e8 <RCCEx_PLL3_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004f8c:	e003      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	75fb      	strb	r3, [r7, #23]
      break;
 8004f92:	e000      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f9c:	4b41      	ldr	r3, [pc, #260]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004faa:	493e      	ldr	r1, [pc, #248]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	654b      	str	r3, [r1, #84]	; 0x54
 8004fb0:	e001      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb2:	7dfb      	ldrb	r3, [r7, #23]
 8004fb4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d029      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fce:	d007      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004fd0:	e00f      	b.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd2:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	4a33      	ldr	r2, [pc, #204]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004fde:	e00b      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 f8cc 	bl	8005184 <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ff0:	e002      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ffe:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005002:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500a:	4926      	ldr	r1, [pc, #152]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800500c:	4313      	orrs	r3, r2
 800500e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005010:	e001      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005012:	7dfb      	ldrb	r3, [r7, #23]
 8005014:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	3324      	adds	r3, #36	; 0x24
 8005026:	2102      	movs	r1, #2
 8005028:	4618      	mov	r0, r3
 800502a:	f000 f95d 	bl	80052e8 <RCCEx_PLL3_Config>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d033      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800504c:	d017      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800504e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005052:	d811      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005058:	d013      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800505a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800505e:	d80b      	bhi.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005060:	2b00      	cmp	r3, #0
 8005062:	d010      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005068:	d106      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506e:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005076:	e007      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	e004      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800507e:	bf00      	nop
 8005080:	e002      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005082:	bf00      	nop
 8005084:	e000      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005088:	7dfb      	ldrb	r3, [r7, #23]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10c      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800508e:	4b05      	ldr	r3, [pc, #20]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005092:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800509a:	4902      	ldr	r1, [pc, #8]	; (80050a4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800509c:	4313      	orrs	r3, r2
 800509e:	654b      	str	r3, [r1, #84]	; 0x54
 80050a0:	e004      	b.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80050a2:	bf00      	nop
 80050a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
 80050aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050b8:	4b31      	ldr	r3, [pc, #196]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	492e      	ldr	r1, [pc, #184]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80050d6:	4b2a      	ldr	r3, [pc, #168]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050e4:	4926      	ldr	r1, [pc, #152]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d008      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050f6:	4b22      	ldr	r3, [pc, #136]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80050f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005102:	491f      	ldr	r1, [pc, #124]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005104:	4313      	orrs	r3, r2
 8005106:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800511a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800511e:	6113      	str	r3, [r2, #16]
 8005120:	4b17      	ldr	r3, [pc, #92]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800512a:	4915      	ldr	r1, [pc, #84]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800512c:	4313      	orrs	r3, r2
 800512e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	da08      	bge.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800513a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	490e      	ldr	r1, [pc, #56]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005146:	4313      	orrs	r3, r2
 8005148:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d009      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005156:	4b0a      	ldr	r3, [pc, #40]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	4906      	ldr	r1, [pc, #24]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005166:	4313      	orrs	r3, r2
 8005168:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800516a:	7dbb      	ldrb	r3, [r7, #22]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	e000      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	58024400 	.word	0x58024400

08005184 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005192:	4b53      	ldr	r3, [pc, #332]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	2b03      	cmp	r3, #3
 800519c:	d101      	bne.n	80051a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e099      	b.n	80052d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80051a2:	4b4f      	ldr	r3, [pc, #316]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a4e      	ldr	r2, [pc, #312]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 80051a8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ae:	f7fc fc93 	bl	8001ad8 <HAL_GetTick>
 80051b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051b4:	e008      	b.n	80051c8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051b6:	f7fc fc8f 	bl	8001ad8 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e086      	b.n	80052d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051c8:	4b45      	ldr	r3, [pc, #276]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f0      	bne.n	80051b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051d4:	4b42      	ldr	r3, [pc, #264]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	031b      	lsls	r3, r3, #12
 80051e2:	493f      	ldr	r1, [pc, #252]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	628b      	str	r3, [r1, #40]	; 0x28
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	025b      	lsls	r3, r3, #9
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	3b01      	subs	r3, #1
 8005204:	041b      	lsls	r3, r3, #16
 8005206:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	3b01      	subs	r3, #1
 8005212:	061b      	lsls	r3, r3, #24
 8005214:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005218:	4931      	ldr	r1, [pc, #196]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 800521a:	4313      	orrs	r3, r2
 800521c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800521e:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005222:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	492d      	ldr	r1, [pc, #180]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 800522c:	4313      	orrs	r3, r2
 800522e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005230:	4b2b      	ldr	r3, [pc, #172]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	f023 0220 	bic.w	r2, r3, #32
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	4928      	ldr	r1, [pc, #160]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 800523e:	4313      	orrs	r3, r2
 8005240:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005242:	4b27      	ldr	r3, [pc, #156]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005248:	f023 0310 	bic.w	r3, r3, #16
 800524c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800524e:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005252:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <RCCEx_PLL2_Config+0x160>)
 8005254:	4013      	ands	r3, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	69d2      	ldr	r2, [r2, #28]
 800525a:	00d2      	lsls	r2, r2, #3
 800525c:	4920      	ldr	r1, [pc, #128]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 800525e:	4313      	orrs	r3, r2
 8005260:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005262:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005266:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005268:	f043 0310 	orr.w	r3, r3, #16
 800526c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d106      	bne.n	8005282 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005274:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	4a19      	ldr	r2, [pc, #100]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 800527a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800527e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005280:	e00f      	b.n	80052a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d106      	bne.n	8005296 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005288:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	4a14      	ldr	r2, [pc, #80]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 800528e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005292:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005294:	e005      	b.n	80052a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005296:	4b12      	ldr	r3, [pc, #72]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	4a11      	ldr	r2, [pc, #68]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 800529c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80052a2:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 80052a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ae:	f7fc fc13 	bl	8001ad8 <HAL_GetTick>
 80052b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052b4:	e008      	b.n	80052c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80052b6:	f7fc fc0f 	bl	8001ad8 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e006      	b.n	80052d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80052c8:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <RCCEx_PLL2_Config+0x15c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	58024400 	.word	0x58024400
 80052e4:	ffff0007 	.word	0xffff0007

080052e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052f6:	4b53      	ldr	r3, [pc, #332]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d101      	bne.n	8005306 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e099      	b.n	800543a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005306:	4b4f      	ldr	r3, [pc, #316]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a4e      	ldr	r2, [pc, #312]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 800530c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005312:	f7fc fbe1 	bl	8001ad8 <HAL_GetTick>
 8005316:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005318:	e008      	b.n	800532c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800531a:	f7fc fbdd 	bl	8001ad8 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e086      	b.n	800543a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800532c:	4b45      	ldr	r3, [pc, #276]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f0      	bne.n	800531a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005338:	4b42      	ldr	r3, [pc, #264]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	051b      	lsls	r3, r3, #20
 8005346:	493f      	ldr	r1, [pc, #252]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 8005348:	4313      	orrs	r3, r2
 800534a:	628b      	str	r3, [r1, #40]	; 0x28
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	3b01      	subs	r3, #1
 8005352:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	3b01      	subs	r3, #1
 800535c:	025b      	lsls	r3, r3, #9
 800535e:	b29b      	uxth	r3, r3
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	3b01      	subs	r3, #1
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	3b01      	subs	r3, #1
 8005376:	061b      	lsls	r3, r3, #24
 8005378:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800537c:	4931      	ldr	r1, [pc, #196]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 800537e:	4313      	orrs	r3, r2
 8005380:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005382:	4b30      	ldr	r3, [pc, #192]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005386:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	492d      	ldr	r1, [pc, #180]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 8005390:	4313      	orrs	r3, r2
 8005392:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	4928      	ldr	r1, [pc, #160]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80053a6:	4b27      	ldr	r3, [pc, #156]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	4a26      	ldr	r2, [pc, #152]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80053b2:	4b24      	ldr	r3, [pc, #144]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b6:	4b24      	ldr	r3, [pc, #144]	; (8005448 <RCCEx_PLL3_Config+0x160>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	69d2      	ldr	r2, [r2, #28]
 80053be:	00d2      	lsls	r2, r2, #3
 80053c0:	4920      	ldr	r1, [pc, #128]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80053c6:	4b1f      	ldr	r3, [pc, #124]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d106      	bne.n	80053e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053d8:	4b1a      	ldr	r3, [pc, #104]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053dc:	4a19      	ldr	r2, [pc, #100]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053e4:	e00f      	b.n	8005406 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d106      	bne.n	80053fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053ec:	4b15      	ldr	r3, [pc, #84]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053f8:	e005      	b.n	8005406 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	4a11      	ldr	r2, [pc, #68]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 8005400:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005404:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005406:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 800540c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005412:	f7fc fb61 	bl	8001ad8 <HAL_GetTick>
 8005416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005418:	e008      	b.n	800542c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800541a:	f7fc fb5d 	bl	8001ad8 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e006      	b.n	800543a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <RCCEx_PLL3_Config+0x15c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	58024400 	.word	0x58024400
 8005448:	ffff0007 	.word	0xffff0007

0800544c <__errno>:
 800544c:	4b01      	ldr	r3, [pc, #4]	; (8005454 <__errno+0x8>)
 800544e:	6818      	ldr	r0, [r3, #0]
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	2400002c 	.word	0x2400002c

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4d0d      	ldr	r5, [pc, #52]	; (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	; (8005494 <__libc_init_array+0x3c>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2600      	movs	r6, #0
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4d0b      	ldr	r5, [pc, #44]	; (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	; (800549c <__libc_init_array+0x44>)
 800546c:	f000 fc34 	bl	8005cd8 <_init>
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2600      	movs	r6, #0
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	08007618 	.word	0x08007618
 8005494:	08007618 	.word	0x08007618
 8005498:	08007618 	.word	0x08007618
 800549c:	0800761c 	.word	0x0800761c

080054a0 <malloc>:
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <malloc+0xc>)
 80054a2:	4601      	mov	r1, r0
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	f000 b88d 	b.w	80055c4 <_malloc_r>
 80054aa:	bf00      	nop
 80054ac:	2400002c 	.word	0x2400002c

080054b0 <free>:
 80054b0:	4b02      	ldr	r3, [pc, #8]	; (80054bc <free+0xc>)
 80054b2:	4601      	mov	r1, r0
 80054b4:	6818      	ldr	r0, [r3, #0]
 80054b6:	f000 b819 	b.w	80054ec <_free_r>
 80054ba:	bf00      	nop
 80054bc:	2400002c 	.word	0x2400002c

080054c0 <memcpy>:
 80054c0:	440a      	add	r2, r1
 80054c2:	4291      	cmp	r1, r2
 80054c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80054c8:	d100      	bne.n	80054cc <memcpy+0xc>
 80054ca:	4770      	bx	lr
 80054cc:	b510      	push	{r4, lr}
 80054ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054d6:	4291      	cmp	r1, r2
 80054d8:	d1f9      	bne.n	80054ce <memcpy+0xe>
 80054da:	bd10      	pop	{r4, pc}

080054dc <memset>:
 80054dc:	4402      	add	r2, r0
 80054de:	4603      	mov	r3, r0
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d100      	bne.n	80054e6 <memset+0xa>
 80054e4:	4770      	bx	lr
 80054e6:	f803 1b01 	strb.w	r1, [r3], #1
 80054ea:	e7f9      	b.n	80054e0 <memset+0x4>

080054ec <_free_r>:
 80054ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d044      	beq.n	800557c <_free_r+0x90>
 80054f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f6:	9001      	str	r0, [sp, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f1a1 0404 	sub.w	r4, r1, #4
 80054fe:	bfb8      	it	lt
 8005500:	18e4      	addlt	r4, r4, r3
 8005502:	f000 f8e3 	bl	80056cc <__malloc_lock>
 8005506:	4a1e      	ldr	r2, [pc, #120]	; (8005580 <_free_r+0x94>)
 8005508:	9801      	ldr	r0, [sp, #4]
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	b933      	cbnz	r3, 800551c <_free_r+0x30>
 800550e:	6063      	str	r3, [r4, #4]
 8005510:	6014      	str	r4, [r2, #0]
 8005512:	b003      	add	sp, #12
 8005514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005518:	f000 b8de 	b.w	80056d8 <__malloc_unlock>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d908      	bls.n	8005532 <_free_r+0x46>
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	1961      	adds	r1, r4, r5
 8005524:	428b      	cmp	r3, r1
 8005526:	bf01      	itttt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	1949      	addeq	r1, r1, r5
 800552e:	6021      	streq	r1, [r4, #0]
 8005530:	e7ed      	b.n	800550e <_free_r+0x22>
 8005532:	461a      	mov	r2, r3
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	b10b      	cbz	r3, 800553c <_free_r+0x50>
 8005538:	42a3      	cmp	r3, r4
 800553a:	d9fa      	bls.n	8005532 <_free_r+0x46>
 800553c:	6811      	ldr	r1, [r2, #0]
 800553e:	1855      	adds	r5, r2, r1
 8005540:	42a5      	cmp	r5, r4
 8005542:	d10b      	bne.n	800555c <_free_r+0x70>
 8005544:	6824      	ldr	r4, [r4, #0]
 8005546:	4421      	add	r1, r4
 8005548:	1854      	adds	r4, r2, r1
 800554a:	42a3      	cmp	r3, r4
 800554c:	6011      	str	r1, [r2, #0]
 800554e:	d1e0      	bne.n	8005512 <_free_r+0x26>
 8005550:	681c      	ldr	r4, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	6053      	str	r3, [r2, #4]
 8005556:	4421      	add	r1, r4
 8005558:	6011      	str	r1, [r2, #0]
 800555a:	e7da      	b.n	8005512 <_free_r+0x26>
 800555c:	d902      	bls.n	8005564 <_free_r+0x78>
 800555e:	230c      	movs	r3, #12
 8005560:	6003      	str	r3, [r0, #0]
 8005562:	e7d6      	b.n	8005512 <_free_r+0x26>
 8005564:	6825      	ldr	r5, [r4, #0]
 8005566:	1961      	adds	r1, r4, r5
 8005568:	428b      	cmp	r3, r1
 800556a:	bf04      	itt	eq
 800556c:	6819      	ldreq	r1, [r3, #0]
 800556e:	685b      	ldreq	r3, [r3, #4]
 8005570:	6063      	str	r3, [r4, #4]
 8005572:	bf04      	itt	eq
 8005574:	1949      	addeq	r1, r1, r5
 8005576:	6021      	streq	r1, [r4, #0]
 8005578:	6054      	str	r4, [r2, #4]
 800557a:	e7ca      	b.n	8005512 <_free_r+0x26>
 800557c:	b003      	add	sp, #12
 800557e:	bd30      	pop	{r4, r5, pc}
 8005580:	24000b20 	.word	0x24000b20

08005584 <sbrk_aligned>:
 8005584:	b570      	push	{r4, r5, r6, lr}
 8005586:	4e0e      	ldr	r6, [pc, #56]	; (80055c0 <sbrk_aligned+0x3c>)
 8005588:	460c      	mov	r4, r1
 800558a:	6831      	ldr	r1, [r6, #0]
 800558c:	4605      	mov	r5, r0
 800558e:	b911      	cbnz	r1, 8005596 <sbrk_aligned+0x12>
 8005590:	f000 f88c 	bl	80056ac <_sbrk_r>
 8005594:	6030      	str	r0, [r6, #0]
 8005596:	4621      	mov	r1, r4
 8005598:	4628      	mov	r0, r5
 800559a:	f000 f887 	bl	80056ac <_sbrk_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	d00a      	beq.n	80055b8 <sbrk_aligned+0x34>
 80055a2:	1cc4      	adds	r4, r0, #3
 80055a4:	f024 0403 	bic.w	r4, r4, #3
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d007      	beq.n	80055bc <sbrk_aligned+0x38>
 80055ac:	1a21      	subs	r1, r4, r0
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 f87c 	bl	80056ac <_sbrk_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d101      	bne.n	80055bc <sbrk_aligned+0x38>
 80055b8:	f04f 34ff 	mov.w	r4, #4294967295
 80055bc:	4620      	mov	r0, r4
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	24000b24 	.word	0x24000b24

080055c4 <_malloc_r>:
 80055c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c8:	1ccd      	adds	r5, r1, #3
 80055ca:	f025 0503 	bic.w	r5, r5, #3
 80055ce:	3508      	adds	r5, #8
 80055d0:	2d0c      	cmp	r5, #12
 80055d2:	bf38      	it	cc
 80055d4:	250c      	movcc	r5, #12
 80055d6:	2d00      	cmp	r5, #0
 80055d8:	4607      	mov	r7, r0
 80055da:	db01      	blt.n	80055e0 <_malloc_r+0x1c>
 80055dc:	42a9      	cmp	r1, r5
 80055de:	d905      	bls.n	80055ec <_malloc_r+0x28>
 80055e0:	230c      	movs	r3, #12
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	2600      	movs	r6, #0
 80055e6:	4630      	mov	r0, r6
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	4e2e      	ldr	r6, [pc, #184]	; (80056a8 <_malloc_r+0xe4>)
 80055ee:	f000 f86d 	bl	80056cc <__malloc_lock>
 80055f2:	6833      	ldr	r3, [r6, #0]
 80055f4:	461c      	mov	r4, r3
 80055f6:	bb34      	cbnz	r4, 8005646 <_malloc_r+0x82>
 80055f8:	4629      	mov	r1, r5
 80055fa:	4638      	mov	r0, r7
 80055fc:	f7ff ffc2 	bl	8005584 <sbrk_aligned>
 8005600:	1c43      	adds	r3, r0, #1
 8005602:	4604      	mov	r4, r0
 8005604:	d14d      	bne.n	80056a2 <_malloc_r+0xde>
 8005606:	6834      	ldr	r4, [r6, #0]
 8005608:	4626      	mov	r6, r4
 800560a:	2e00      	cmp	r6, #0
 800560c:	d140      	bne.n	8005690 <_malloc_r+0xcc>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	4631      	mov	r1, r6
 8005612:	4638      	mov	r0, r7
 8005614:	eb04 0803 	add.w	r8, r4, r3
 8005618:	f000 f848 	bl	80056ac <_sbrk_r>
 800561c:	4580      	cmp	r8, r0
 800561e:	d13a      	bne.n	8005696 <_malloc_r+0xd2>
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	3503      	adds	r5, #3
 8005624:	1a6d      	subs	r5, r5, r1
 8005626:	f025 0503 	bic.w	r5, r5, #3
 800562a:	3508      	adds	r5, #8
 800562c:	2d0c      	cmp	r5, #12
 800562e:	bf38      	it	cc
 8005630:	250c      	movcc	r5, #12
 8005632:	4629      	mov	r1, r5
 8005634:	4638      	mov	r0, r7
 8005636:	f7ff ffa5 	bl	8005584 <sbrk_aligned>
 800563a:	3001      	adds	r0, #1
 800563c:	d02b      	beq.n	8005696 <_malloc_r+0xd2>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	442b      	add	r3, r5
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	e00e      	b.n	8005664 <_malloc_r+0xa0>
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	1b52      	subs	r2, r2, r5
 800564a:	d41e      	bmi.n	800568a <_malloc_r+0xc6>
 800564c:	2a0b      	cmp	r2, #11
 800564e:	d916      	bls.n	800567e <_malloc_r+0xba>
 8005650:	1961      	adds	r1, r4, r5
 8005652:	42a3      	cmp	r3, r4
 8005654:	6025      	str	r5, [r4, #0]
 8005656:	bf18      	it	ne
 8005658:	6059      	strne	r1, [r3, #4]
 800565a:	6863      	ldr	r3, [r4, #4]
 800565c:	bf08      	it	eq
 800565e:	6031      	streq	r1, [r6, #0]
 8005660:	5162      	str	r2, [r4, r5]
 8005662:	604b      	str	r3, [r1, #4]
 8005664:	4638      	mov	r0, r7
 8005666:	f104 060b 	add.w	r6, r4, #11
 800566a:	f000 f835 	bl	80056d8 <__malloc_unlock>
 800566e:	f026 0607 	bic.w	r6, r6, #7
 8005672:	1d23      	adds	r3, r4, #4
 8005674:	1af2      	subs	r2, r6, r3
 8005676:	d0b6      	beq.n	80055e6 <_malloc_r+0x22>
 8005678:	1b9b      	subs	r3, r3, r6
 800567a:	50a3      	str	r3, [r4, r2]
 800567c:	e7b3      	b.n	80055e6 <_malloc_r+0x22>
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	42a3      	cmp	r3, r4
 8005682:	bf0c      	ite	eq
 8005684:	6032      	streq	r2, [r6, #0]
 8005686:	605a      	strne	r2, [r3, #4]
 8005688:	e7ec      	b.n	8005664 <_malloc_r+0xa0>
 800568a:	4623      	mov	r3, r4
 800568c:	6864      	ldr	r4, [r4, #4]
 800568e:	e7b2      	b.n	80055f6 <_malloc_r+0x32>
 8005690:	4634      	mov	r4, r6
 8005692:	6876      	ldr	r6, [r6, #4]
 8005694:	e7b9      	b.n	800560a <_malloc_r+0x46>
 8005696:	230c      	movs	r3, #12
 8005698:	603b      	str	r3, [r7, #0]
 800569a:	4638      	mov	r0, r7
 800569c:	f000 f81c 	bl	80056d8 <__malloc_unlock>
 80056a0:	e7a1      	b.n	80055e6 <_malloc_r+0x22>
 80056a2:	6025      	str	r5, [r4, #0]
 80056a4:	e7de      	b.n	8005664 <_malloc_r+0xa0>
 80056a6:	bf00      	nop
 80056a8:	24000b20 	.word	0x24000b20

080056ac <_sbrk_r>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4d06      	ldr	r5, [pc, #24]	; (80056c8 <_sbrk_r+0x1c>)
 80056b0:	2300      	movs	r3, #0
 80056b2:	4604      	mov	r4, r0
 80056b4:	4608      	mov	r0, r1
 80056b6:	602b      	str	r3, [r5, #0]
 80056b8:	f7fc f8a0 	bl	80017fc <_sbrk>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d102      	bne.n	80056c6 <_sbrk_r+0x1a>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	b103      	cbz	r3, 80056c6 <_sbrk_r+0x1a>
 80056c4:	6023      	str	r3, [r4, #0]
 80056c6:	bd38      	pop	{r3, r4, r5, pc}
 80056c8:	24000b28 	.word	0x24000b28

080056cc <__malloc_lock>:
 80056cc:	4801      	ldr	r0, [pc, #4]	; (80056d4 <__malloc_lock+0x8>)
 80056ce:	f000 b809 	b.w	80056e4 <__retarget_lock_acquire_recursive>
 80056d2:	bf00      	nop
 80056d4:	24000b2c 	.word	0x24000b2c

080056d8 <__malloc_unlock>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__malloc_unlock+0x8>)
 80056da:	f000 b804 	b.w	80056e6 <__retarget_lock_release_recursive>
 80056de:	bf00      	nop
 80056e0:	24000b2c 	.word	0x24000b2c

080056e4 <__retarget_lock_acquire_recursive>:
 80056e4:	4770      	bx	lr

080056e6 <__retarget_lock_release_recursive>:
 80056e6:	4770      	bx	lr

080056e8 <checkint>:
 80056e8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80056ec:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80056f0:	429a      	cmp	r2, r3
 80056f2:	b570      	push	{r4, r5, r6, lr}
 80056f4:	dd2a      	ble.n	800574c <checkint+0x64>
 80056f6:	f240 4333 	movw	r3, #1075	; 0x433
 80056fa:	429a      	cmp	r2, r3
 80056fc:	dc24      	bgt.n	8005748 <checkint+0x60>
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	f1a3 0620 	sub.w	r6, r3, #32
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	fa02 f403 	lsl.w	r4, r2, r3
 800570c:	fa02 f606 	lsl.w	r6, r2, r6
 8005710:	f1c3 0520 	rsb	r5, r3, #32
 8005714:	fa22 f505 	lsr.w	r5, r2, r5
 8005718:	4334      	orrs	r4, r6
 800571a:	432c      	orrs	r4, r5
 800571c:	409a      	lsls	r2, r3
 800571e:	ea20 0202 	bic.w	r2, r0, r2
 8005722:	ea21 0404 	bic.w	r4, r1, r4
 8005726:	4322      	orrs	r2, r4
 8005728:	f1a3 0420 	sub.w	r4, r3, #32
 800572c:	f1c3 0220 	rsb	r2, r3, #32
 8005730:	d10c      	bne.n	800574c <checkint+0x64>
 8005732:	40d8      	lsrs	r0, r3
 8005734:	fa01 f302 	lsl.w	r3, r1, r2
 8005738:	4318      	orrs	r0, r3
 800573a:	40e1      	lsrs	r1, r4
 800573c:	4308      	orrs	r0, r1
 800573e:	f000 0001 	and.w	r0, r0, #1
 8005742:	f1d0 0002 	rsbs	r0, r0, #2
 8005746:	bd70      	pop	{r4, r5, r6, pc}
 8005748:	2002      	movs	r0, #2
 800574a:	e7fc      	b.n	8005746 <checkint+0x5e>
 800574c:	2000      	movs	r0, #0
 800574e:	e7fa      	b.n	8005746 <checkint+0x5e>

08005750 <pow>:
 8005750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	ee10 4a90 	vmov	r4, s1
 8005758:	ed2d 8b0a 	vpush	{d8-d12}
 800575c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8005760:	ee11 7a90 	vmov	r7, s3
 8005764:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005768:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800576c:	429a      	cmp	r2, r3
 800576e:	ee10 6a10 	vmov	r6, s0
 8005772:	ee11 0a10 	vmov	r0, s2
 8005776:	b086      	sub	sp, #24
 8005778:	46d4      	mov	ip, sl
 800577a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800577e:	d806      	bhi.n	800578e <pow+0x3e>
 8005780:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8005784:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8005788:	2b7f      	cmp	r3, #127	; 0x7f
 800578a:	f240 8156 	bls.w	8005a3a <pow+0x2ea>
 800578e:	1802      	adds	r2, r0, r0
 8005790:	eb47 0107 	adc.w	r1, r7, r7
 8005794:	f06f 0e01 	mvn.w	lr, #1
 8005798:	f112 39ff 	adds.w	r9, r2, #4294967295
 800579c:	f141 38ff 	adc.w	r8, r1, #4294967295
 80057a0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80057a4:	45ce      	cmp	lr, r9
 80057a6:	eb73 0808 	sbcs.w	r8, r3, r8
 80057aa:	d23f      	bcs.n	800582c <pow+0xdc>
 80057ac:	ea52 0301 	orrs.w	r3, r2, r1
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	d10c      	bne.n	80057d0 <pow+0x80>
 80057b6:	19b6      	adds	r6, r6, r6
 80057b8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80057bc:	4164      	adcs	r4, r4
 80057be:	42b3      	cmp	r3, r6
 80057c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80057c4:	41a3      	sbcs	r3, r4
 80057c6:	f0c0 808c 	bcc.w	80058e2 <pow+0x192>
 80057ca:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80057ce:	e028      	b.n	8005822 <pow+0xd2>
 80057d0:	4da3      	ldr	r5, [pc, #652]	; (8005a60 <pow+0x310>)
 80057d2:	42ac      	cmp	r4, r5
 80057d4:	bf08      	it	eq
 80057d6:	429e      	cmpeq	r6, r3
 80057d8:	d107      	bne.n	80057ea <pow+0x9a>
 80057da:	1800      	adds	r0, r0, r0
 80057dc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 80057e0:	417f      	adcs	r7, r7
 80057e2:	4283      	cmp	r3, r0
 80057e4:	4b9f      	ldr	r3, [pc, #636]	; (8005a64 <pow+0x314>)
 80057e6:	41bb      	sbcs	r3, r7
 80057e8:	e7ed      	b.n	80057c6 <pow+0x76>
 80057ea:	19b6      	adds	r6, r6, r6
 80057ec:	489e      	ldr	r0, [pc, #632]	; (8005a68 <pow+0x318>)
 80057ee:	4164      	adcs	r4, r4
 80057f0:	42b3      	cmp	r3, r6
 80057f2:	eb70 0504 	sbcs.w	r5, r0, r4
 80057f6:	d374      	bcc.n	80058e2 <pow+0x192>
 80057f8:	4281      	cmp	r1, r0
 80057fa:	bf08      	it	eq
 80057fc:	429a      	cmpeq	r2, r3
 80057fe:	d170      	bne.n	80058e2 <pow+0x192>
 8005800:	4a9a      	ldr	r2, [pc, #616]	; (8005a6c <pow+0x31c>)
 8005802:	4294      	cmp	r4, r2
 8005804:	bf08      	it	eq
 8005806:	429e      	cmpeq	r6, r3
 8005808:	d0df      	beq.n	80057ca <pow+0x7a>
 800580a:	4294      	cmp	r4, r2
 800580c:	ea6f 0707 	mvn.w	r7, r7
 8005810:	bf34      	ite	cc
 8005812:	2400      	movcc	r4, #0
 8005814:	2401      	movcs	r4, #1
 8005816:	0fff      	lsrs	r7, r7, #31
 8005818:	42bc      	cmp	r4, r7
 800581a:	f040 81d9 	bne.w	8005bd0 <pow+0x480>
 800581e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8005822:	b006      	add	sp, #24
 8005824:	ecbd 8b0a 	vpop	{d8-d12}
 8005828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582c:	eb16 0806 	adds.w	r8, r6, r6
 8005830:	eb44 0904 	adc.w	r9, r4, r4
 8005834:	f118 31ff 	adds.w	r1, r8, #4294967295
 8005838:	f169 0200 	sbc.w	r2, r9, #0
 800583c:	458e      	cmp	lr, r1
 800583e:	4193      	sbcs	r3, r2
 8005840:	d223      	bcs.n	800588a <pow+0x13a>
 8005842:	ee20 0b00 	vmul.f64	d0, d0, d0
 8005846:	2c00      	cmp	r4, #0
 8005848:	da12      	bge.n	8005870 <pow+0x120>
 800584a:	4639      	mov	r1, r7
 800584c:	f7ff ff4c 	bl	80056e8 <checkint>
 8005850:	2801      	cmp	r0, #1
 8005852:	d10d      	bne.n	8005870 <pow+0x120>
 8005854:	eeb1 0b40 	vneg.f64	d0, d0
 8005858:	ea58 0309 	orrs.w	r3, r8, r9
 800585c:	d10a      	bne.n	8005874 <pow+0x124>
 800585e:	2f00      	cmp	r7, #0
 8005860:	dadf      	bge.n	8005822 <pow+0xd2>
 8005862:	b006      	add	sp, #24
 8005864:	ecbd 8b0a 	vpop	{d8-d12}
 8005868:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	f000 b9f0 	b.w	8005c50 <__math_divzero>
 8005870:	2000      	movs	r0, #0
 8005872:	e7f1      	b.n	8005858 <pow+0x108>
 8005874:	2f00      	cmp	r7, #0
 8005876:	dad4      	bge.n	8005822 <pow+0xd2>
 8005878:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800587c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8005880:	ed8d 7b00 	vstr	d7, [sp]
 8005884:	ed9d 0b00 	vldr	d0, [sp]
 8005888:	e7cb      	b.n	8005822 <pow+0xd2>
 800588a:	2c00      	cmp	r4, #0
 800588c:	da2c      	bge.n	80058e8 <pow+0x198>
 800588e:	4639      	mov	r1, r7
 8005890:	f7ff ff2a 	bl	80056e8 <checkint>
 8005894:	b930      	cbnz	r0, 80058a4 <pow+0x154>
 8005896:	b006      	add	sp, #24
 8005898:	ecbd 8b0a 	vpop	{d8-d12}
 800589c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058a0:	f000 b9ee 	b.w	8005c80 <__math_invalid>
 80058a4:	2801      	cmp	r0, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2000      	movne	r0, #0
 80058aa:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80058ae:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80058b2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80058b6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80058ba:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80058be:	2b7f      	cmp	r3, #127	; 0x7f
 80058c0:	d92d      	bls.n	800591e <pow+0x1ce>
 80058c2:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <pow+0x310>)
 80058c4:	2000      	movs	r0, #0
 80058c6:	429c      	cmp	r4, r3
 80058c8:	bf08      	it	eq
 80058ca:	4286      	cmpeq	r6, r0
 80058cc:	f43f af7d 	beq.w	80057ca <pow+0x7a>
 80058d0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80058d4:	428a      	cmp	r2, r1
 80058d6:	d80c      	bhi.n	80058f2 <pow+0x1a2>
 80058d8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80058dc:	42b0      	cmp	r0, r6
 80058de:	41a3      	sbcs	r3, r4
 80058e0:	d204      	bcs.n	80058ec <pow+0x19c>
 80058e2:	ee31 0b00 	vadd.f64	d0, d1, d0
 80058e6:	e79c      	b.n	8005822 <pow+0xd2>
 80058e8:	2000      	movs	r0, #0
 80058ea:	e7e4      	b.n	80058b6 <pow+0x166>
 80058ec:	ee30 0b41 	vsub.f64	d0, d0, d1
 80058f0:	e797      	b.n	8005822 <pow+0xd2>
 80058f2:	2e01      	cmp	r6, #1
 80058f4:	eb74 0303 	sbcs.w	r3, r4, r3
 80058f8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80058fc:	bf34      	ite	cc
 80058fe:	2301      	movcc	r3, #1
 8005900:	2300      	movcs	r3, #0
 8005902:	4295      	cmp	r5, r2
 8005904:	bf8c      	ite	hi
 8005906:	2500      	movhi	r5, #0
 8005908:	2501      	movls	r5, #1
 800590a:	42ab      	cmp	r3, r5
 800590c:	f000 809d 	beq.w	8005a4a <pow+0x2fa>
 8005910:	b006      	add	sp, #24
 8005912:	ecbd 8b0a 	vpop	{d8-d12}
 8005916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800591a:	f000 b991 	b.w	8005c40 <__math_oflow>
 800591e:	f1bc 0f00 	cmp.w	ip, #0
 8005922:	d10b      	bne.n	800593c <pow+0x1ec>
 8005924:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8005a58 <pow+0x308>
 8005928:	ee20 7b07 	vmul.f64	d7, d0, d7
 800592c:	ec53 2b17 	vmov	r2, r3, d7
 8005930:	ee17 6a10 	vmov	r6, s14
 8005934:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005938:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800593c:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <pow+0x320>)
 800593e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8005942:	4423      	add	r3, r4
 8005944:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8005948:	1519      	asrs	r1, r3, #20
 800594a:	0d1b      	lsrs	r3, r3, #20
 800594c:	051b      	lsls	r3, r3, #20
 800594e:	eba4 0903 	sub.w	r9, r4, r3
 8005952:	4b48      	ldr	r3, [pc, #288]	; (8005a74 <pow+0x324>)
 8005954:	ee04 1a10 	vmov	s8, r1
 8005958:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800595c:	f1b6 0800 	subs.w	r8, r6, #0
 8005960:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8005964:	ec49 8b15 	vmov	d5, r8, r9
 8005968:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800596c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8005970:	ed93 7b00 	vldr	d7, [r3]
 8005974:	ed93 5b02 	vldr	d5, [r3, #8]
 8005978:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800597c:	eea4 2b07 	vfma.f64	d2, d4, d7
 8005980:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8005984:	ee36 ab02 	vadd.f64	d10, d6, d2
 8005988:	ee32 2b4a 	vsub.f64	d2, d2, d10
 800598c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8005990:	ed93 5b04 	vldr	d5, [r3, #16]
 8005994:	ee32 2b06 	vadd.f64	d2, d2, d6
 8005998:	ee37 7b02 	vadd.f64	d7, d7, d2
 800599c:	ee26 5b05 	vmul.f64	d5, d6, d5
 80059a0:	ed93 4b08 	vldr	d4, [r3, #32]
 80059a4:	ee26 0b05 	vmul.f64	d0, d6, d5
 80059a8:	eeb0 9b40 	vmov.f64	d9, d0
 80059ac:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80059b0:	ed93 5b06 	vldr	d5, [r3, #24]
 80059b4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80059b8:	ee26 bb00 	vmul.f64	d11, d6, d0
 80059bc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80059c0:	eea6 5b04 	vfma.f64	d5, d6, d4
 80059c4:	ee3a ab48 	vsub.f64	d10, d10, d8
 80059c8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80059cc:	ee37 9b09 	vadd.f64	d9, d7, d9
 80059d0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80059d4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80059d8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80059dc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 80059e0:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 80059e4:	eea6 3b0c 	vfma.f64	d3, d6, d12
 80059e8:	eea0 4b03 	vfma.f64	d4, d0, d3
 80059ec:	eea0 5b04 	vfma.f64	d5, d0, d4
 80059f0:	eeab ab05 	vfma.f64	d10, d11, d5
 80059f4:	ee38 6b0a 	vadd.f64	d6, d8, d10
 80059f8:	ee21 7b06 	vmul.f64	d7, d1, d6
 80059fc:	ee17 3a90 	vmov	r3, s15
 8005a00:	eeb0 5b47 	vmov.f64	d5, d7
 8005a04:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8005a08:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8005a0c:	18b2      	adds	r2, r6, r2
 8005a0e:	2a3e      	cmp	r2, #62	; 0x3e
 8005a10:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8005a14:	ee38 8b46 	vsub.f64	d8, d8, d6
 8005a18:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8005a1c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8005a20:	d92b      	bls.n	8005a7a <pow+0x32a>
 8005a22:	2a00      	cmp	r2, #0
 8005a24:	da0b      	bge.n	8005a3e <pow+0x2ee>
 8005a26:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8005a2a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f43f aef7 	beq.w	8005822 <pow+0xd2>
 8005a34:	eeb1 0b40 	vneg.f64	d0, d0
 8005a38:	e6f3      	b.n	8005822 <pow+0xd2>
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	e77e      	b.n	800593c <pow+0x1ec>
 8005a3e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8005a42:	d919      	bls.n	8005a78 <pow+0x328>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f6bf af63 	bge.w	8005910 <pow+0x1c0>
 8005a4a:	b006      	add	sp, #24
 8005a4c:	ecbd 8b0a 	vpop	{d8-d12}
 8005a50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a54:	f000 b8ec 	b.w	8005c30 <__math_uflow>
 8005a58:	00000000 	.word	0x00000000
 8005a5c:	43300000 	.word	0x43300000
 8005a60:	3ff00000 	.word	0x3ff00000
 8005a64:	fff00000 	.word	0xfff00000
 8005a68:	ffe00000 	.word	0xffe00000
 8005a6c:	7fe00000 	.word	0x7fe00000
 8005a70:	c0196aab 	.word	0xc0196aab
 8005a74:	08005d60 	.word	0x08005d60
 8005a78:	2600      	movs	r6, #0
 8005a7a:	495d      	ldr	r1, [pc, #372]	; (8005bf0 <pow+0x4a0>)
 8005a7c:	ed91 4b02 	vldr	d4, [r1, #8]
 8005a80:	ed91 3b00 	vldr	d3, [r1]
 8005a84:	eeb0 6b44 	vmov.f64	d6, d4
 8005a88:	eea7 6b03 	vfma.f64	d6, d7, d3
 8005a8c:	ee16 5a10 	vmov	r5, s12
 8005a90:	ee36 6b44 	vsub.f64	d6, d6, d4
 8005a94:	ed91 4b04 	vldr	d4, [r1, #16]
 8005a98:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8005a9c:	eea6 7b04 	vfma.f64	d7, d6, d4
 8005aa0:	eeb0 0b47 	vmov.f64	d0, d7
 8005aa4:	ed91 7b06 	vldr	d7, [r1, #24]
 8005aa8:	18dc      	adds	r4, r3, r3
 8005aaa:	f104 030f 	add.w	r3, r4, #15
 8005aae:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005ab2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8005ab6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 8005aba:	ee35 0b00 	vadd.f64	d0, d5, d0
 8005abe:	ee20 6b00 	vmul.f64	d6, d0, d0
 8005ac2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 8005ac6:	ed91 5b08 	vldr	d5, [r1, #32]
 8005aca:	ee30 7b07 	vadd.f64	d7, d0, d7
 8005ace:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8005ad2:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005ad6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 8005ada:	eea6 7b05 	vfma.f64	d7, d6, d5
 8005ade:	ee26 6b06 	vmul.f64	d6, d6, d6
 8005ae2:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8005ae6:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8005aea:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005aee:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005af2:	1940      	adds	r0, r0, r5
 8005af4:	2700      	movs	r7, #0
 8005af6:	eb17 020c 	adds.w	r2, r7, ip
 8005afa:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8005afe:	eea6 7b05 	vfma.f64	d7, d6, d5
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	d15f      	bne.n	8005bc6 <pow+0x476>
 8005b06:	42bd      	cmp	r5, r7
 8005b08:	db13      	blt.n	8005b32 <pow+0x3e2>
 8005b0a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8005b0e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8005b12:	4610      	mov	r0, r2
 8005b14:	ec41 0b10 	vmov	d0, r0, r1
 8005b18:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005b1c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005bd8 <pow+0x488>
 8005b20:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005b24:	b006      	add	sp, #24
 8005b26:	ecbd 8b0a 	vpop	{d8-d12}
 8005b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2e:	f000 b8bf 	b.w	8005cb0 <__math_check_oflow>
 8005b32:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8005b36:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	ec41 0b15 	vmov	d5, r0, r1
 8005b40:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8005b44:	ee27 6b05 	vmul.f64	d6, d7, d5
 8005b48:	ee35 7b06 	vadd.f64	d7, d5, d6
 8005b4c:	eeb0 3bc7 	vabs.f64	d3, d7
 8005b50:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8005b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b58:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005be0 <pow+0x490>
 8005b5c:	d52a      	bpl.n	8005bb4 <pow+0x464>
 8005b5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005b62:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8005b6e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8005b72:	bf48      	it	mi
 8005b74:	eeb0 4b43 	vmovmi.f64	d4, d3
 8005b78:	ee37 3b04 	vadd.f64	d3, d7, d4
 8005b7c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8005b80:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005b84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b88:	ee37 7b03 	vadd.f64	d7, d7, d3
 8005b8c:	ee37 7b44 	vsub.f64	d7, d7, d4
 8005b90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d104      	bne.n	8005ba4 <pow+0x454>
 8005b9a:	4632      	mov	r2, r6
 8005b9c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005ba0:	ec43 2b17 	vmov	d7, r2, r3
 8005ba4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ba8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005bac:	ee26 6b00 	vmul.f64	d6, d6, d0
 8005bb0:	ed8d 6b04 	vstr	d6, [sp, #16]
 8005bb4:	ee27 0b00 	vmul.f64	d0, d7, d0
 8005bb8:	b006      	add	sp, #24
 8005bba:	ecbd 8b0a 	vpop	{d8-d12}
 8005bbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc2:	f000 b86c 	b.w	8005c9e <__math_check_uflow>
 8005bc6:	ec43 2b10 	vmov	d0, r2, r3
 8005bca:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005bce:	e628      	b.n	8005822 <pow+0xd2>
 8005bd0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005be8 <pow+0x498>
 8005bd4:	e625      	b.n	8005822 <pow+0xd2>
 8005bd6:	bf00      	nop
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	7f000000 	.word	0x7f000000
 8005be0:	00000000 	.word	0x00000000
 8005be4:	00100000 	.word	0x00100000
	...
 8005bf0:	08006da8 	.word	0x08006da8

08005bf4 <with_errno>:
 8005bf4:	b513      	push	{r0, r1, r4, lr}
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	ed8d 0b00 	vstr	d0, [sp]
 8005bfc:	f7ff fc26 	bl	800544c <__errno>
 8005c00:	ed9d 0b00 	vldr	d0, [sp]
 8005c04:	6004      	str	r4, [r0, #0]
 8005c06:	b002      	add	sp, #8
 8005c08:	bd10      	pop	{r4, pc}

08005c0a <xflow>:
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	b158      	cbz	r0, 8005c26 <xflow+0x1c>
 8005c0e:	eeb1 7b40 	vneg.f64	d7, d0
 8005c12:	ed8d 7b00 	vstr	d7, [sp]
 8005c16:	ed9d 7b00 	vldr	d7, [sp]
 8005c1a:	2022      	movs	r0, #34	; 0x22
 8005c1c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005c20:	b002      	add	sp, #8
 8005c22:	f7ff bfe7 	b.w	8005bf4 <with_errno>
 8005c26:	eeb0 7b40 	vmov.f64	d7, d0
 8005c2a:	e7f2      	b.n	8005c12 <xflow+0x8>
 8005c2c:	0000      	movs	r0, r0
	...

08005c30 <__math_uflow>:
 8005c30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005c38 <__math_uflow+0x8>
 8005c34:	f7ff bfe9 	b.w	8005c0a <xflow>
 8005c38:	00000000 	.word	0x00000000
 8005c3c:	10000000 	.word	0x10000000

08005c40 <__math_oflow>:
 8005c40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005c48 <__math_oflow+0x8>
 8005c44:	f7ff bfe1 	b.w	8005c0a <xflow>
 8005c48:	00000000 	.word	0x00000000
 8005c4c:	70000000 	.word	0x70000000

08005c50 <__math_divzero>:
 8005c50:	b082      	sub	sp, #8
 8005c52:	2800      	cmp	r0, #0
 8005c54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005c58:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8005c5c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8005c60:	ed8d 7b00 	vstr	d7, [sp]
 8005c64:	ed9d 0b00 	vldr	d0, [sp]
 8005c68:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8005c78 <__math_divzero+0x28>
 8005c6c:	2022      	movs	r0, #34	; 0x22
 8005c6e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8005c72:	b002      	add	sp, #8
 8005c74:	f7ff bfbe 	b.w	8005bf4 <with_errno>
	...

08005c80 <__math_invalid>:
 8005c80:	eeb0 7b40 	vmov.f64	d7, d0
 8005c84:	eeb4 7b47 	vcmp.f64	d7, d7
 8005c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8c:	ee30 6b40 	vsub.f64	d6, d0, d0
 8005c90:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8005c94:	d602      	bvs.n	8005c9c <__math_invalid+0x1c>
 8005c96:	2021      	movs	r0, #33	; 0x21
 8005c98:	f7ff bfac 	b.w	8005bf4 <with_errno>
 8005c9c:	4770      	bx	lr

08005c9e <__math_check_uflow>:
 8005c9e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca6:	d102      	bne.n	8005cae <__math_check_uflow+0x10>
 8005ca8:	2022      	movs	r0, #34	; 0x22
 8005caa:	f7ff bfa3 	b.w	8005bf4 <with_errno>
 8005cae:	4770      	bx	lr

08005cb0 <__math_check_oflow>:
 8005cb0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8005cd0 <__math_check_oflow+0x20>
 8005cb4:	eeb0 7bc0 	vabs.f64	d7, d0
 8005cb8:	eeb4 7b46 	vcmp.f64	d7, d6
 8005cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc0:	dd02      	ble.n	8005cc8 <__math_check_oflow+0x18>
 8005cc2:	2022      	movs	r0, #34	; 0x22
 8005cc4:	f7ff bf96 	b.w	8005bf4 <with_errno>
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	f3af 8000 	nop.w
 8005cd0:	ffffffff 	.word	0xffffffff
 8005cd4:	7fefffff 	.word	0x7fefffff

08005cd8 <_init>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	bf00      	nop
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr

08005ce4 <_fini>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr
