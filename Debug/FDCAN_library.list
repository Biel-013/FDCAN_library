
FDCAN_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005978  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001928  08005c10  08005c10  00015c10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007538  08007538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  24000000  08007540  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000aa0  24000090  080075d0  00020090  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000b30  080075d0  00020b30  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000eb26  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c9b  00000000  00000000  0002ebe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b00  00000000  00000000  00030880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a28  00000000  00000000  00031380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035d53  00000000  00000000  00031da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c453  00000000  00000000  00067afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00158dc7  00000000  00000000  00073f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ccd15  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003324  00000000  00000000  001ccd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000090 	.word	0x24000090
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005bf8 	.word	0x08005bf8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000094 	.word	0x24000094
 80002d4:	08005bf8 	.word	0x08005bf8

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_d2lz>:
 8000650:	b508      	push	{r3, lr}
 8000652:	4602      	mov	r2, r0
 8000654:	460b      	mov	r3, r1
 8000656:	ec43 2b17 	vmov	d7, r2, r3
 800065a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800065e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000662:	d403      	bmi.n	800066c <__aeabi_d2lz+0x1c>
 8000664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000668:	f000 b80a 	b.w	8000680 <__aeabi_d2ulz>
 800066c:	eeb1 7b47 	vneg.f64	d7, d7
 8000670:	ec51 0b17 	vmov	r0, r1, d7
 8000674:	f000 f804 	bl	8000680 <__aeabi_d2ulz>
 8000678:	4240      	negs	r0, r0
 800067a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800067e:	bd08      	pop	{r3, pc}

08000680 <__aeabi_d2ulz>:
 8000680:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006b0 <__aeabi_d2ulz+0x30>
 8000684:	ec41 0b17 	vmov	d7, r0, r1
 8000688:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006b8 <__aeabi_d2ulz+0x38>
 800068c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000690:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000694:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000698:	eea4 7b45 	vfms.f64	d7, d4, d5
 800069c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006a0:	ee16 1a10 	vmov	r1, s12
 80006a4:	ee17 0a90 	vmov	r0, s15
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	f3af 8000 	nop.w
 80006b0:	00000000 	.word	0x00000000
 80006b4:	3df00000 	.word	0x3df00000
 80006b8:	00000000 	.word	0x00000000
 80006bc:	41f00000 	.word	0x41f00000

080006c0 <HAL_FDCAN_RxFifo0Callback>:
 * @brief  Função chamada quando detectado uma mensagem no barramento da CAN
 * @param  hfdcan: Handle da CAN || normalmente "hfdcan1"
 * @param  RxFifo0ITs: FIFO de interrupção utilizado
 * @retval ***NONE***
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
	/* Pisca o  LED 2 caso tenha algo para receber pela CAN */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80006ca:	2101      	movs	r1, #1
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <HAL_FDCAN_RxFifo0Callback+0x44>)
 80006ce:	f002 fdee 	bl	80032ae <HAL_GPIO_TogglePin>

	/* Pega as informações e dados da CAN, e armazena respectivamente em RxHeader e RxData */
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80006d4:	4a0d      	ldr	r2, [pc, #52]	; (800070c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	480d      	ldr	r0, [pc, #52]	; (8000710 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80006da:	f001 fd29 	bl	8002130 <HAL_FDCAN_GetRxMessage>

	/* Chama a função de tratamento de dados */
	canMessageReceived(&RxHeader, RxData);
 80006de:	490a      	ldr	r1, [pc, #40]	; (8000708 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80006e0:	480a      	ldr	r0, [pc, #40]	; (800070c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80006e2:	f000 f879 	bl	80007d8 <canMessageReceived>

	/* Ativa novamente a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80006e6:	2200      	movs	r2, #0
 80006e8:	2101      	movs	r1, #1
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80006ec:	f001 fe8e 	bl	800240c <HAL_FDCAN_ActivateNotification>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_FDCAN_RxFifo0Callback+0x3a>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 80006f6:	f000 ff2d 	bl	8001554 <Error_Handler>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	58020400 	.word	0x58020400
 8000708:	24000a58 	.word	0x24000a58
 800070c:	24000a30 	.word	0x24000a30
 8000710:	24000a60 	.word	0x24000a60

08000714 <CAN_stream_Init>:
/**
 * @brief  Inicialização do vetor de dados da CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_stream_Init(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
	/* Zera cada posição do vetor de dados - Redundância */
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 800071a:	2300      	movs	r3, #0
 800071c:	80fb      	strh	r3, [r7, #6]
 800071e:	e01a      	b.n	8000756 <CAN_stream_Init+0x42>
		free(CAN_stream.Data_buf[i]);
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	4a11      	ldr	r2, [pc, #68]	; (8000768 <CAN_stream_Init+0x54>)
 8000724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000728:	4618      	mov	r0, r3
 800072a:	f004 fe4f 	bl	80053cc <free>
		CAN_stream.Data_buf[i] = NULL;
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <CAN_stream_Init+0x54>)
 8000732:	2100      	movs	r1, #0
 8000734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		*CAN_stream.Data_buf[i] = 0;
 8000738:	88fb      	ldrh	r3, [r7, #6]
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <CAN_stream_Init+0x54>)
 800073c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
		CAN_stream.Size_buf[i] = 0;
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <CAN_stream_Init+0x54>)
 8000748:	4413      	add	r3, r2
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000750:	88fb      	ldrh	r3, [r7, #6]
 8000752:	3301      	adds	r3, #1
 8000754:	80fb      	strh	r3, [r7, #6]
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800075c:	d3e0      	bcc.n	8000720 <CAN_stream_Init+0xc>
	}
}
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	240000ac 	.word	0x240000ac

0800076c <CAN_Init>:
/**
 * @brief  Inicialização da comunicação via CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Init() {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	/* Chama a função de configuração dos parâmetros da CAN */
	//	CAN_Configure_Init();
	/* Chama a função de limpeza do vetor de armazenamento de dados */
	CAN_stream_Init();
 8000770:	f7ff ffd0 	bl	8000714 <CAN_stream_Init>

	/* Começa a comunicação via CAN */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8000774:	4816      	ldr	r0, [pc, #88]	; (80007d0 <CAN_Init+0x64>)
 8000776:	f001 fc55 	bl	8002024 <HAL_FDCAN_Start>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <CAN_Init+0x18>
		// Caso de errado, chama a função de erro
		Error_Handler();
 8000780:	f000 fee8 	bl	8001554 <Error_Handler>
	}

	/* Ativa a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <CAN_Init+0x64>)
 800078a:	f001 fe3f 	bl	800240c <HAL_FDCAN_ActivateNotification>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <CAN_Init+0x2c>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000794:	f000 fede 	bl	8001554 <Error_Handler>
	}

	/* Configura os parametros para envio de mensagem */
	TxHeader.IdType = FDCAN_STANDARD_ID; // TIPO DE IDENTIFICADOR - STANDARD OU EXTENDED
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <CAN_Init+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // TIPO DE FLAME - DATA OU REMOTE
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <CAN_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8; // TAMANHO DOS DADOS - 0 A 64 WORDS - CONVERTIDO PRA 4
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <CAN_Init+0x68>)
 80007a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80007aa:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // INDICADOR DE ERRO - ATIVO OU PASSIVO
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <CAN_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;	// BIT DE INTERRUPÇÃO - ON OU OFF
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <CAN_Init+0x68>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;		// TIPO DE CAN - NORMAL OU FDCAN
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <CAN_Init+0x68>)
 80007ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007be:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // ARMAZENAMENTO DE EVENTOS DE ENVIO - ON OU OFF
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <CAN_Init+0x68>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;				// MASCARA DA MENSAGEM - 0 A 0xFF
 80007c6:	4b03      	ldr	r3, [pc, #12]	; (80007d4 <CAN_Init+0x68>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	24000a60 	.word	0x24000a60
 80007d4:	24000a0c 	.word	0x24000a0c

080007d8 <canMessageReceived>:
 * @brief  Função de tratamento das mensagens recebidas
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void canMessageReceived(FDCAN_RxHeaderTypeDef *hRxFDCAN, uint8_t *DATA) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
	/* Caso o ID passe do maior valor, a função quebra */

	/* Variavel para armazenamento do tamanho de dados */
	uint8_t SIZE_DATA = hRxFDCAN->DataLength >> 16U;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	68db      	ldr	r3, [r3, #12]
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	73fb      	strb	r3, [r7, #15]

	/* Variavel para armazenamento do identificador */
	uint16_t IDENTIFIER = hRxFDCAN->Identifier;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	81bb      	strh	r3, [r7, #12]

	uint8_t TYPE_DATA = DATA[0] & 0x03;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	f003 0303 	and.w	r3, r3, #3
 80007f8:	72fb      	strb	r3, [r7, #11]

	/* Caso o indentificador não faça parte dos ID's utilizados a função quebra */
	if (IDENTIFIER > CAN_IDS_NUMBER)
 80007fa:	89bb      	ldrh	r3, [r7, #12]
 80007fc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000800:	d82e      	bhi.n	8000860 <canMessageReceived+0x88>
		return;

	switch (TYPE_DATA) {
 8000802:	7afb      	ldrb	r3, [r7, #11]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d82d      	bhi.n	8000864 <canMessageReceived+0x8c>
 8000808:	a201      	add	r2, pc, #4	; (adr r2, 8000810 <canMessageReceived+0x38>)
 800080a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080e:	bf00      	nop
 8000810:	08000821 	.word	0x08000821
 8000814:	08000831 	.word	0x08000831
 8000818:	08000841 	.word	0x08000841
 800081c:	08000851 	.word	0x08000851
	case 0x00:
		CAN_Storage_POSITIVE(IDENTIFIER, SIZE_DATA, DATA);
 8000820:	89bb      	ldrh	r3, [r7, #12]
 8000822:	b2db      	uxtb	r3, r3
 8000824:	7bf9      	ldrb	r1, [r7, #15]
 8000826:	683a      	ldr	r2, [r7, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f81f 	bl	800086c <CAN_Storage_POSITIVE>
		break;
 800082e:	e01a      	b.n	8000866 <canMessageReceived+0x8e>
	case 0x01:
		CAN_Storage_NEGATIVE(IDENTIFIER, SIZE_DATA, DATA);
 8000830:	89bb      	ldrh	r3, [r7, #12]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	7bf9      	ldrb	r1, [r7, #15]
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f87f 	bl	800093c <CAN_Storage_NEGATIVE>
		break;
 800083e:	e012      	b.n	8000866 <canMessageReceived+0x8e>
	case 0x02:
		CAN_Storage_FLOAT(IDENTIFIER, SIZE_DATA, DATA);
 8000840:	89bb      	ldrh	r3, [r7, #12]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7bf9      	ldrb	r1, [r7, #15]
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f8df 	bl	8000a0c <CAN_Storage_FLOAT>
		break;
 800084e:	e00a      	b.n	8000866 <canMessageReceived+0x8e>
	case 0x03:
		CAN_Storage_DOUBLE(IDENTIFIER, SIZE_DATA, DATA);
 8000850:	89bb      	ldrh	r3, [r7, #12]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	7bf9      	ldrb	r1, [r7, #15]
 8000856:	683a      	ldr	r2, [r7, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f000 f93f 	bl	8000adc <CAN_Storage_DOUBLE>
		break;
 800085e:	e002      	b.n	8000866 <canMessageReceived+0x8e>
		return;
 8000860:	bf00      	nop
 8000862:	e000      	b.n	8000866 <canMessageReceived+0x8e>
	default:
		break;
 8000864:	bf00      	nop
	}
}
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <CAN_Storage_POSITIVE>:

void CAN_Storage_POSITIVE(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	603a      	str	r2, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	460b      	mov	r3, r1
 800087a:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 800087c:	f04f 0200 	mov.w	r2, #0
 8000880:	f04f 0300 	mov.w	r3, #0
 8000884:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &value;
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	617b      	str	r3, [r7, #20]
	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4a29      	ldr	r2, [pc, #164]	; (8000938 <CAN_Storage_POSITIVE+0xcc>)
 8000892:	4413      	add	r3, r2
 8000894:	79ba      	ldrb	r2, [r7, #6]
 8000896:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_POSITIVE;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <CAN_Storage_POSITIVE+0xcc>)
 800089e:	4413      	add	r3, r2
 80008a0:	2200      	movs	r2, #0
 80008a2:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4a23      	ldr	r2, [pc, #140]	; (8000938 <CAN_Storage_POSITIVE+0xcc>)
 80008aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 fd8c 	bl	80053cc <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 80008b4:	79bb      	ldrb	r3, [r7, #6]
 80008b6:	79fc      	ldrb	r4, [r7, #7]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 fd7f 	bl	80053bc <malloc>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
 80008c2:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <CAN_Storage_POSITIVE+0xcc>)
 80008c4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	for (int i = 0; i < Size; i++)
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
 80008cc:	e00a      	b.n	80008e4 <CAN_Storage_POSITIVE+0x78>
		pValue[i] = Data[i];
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	441a      	add	r2, r3
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	6979      	ldr	r1, [r7, #20]
 80008d8:	440b      	add	r3, r1
 80008da:	7812      	ldrb	r2, [r2, #0]
 80008dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3301      	adds	r3, #1
 80008e2:	61fb      	str	r3, [r7, #28]
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	69fa      	ldr	r2, [r7, #28]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf0      	blt.n	80008ce <CAN_Storage_POSITIVE+0x62>

	value = value >> 2U;
 80008ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008f0:	f04f 0200 	mov.w	r2, #0
 80008f4:	f04f 0300 	mov.w	r3, #0
 80008f8:	0882      	lsrs	r2, r0, #2
 80008fa:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80008fe:	088b      	lsrs	r3, r1, #2
 8000900:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Armazena o valor na memória alocada*/
	for (int i = 0; i < Size; i++)
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	e00d      	b.n	8000926 <CAN_Storage_POSITIVE+0xba>
		CAN_stream.Data_buf[Identifier][i] = pValue[i];
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	441a      	add	r2, r3
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	4909      	ldr	r1, [pc, #36]	; (8000938 <CAN_Storage_POSITIVE+0xcc>)
 8000914:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	440b      	add	r3, r1
 800091c:	7812      	ldrb	r2, [r2, #0]
 800091e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	3301      	adds	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	429a      	cmp	r2, r3
 800092c:	dbed      	blt.n	800090a <CAN_Storage_POSITIVE+0x9e>
}
 800092e:	bf00      	nop
 8000930:	bf00      	nop
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	240000ac 	.word	0x240000ac

0800093c <CAN_Storage_NEGATIVE>:

void CAN_Storage_NEGATIVE(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b089      	sub	sp, #36	; 0x24
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	603a      	str	r2, [r7, #0]
 8000946:	71fb      	strb	r3, [r7, #7]
 8000948:	460b      	mov	r3, r1
 800094a:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 800094c:	f04f 0200 	mov.w	r2, #0
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &value;
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	617b      	str	r3, [r7, #20]

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <CAN_Storage_NEGATIVE+0xcc>)
 8000962:	4413      	add	r3, r2
 8000964:	79ba      	ldrb	r2, [r7, #6]
 8000966:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_NEGATIVE;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a26      	ldr	r2, [pc, #152]	; (8000a08 <CAN_Storage_NEGATIVE+0xcc>)
 800096e:	4413      	add	r3, r2
 8000970:	2201      	movs	r2, #1
 8000972:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <CAN_Storage_NEGATIVE+0xcc>)
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fd24 	bl	80053cc <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000984:	79bb      	ldrb	r3, [r7, #6]
 8000986:	79fc      	ldrb	r4, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f004 fd17 	bl	80053bc <malloc>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <CAN_Storage_NEGATIVE+0xcc>)
 8000994:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	for (int i = 0; i < Size; i++)
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	e00a      	b.n	80009b4 <CAN_Storage_NEGATIVE+0x78>
		pValue[i] = Data[i];
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	441a      	add	r2, r3
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	6979      	ldr	r1, [r7, #20]
 80009a8:	440b      	add	r3, r1
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3301      	adds	r3, #1
 80009b2:	61fb      	str	r3, [r7, #28]
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	69fa      	ldr	r2, [r7, #28]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf0      	blt.n	800099e <CAN_Storage_NEGATIVE+0x62>

	value = value >> 2U;
 80009bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	0882      	lsrs	r2, r0, #2
 80009ca:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80009ce:	088b      	lsrs	r3, r1, #2
 80009d0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Armazena o valor na memória alocada*/
	for (int i = 0; i < Size; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	e00d      	b.n	80009f6 <CAN_Storage_NEGATIVE+0xba>
		CAN_stream.Data_buf[Identifier][i] = pValue[i];
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	441a      	add	r2, r3
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	4909      	ldr	r1, [pc, #36]	; (8000a08 <CAN_Storage_NEGATIVE+0xcc>)
 80009e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	440b      	add	r3, r1
 80009ec:	7812      	ldrb	r2, [r2, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	3301      	adds	r3, #1
 80009f4:	61bb      	str	r3, [r7, #24]
 80009f6:	79bb      	ldrb	r3, [r7, #6]
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dbed      	blt.n	80009da <CAN_Storage_NEGATIVE+0x9e>
}
 80009fe:	bf00      	nop
 8000a00:	bf00      	nop
 8000a02:	3724      	adds	r7, #36	; 0x24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	240000ac 	.word	0x240000ac

08000a0c <CAN_Storage_FLOAT>:

void CAN_Storage_FLOAT(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b089      	sub	sp, #36	; 0x24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	603a      	str	r2, [r7, #0]
 8000a16:	71fb      	strb	r3, [r7, #7]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	f04f 0300 	mov.w	r3, #0
 8000a24:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &value;
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	617b      	str	r3, [r7, #20]

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	4a29      	ldr	r2, [pc, #164]	; (8000ad8 <CAN_Storage_FLOAT+0xcc>)
 8000a32:	4413      	add	r3, r2
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_FLOAT;
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a26      	ldr	r2, [pc, #152]	; (8000ad8 <CAN_Storage_FLOAT+0xcc>)
 8000a3e:	4413      	add	r3, r2
 8000a40:	2202      	movs	r2, #2
 8000a42:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <CAN_Storage_FLOAT+0xcc>)
 8000a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f004 fcbc 	bl	80053cc <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	79fc      	ldrb	r4, [r7, #7]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f004 fcaf 	bl	80053bc <malloc>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <CAN_Storage_FLOAT+0xcc>)
 8000a64:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	for (int i = 0; i < Size; i++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61fb      	str	r3, [r7, #28]
 8000a6c:	e00a      	b.n	8000a84 <CAN_Storage_FLOAT+0x78>
		pValue[i] = Data[i];
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	441a      	add	r2, r3
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	6979      	ldr	r1, [r7, #20]
 8000a78:	440b      	add	r3, r1
 8000a7a:	7812      	ldrb	r2, [r2, #0]
 8000a7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3301      	adds	r3, #1
 8000a82:	61fb      	str	r3, [r7, #28]
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <CAN_Storage_FLOAT+0x62>

	value = value >> 2U;
 8000a8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	0882      	lsrs	r2, r0, #2
 8000a9a:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8000a9e:	088b      	lsrs	r3, r1, #2
 8000aa0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Armazena o valor na memória alocada*/
	for (int i = 0; i < Size; i++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	e00d      	b.n	8000ac6 <CAN_Storage_FLOAT+0xba>
		CAN_stream.Data_buf[Identifier][i] = pValue[i];
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	697a      	ldr	r2, [r7, #20]
 8000aae:	441a      	add	r2, r3
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4909      	ldr	r1, [pc, #36]	; (8000ad8 <CAN_Storage_FLOAT+0xcc>)
 8000ab4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	440b      	add	r3, r1
 8000abc:	7812      	ldrb	r2, [r2, #0]
 8000abe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dbed      	blt.n	8000aaa <CAN_Storage_FLOAT+0x9e>
}
 8000ace:	bf00      	nop
 8000ad0:	bf00      	nop
 8000ad2:	3724      	adds	r7, #36	; 0x24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	240000ac 	.word	0x240000ac

08000adc <CAN_Storage_DOUBLE>:

void CAN_Storage_DOUBLE(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 8000adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ae0:	b089      	sub	sp, #36	; 0x24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	603a      	str	r2, [r7, #0]
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	460b      	mov	r3, r1
 8000aec:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	f04f 0300 	mov.w	r3, #0
 8000af6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &value;
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	613b      	str	r3, [r7, #16]

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	4a31      	ldr	r2, [pc, #196]	; (8000bc8 <CAN_Storage_DOUBLE+0xec>)
 8000b04:	4413      	add	r3, r2
 8000b06:	79ba      	ldrb	r2, [r7, #6]
 8000b08:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_DOUBLE;
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4a2e      	ldr	r2, [pc, #184]	; (8000bc8 <CAN_Storage_DOUBLE+0xec>)
 8000b10:	4413      	add	r3, r2
 8000b12:	2203      	movs	r2, #3
 8000b14:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <CAN_Storage_DOUBLE+0xec>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 fc53 	bl	80053cc <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000b26:	79bb      	ldrb	r3, [r7, #6]
 8000b28:	79fe      	ldrb	r6, [r7, #7]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f004 fc46 	bl	80053bc <malloc>
 8000b30:	4603      	mov	r3, r0
 8000b32:	461a      	mov	r2, r3
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <CAN_Storage_DOUBLE+0xec>)
 8000b36:	f843 2026 	str.w	r2, [r3, r6, lsl #2]

	for (uint64_t i = 0; i < Size; i++)
 8000b3a:	f04f 0200 	mov.w	r2, #0
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000b46:	e00f      	b.n	8000b68 <CAN_Storage_DOUBLE+0x8c>
		pValue[i] = Data[i];
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	6939      	ldr	r1, [r7, #16]
 8000b52:	440b      	add	r3, r1
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	701a      	strb	r2, [r3, #0]
	for (uint64_t i = 0; i < Size; i++)
 8000b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000b5c:	f112 0801 	adds.w	r8, r2, #1
 8000b60:	f143 0900 	adc.w	r9, r3, #0
 8000b64:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8000b68:	79bb      	ldrb	r3, [r7, #6]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	461c      	mov	r4, r3
 8000b6e:	4615      	mov	r5, r2
 8000b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000b74:	42a2      	cmp	r2, r4
 8000b76:	41ab      	sbcs	r3, r5
 8000b78:	d3e6      	bcc.n	8000b48 <CAN_Storage_DOUBLE+0x6c>

	value = value >> 2U;
 8000b7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b7e:	f04f 0200 	mov.w	r2, #0
 8000b82:	f04f 0300 	mov.w	r3, #0
 8000b86:	0882      	lsrs	r2, r0, #2
 8000b88:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 8000b8c:	088b      	lsrs	r3, r1, #2
 8000b8e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* Armazena o valor na memória alocada*/
	for (int i = 0; i < Size; i++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00d      	b.n	8000bb4 <CAN_Storage_DOUBLE+0xd8>
		CAN_stream.Data_buf[Identifier][i] = pValue[i];
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4909      	ldr	r1, [pc, #36]	; (8000bc8 <CAN_Storage_DOUBLE+0xec>)
 8000ba2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	440b      	add	r3, r1
 8000baa:	7812      	ldrb	r2, [r2, #0]
 8000bac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < Size; i++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbed      	blt.n	8000b98 <CAN_Storage_DOUBLE+0xbc>
}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bc8:	240000ac 	.word	0x240000ac

08000bcc <CAN_TxData>:
 * @brief  Envio de mensagem pelo barramento CAN
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_TxData(uint16_t Identifier, uint64_t Data) {
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	e9c7 2300 	strd	r2, r3, [r7]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	81fb      	strh	r3, [r7, #14]
	uint64_t *pData = &Data;
 8000bdc:	463b      	mov	r3, r7
 8000bde:	617b      	str	r3, [r7, #20]
	uint32_t Size_data = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < 8; i++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	e01b      	b.n	8000c22 <CAN_TxData+0x56>
		if (Data >> 8 * i == 0) {
 8000bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bee:	69b9      	ldr	r1, [r7, #24]
 8000bf0:	00c9      	lsls	r1, r1, #3
 8000bf2:	f1c1 0620 	rsb	r6, r1, #32
 8000bf6:	f1a1 0020 	sub.w	r0, r1, #32
 8000bfa:	fa22 f401 	lsr.w	r4, r2, r1
 8000bfe:	fa03 f606 	lsl.w	r6, r3, r6
 8000c02:	4334      	orrs	r4, r6
 8000c04:	fa23 f000 	lsr.w	r0, r3, r0
 8000c08:	4304      	orrs	r4, r0
 8000c0a:	fa23 f501 	lsr.w	r5, r3, r1
 8000c0e:	ea54 0305 	orrs.w	r3, r4, r5
 8000c12:	d103      	bne.n	8000c1c <CAN_TxData+0x50>
			Size_data = i << 16U;
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	041b      	lsls	r3, r3, #16
 8000c18:	61fb      	str	r3, [r7, #28]
			break;
 8000c1a:	e005      	b.n	8000c28 <CAN_TxData+0x5c>
	for (int i = 0; i < 8; i++)
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	2b07      	cmp	r3, #7
 8000c26:	dde0      	ble.n	8000bea <CAN_TxData+0x1e>
		}

	/* Armazena o identificador da mensagem no struct de informação (TxHeader) */
	TxHeader.Identifier = Identifier;
 8000c28:	89fb      	ldrh	r3, [r7, #14]
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <CAN_TxData+0x84>)
 8000c2c:	6013      	str	r3, [r2, #0]

	TxHeader.DataLength = Size_data;
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <CAN_TxData+0x84>)
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	60d3      	str	r3, [r2, #12]

	/* Envia os dados recebidos na chamada (data) pela CAN, de acordo com as informações de TxHeader */
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, (uint8_t*) pData)
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	4906      	ldr	r1, [pc, #24]	; (8000c50 <CAN_TxData+0x84>)
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <CAN_TxData+0x88>)
 8000c3a:	f001 fa1e 	bl	800207a <HAL_FDCAN_AddMessageToTxFifoQ>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <CAN_TxData+0x7c>
			!= HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000c44:	f000 fc86 	bl	8001554 <Error_Handler>
	}
}
 8000c48:	bf00      	nop
 8000c4a:	3724      	adds	r7, #36	; 0x24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	24000a0c 	.word	0x24000a0c
 8000c54:	24000a60 	.word	0x24000a60

08000c58 <CAN_Get_value>:

int64_t CAN_Get_value(uint16_t Identifier) {
 8000c58:	b4b0      	push	{r4, r5, r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	int64_t VALUE = 0;
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	f04f 0300 	mov.w	r3, #0
 8000c6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t *pValue = (uint8_t*) &VALUE;
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	617b      	str	r3, [r7, #20]

	switch (CAN_stream.Type_buf[Identifier]) {
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	4a27      	ldr	r2, [pc, #156]	; (8000d14 <CAN_Get_value+0xbc>)
 8000c78:	4413      	add	r3, r2
 8000c7a:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <CAN_Get_value+0x30>
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d01b      	beq.n	8000cbe <CAN_Get_value+0x66>
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
			pValue[i] = CAN_stream.Data_buf[Identifier][i];
		VALUE = -VALUE;
		break;
	default:
		break;
 8000c86:	e03d      	b.n	8000d04 <CAN_Get_value+0xac>
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
 8000c8c:	e00d      	b.n	8000caa <CAN_Get_value+0x52>
			pValue[i] = CAN_stream.Data_buf[Identifier][i];
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <CAN_Get_value+0xbc>)
 8000c92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	441a      	add	r2, r3
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	6979      	ldr	r1, [r7, #20]
 8000c9e:	440b      	add	r3, r1
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <CAN_Get_value+0xbc>)
 8000cae:	4413      	add	r3, r2
 8000cb0:	f893 3640 	ldrb.w	r3, [r3, #1600]	; 0x640
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	dbe8      	blt.n	8000c8e <CAN_Get_value+0x36>
		break;
 8000cbc:	e022      	b.n	8000d04 <CAN_Get_value+0xac>
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
 8000cc2:	e00d      	b.n	8000ce0 <CAN_Get_value+0x88>
			pValue[i] = CAN_stream.Data_buf[Identifier][i];
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	4a13      	ldr	r2, [pc, #76]	; (8000d14 <CAN_Get_value+0xbc>)
 8000cc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	441a      	add	r2, r3
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	6979      	ldr	r1, [r7, #20]
 8000cd4:	440b      	add	r3, r1
 8000cd6:	7812      	ldrb	r2, [r2, #0]
 8000cd8:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	; (8000d14 <CAN_Get_value+0xbc>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f893 3640 	ldrb.w	r3, [r3, #1600]	; 0x640
 8000cea:	461a      	mov	r2, r3
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	dbe8      	blt.n	8000cc4 <CAN_Get_value+0x6c>
		VALUE = -VALUE;
 8000cf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4254      	negs	r4, r2
 8000cfa:	eb61 0503 	sbc.w	r5, r1, r3
 8000cfe:	e9c7 4502 	strd	r4, r5, [r7, #8]
		break;
 8000d02:	bf00      	nop
	}

	return VALUE;
 8000d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000d08:	4610      	mov	r0, r2
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bcb0      	pop	{r4, r5, r7}
 8000d12:	4770      	bx	lr
 8000d14:	240000ac 	.word	0x240000ac

08000d18 <CAN_Get_value_FLOAT>:

float CAN_Get_value_FLOAT(uint16_t Identifier) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	ed2d 8b02 	vpush	{d8}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
	if (CAN_stream.Type_buf[Identifier] != CAN_FLOAT)
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	4a3e      	ldr	r2, [pc, #248]	; (8000e24 <CAN_Get_value_FLOAT+0x10c>)
 8000d2a:	4413      	add	r3, r2
 8000d2c:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d002      	beq.n	8000d3a <CAN_Get_value_FLOAT+0x22>
		return 0;
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	e06b      	b.n	8000e12 <CAN_Get_value_FLOAT+0xfa>
	uint64_t DATA_STORAGE = 0;
 8000d3a:	f04f 0200 	mov.w	r2, #0
 8000d3e:	f04f 0300 	mov.w	r3, #0
 8000d42:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t PRECISION = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	75fb      	strb	r3, [r7, #23]
	uint8_t SIGNAL = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	75bb      	strb	r3, [r7, #22]
	float VALUE = 0;
 8000d4e:	f04f 0300 	mov.w	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
	uint8_t *pData_Storage = (uint8_t*) &DATA_STORAGE;
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	e00d      	b.n	8000d7c <CAN_Get_value_FLOAT+0x64>
		pData_Storage[i] = CAN_stream.Data_buf[Identifier][i];
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	4a30      	ldr	r2, [pc, #192]	; (8000e24 <CAN_Get_value_FLOAT+0x10c>)
 8000d64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	441a      	add	r2, r3
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	6939      	ldr	r1, [r7, #16]
 8000d70:	440b      	add	r3, r1
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	4a29      	ldr	r2, [pc, #164]	; (8000e24 <CAN_Get_value_FLOAT+0x10c>)
 8000d80:	4413      	add	r3, r2
 8000d82:	f893 3640 	ldrb.w	r3, [r3, #1600]	; 0x640
 8000d86:	461a      	mov	r2, r3
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	dbe8      	blt.n	8000d60 <CAN_Get_value_FLOAT+0x48>

	PRECISION = DATA_STORAGE & 0x3F;
 8000d8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d92:	b2d3      	uxtb	r3, r2
 8000d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d98:	75fb      	strb	r3, [r7, #23]

	SIGNAL = (DATA_STORAGE & 0x40) >> 6;
 8000d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	0982      	lsrs	r2, r0, #6
 8000da8:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8000dac:	098b      	lsrs	r3, r1, #6
 8000dae:	b2d3      	uxtb	r3, r2
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	75bb      	strb	r3, [r7, #22]

	VALUE = (DATA_STORAGE >> 7) * pow(10, -PRECISION);
 8000db6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	f04f 0300 	mov.w	r3, #0
 8000dc2:	09c2      	lsrs	r2, r0, #7
 8000dc4:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8000dc8:	09cb      	lsrs	r3, r1, #7
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fc09 	bl	80005e4 <__aeabi_ul2d>
 8000dd2:	ec41 0b18 	vmov	d8, r0, r1
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
 8000dd8:	425b      	negs	r3, r3
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000de2:	eeb0 1b47 	vmov.f64	d1, d7
 8000de6:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000dea:	f004 fc41 	bl	8005670 <pow>
 8000dee:	eeb0 7b40 	vmov.f64	d7, d0
 8000df2:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000df6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dfa:	edc7 7a07 	vstr	s15, [r7, #28]

	if (SIGNAL == 1)
 8000dfe:	7dbb      	ldrb	r3, [r7, #22]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d105      	bne.n	8000e10 <CAN_Get_value_FLOAT+0xf8>
		VALUE = -VALUE;
 8000e04:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e08:	eef1 7a67 	vneg.f32	s15, s15
 8000e0c:	edc7 7a07 	vstr	s15, [r7, #28]

	return VALUE;
 8000e10:	69fb      	ldr	r3, [r7, #28]
}
 8000e12:	ee07 3a90 	vmov	s15, r3
 8000e16:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	ecbd 8b02 	vpop	{d8}
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	240000ac 	.word	0x240000ac

08000e28 <CAN_Get_value_DOUBLE>:

double CAN_Get_value_DOUBLE(uint16_t Identifier) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	ed2d 8b02 	vpush	{d8}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
	if (CAN_stream.Type_buf[Identifier] != CAN_DOUBLE)
 8000e36:	88fb      	ldrh	r3, [r7, #6]
 8000e38:	4a41      	ldr	r2, [pc, #260]	; (8000f40 <CAN_Get_value_DOUBLE+0x118>)
 8000e3a:	4413      	add	r3, r2
 8000e3c:	f893 37d0 	ldrb.w	r3, [r3, #2000]	; 0x7d0
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d002      	beq.n	8000e4a <CAN_Get_value_DOUBLE+0x22>
		return 0;
 8000e44:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 8000f38 <CAN_Get_value_DOUBLE+0x110>
 8000e48:	e06c      	b.n	8000f24 <CAN_Get_value_DOUBLE+0xfc>
	uint64_t DATA_STORAGE = 0;
 8000e4a:	f04f 0200 	mov.w	r2, #0
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t PRECISION = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]
	uint8_t SIGNAL = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75bb      	strb	r3, [r7, #22]
	float VALUE = 0;
 8000e5e:	f04f 0300 	mov.w	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
	uint8_t *pData_Storage = (uint8_t*) &DATA_STORAGE;
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	e00d      	b.n	8000e8c <CAN_Get_value_DOUBLE+0x64>
		pData_Storage[i] = CAN_stream.Data_buf[Identifier][i];
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4a33      	ldr	r2, [pc, #204]	; (8000f40 <CAN_Get_value_DOUBLE+0x118>)
 8000e74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	441a      	add	r2, r3
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6939      	ldr	r1, [r7, #16]
 8000e80:	440b      	add	r3, r1
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < CAN_stream.Size_buf[Identifier]; i++)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	61bb      	str	r3, [r7, #24]
 8000e8c:	88fb      	ldrh	r3, [r7, #6]
 8000e8e:	4a2c      	ldr	r2, [pc, #176]	; (8000f40 <CAN_Get_value_DOUBLE+0x118>)
 8000e90:	4413      	add	r3, r2
 8000e92:	f893 3640 	ldrb.w	r3, [r3, #1600]	; 0x640
 8000e96:	461a      	mov	r2, r3
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	dbe8      	blt.n	8000e70 <CAN_Get_value_DOUBLE+0x48>

	PRECISION = DATA_STORAGE & 0x1FF;
 8000e9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	75fb      	strb	r3, [r7, #23]

	SIGNAL = (DATA_STORAGE & 0x200) >> 9;
 8000ea6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	0a42      	lsrs	r2, r0, #9
 8000eb4:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8000eb8:	0a4b      	lsrs	r3, r1, #9
 8000eba:	b2d3      	uxtb	r3, r2
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	75bb      	strb	r3, [r7, #22]

	VALUE = (DATA_STORAGE >> 10) * pow(10, -PRECISION);
 8000ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ec6:	f04f 0200 	mov.w	r2, #0
 8000eca:	f04f 0300 	mov.w	r3, #0
 8000ece:	0a82      	lsrs	r2, r0, #10
 8000ed0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000ed4:	0a8b      	lsrs	r3, r1, #10
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f7ff fb83 	bl	80005e4 <__aeabi_ul2d>
 8000ede:	ec41 0b18 	vmov	d8, r0, r1
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	425b      	negs	r3, r3
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000eee:	eeb0 1b47 	vmov.f64	d1, d7
 8000ef2:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000ef6:	f004 fbbb 	bl	8005670 <pow>
 8000efa:	eeb0 7b40 	vmov.f64	d7, d0
 8000efe:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000f02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f06:	edc7 7a07 	vstr	s15, [r7, #28]

	if (SIGNAL == 1)
 8000f0a:	7dbb      	ldrb	r3, [r7, #22]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <CAN_Get_value_DOUBLE+0xf4>
		VALUE = -VALUE;
 8000f10:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f14:	eef1 7a67 	vneg.f32	s15, s15
 8000f18:	edc7 7a07 	vstr	s15, [r7, #28]

	return VALUE;
 8000f1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
}
 8000f24:	eeb0 0b47 	vmov.f64	d0, d7
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	ecbd 8b02 	vpop	{d8}
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	f3af 8000 	nop.w
	...
 8000f40:	240000ac 	.word	0x240000ac

08000f44 <CAN_Send>:
 * @brief  Envio de mensagem pelo barramento CAN
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_Send(uint16_t Identifier, int64_t Data) {
 8000f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4601      	mov	r1, r0
 8000f4e:	e9c7 2300 	strd	r2, r3, [r7]
 8000f52:	460b      	mov	r3, r1
 8000f54:	81fb      	strh	r3, [r7, #14]

	if (Data > 0)
 8000f56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f5a:	2a01      	cmp	r2, #1
 8000f5c:	f173 0300 	sbcs.w	r3, r3, #0
 8000f60:	db0c      	blt.n	8000f7c <CAN_Send+0x38>

		Data = (Data << 2) | 0x00;
 8000f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	008b      	lsls	r3, r1, #2
 8000f70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8000f74:	0082      	lsls	r2, r0, #2
 8000f76:	e9c7 2300 	strd	r2, r3, [r7]
 8000f7a:	e012      	b.n	8000fa2 <CAN_Send+0x5e>
	else
		Data = ((-Data) << 2) | 0x01;
 8000f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f80:	2100      	movs	r1, #0
 8000f82:	4254      	negs	r4, r2
 8000f84:	eb61 0503 	sbc.w	r5, r1, r3
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	00ab      	lsls	r3, r5, #2
 8000f92:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000f96:	00a2      	lsls	r2, r4, #2
 8000f98:	f042 0801 	orr.w	r8, r2, #1
 8000f9c:	4699      	mov	r9, r3
 8000f9e:	e9c7 8900 	strd	r8, r9, [r7]

	CAN_TxData(Identifier, Data);
 8000fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fa6:	89f9      	ldrh	r1, [r7, #14]
 8000fa8:	4608      	mov	r0, r1
 8000faa:	f7ff fe0f 	bl	8000bcc <CAN_TxData>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000fb8 <CAN_Send_Float>:

void CAN_Send_Float(uint16_t Identifier, float Data, uint8_t Precision) {
 8000fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fbc:	ed2d 8b02 	vpush	{d8}
 8000fc0:	b08e      	sub	sp, #56	; 0x38
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
 8000fca:	460a      	mov	r2, r1
 8000fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000fce:	4613      	mov	r3, r2
 8000fd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	int64_t Valor = Data * pow(10, Precision);
 8000fd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000fd8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000fdc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fe8:	eeb0 1b47 	vmov.f64	d1, d7
 8000fec:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000ff0:	f004 fb3e 	bl	8005670 <pow>
 8000ff4:	eeb0 7b40 	vmov.f64	d7, d0
 8000ff8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8000ffc:	ec51 0b17 	vmov	r0, r1, d7
 8001000:	f7ff fb26 	bl	8000650 <__aeabi_d2lz>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	if (Data > 0)
 800100c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	dd24      	ble.n	8001064 <CAN_Send_Float+0xac>
		Valor = (Valor << 9) | 0x000 | (Precision << 2) | 0x02;
 800101a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	024b      	lsls	r3, r1, #9
 8001028:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800102c:	0242      	lsls	r2, r0, #9
 800102e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8001032:	0089      	lsls	r1, r1, #2
 8001034:	17c8      	asrs	r0, r1, #31
 8001036:	6239      	str	r1, [r7, #32]
 8001038:	6278      	str	r0, [r7, #36]	; 0x24
 800103a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800103e:	4621      	mov	r1, r4
 8001040:	4311      	orrs	r1, r2
 8001042:	61b9      	str	r1, [r7, #24]
 8001044:	4629      	mov	r1, r5
 8001046:	4319      	orrs	r1, r3
 8001048:	61f9      	str	r1, [r7, #28]
 800104a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800104e:	460b      	mov	r3, r1
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4613      	mov	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800105e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001062:	e027      	b.n	80010b4 <CAN_Send_Float+0xfc>
	else
		Valor = ((-Valor) << 9) | 0x100 | (Precision << 2) | 0x02;
 8001064:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4254      	negs	r4, r2
 800106c:	eb61 0503 	sbc.w	r5, r1, r3
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	026b      	lsls	r3, r5, #9
 800107a:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800107e:	0262      	lsls	r2, r4, #9
 8001080:	f442 7a80 	orr.w	sl, r2, #256	; 0x100
 8001084:	469b      	mov	fp, r3
 8001086:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	17da      	asrs	r2, r3, #31
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	617a      	str	r2, [r7, #20]
 8001092:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001096:	460b      	mov	r3, r1
 8001098:	ea4a 0803 	orr.w	r8, sl, r3
 800109c:	4613      	mov	r3, r2
 800109e:	ea4b 0903 	orr.w	r9, fp, r3
 80010a2:	f048 0302 	orr.w	r3, r8, #2
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	f8c7 9004 	str.w	r9, [r7, #4]
 80010ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80010b0:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

	CAN_TxData(Identifier, Valor);
 80010b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80010b8:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80010ba:	4608      	mov	r0, r1
 80010bc:	f7ff fd86 	bl	8000bcc <CAN_TxData>
}
 80010c0:	bf00      	nop
 80010c2:	3738      	adds	r7, #56	; 0x38
 80010c4:	46bd      	mov	sp, r7
 80010c6:	ecbd 8b02 	vpop	{d8}
 80010ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080010ce <CAN_Send_Double>:

void CAN_Send_Double(uint16_t Identifier, double Data, uint8_t Precision) {
 80010ce:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010d2:	b090      	sub	sp, #64	; 0x40
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80010dc:	460a      	mov	r2, r1
 80010de:	86fb      	strh	r3, [r7, #54]	; 0x36
 80010e0:	4613      	mov	r3, r2
 80010e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	int64_t Valor = Data * pow(10, Precision);
 80010e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010f2:	eeb0 1b47 	vmov.f64	d1, d7
 80010f6:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80010fa:	f004 fab9 	bl	8005670 <pow>
 80010fe:	eeb0 6b40 	vmov.f64	d6, d0
 8001102:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001106:	ee26 7b07 	vmul.f64	d7, d6, d7
 800110a:	ec51 0b17 	vmov	r0, r1, d7
 800110e:	f7ff fa9f 	bl	8000650 <__aeabi_d2lz>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	if (Data > 0)
 800111a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800111e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dd24      	ble.n	8001172 <CAN_Send_Double+0xa4>
		Valor = (Valor << 12) | 0x000 | (Precision << 2) | 0x03;
 8001128:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800112c:	f04f 0200 	mov.w	r2, #0
 8001130:	f04f 0300 	mov.w	r3, #0
 8001134:	030b      	lsls	r3, r1, #12
 8001136:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 800113a:	0302      	lsls	r2, r0, #12
 800113c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001140:	0089      	lsls	r1, r1, #2
 8001142:	17c8      	asrs	r0, r1, #31
 8001144:	6239      	str	r1, [r7, #32]
 8001146:	6278      	str	r0, [r7, #36]	; 0x24
 8001148:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800114c:	4621      	mov	r1, r4
 800114e:	4311      	orrs	r1, r2
 8001150:	61b9      	str	r1, [r7, #24]
 8001152:	4629      	mov	r1, r5
 8001154:	4319      	orrs	r1, r3
 8001156:	61f9      	str	r1, [r7, #28]
 8001158:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800115c:	460b      	mov	r3, r1
 800115e:	f043 0303 	orr.w	r3, r3, #3
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4613      	mov	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800116c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 8001170:	e027      	b.n	80011c2 <CAN_Send_Double+0xf4>
	else
		Valor = ((-Valor) << 12) | 0x800 | (Precision << 2) | 0x03;
 8001172:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001176:	2100      	movs	r1, #0
 8001178:	4254      	negs	r4, r2
 800117a:	eb61 0503 	sbc.w	r5, r1, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	032b      	lsls	r3, r5, #12
 8001188:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800118c:	0322      	lsls	r2, r4, #12
 800118e:	f442 6a00 	orr.w	sl, r2, #2048	; 0x800
 8001192:	469b      	mov	fp, r3
 8001194:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	17da      	asrs	r2, r3, #31
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	617a      	str	r2, [r7, #20]
 80011a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80011a4:	460b      	mov	r3, r1
 80011a6:	ea4a 0803 	orr.w	r8, sl, r3
 80011aa:	4613      	mov	r3, r2
 80011ac:	ea4b 0903 	orr.w	r9, fp, r3
 80011b0:	f048 0303 	orr.w	r3, r8, #3
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	f8c7 9004 	str.w	r9, [r7, #4]
 80011ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011be:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

	CAN_TxData(Identifier, Valor);
 80011c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011c6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80011c8:	4608      	mov	r0, r1
 80011ca:	f7ff fcff 	bl	8000bcc <CAN_TxData>
}
 80011ce:	bf00      	nop
 80011d0:	3740      	adds	r7, #64	; 0x40
 80011d2:	46bd      	mov	sp, r7
 80011d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080011d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011dc:	f000 fb72 	bl	80018c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011e0:	f000 f85a 	bl	8001298 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011e4:	f000 f93c 	bl	8001460 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80011e8:	f000 f8d4 	bl	8001394 <MX_FDCAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_Init();
 80011ec:	f7ff fabe 	bl	800076c <CAN_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		CAN_Send(100, INTEIRO_Tx);
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <main+0x9c>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	2064      	movs	r0, #100	; 0x64
 80011f8:	f7ff fea4 	bl	8000f44 <CAN_Send>
		HAL_Delay(10);
 80011fc:	200a      	movs	r0, #10
 80011fe:	f000 fbf3 	bl	80019e8 <HAL_Delay>
		CAN_Send_Float(101, FLOAT_Tx, Precisao_FLOAT);
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <main+0xa0>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	4b1c      	ldr	r3, [pc, #112]	; (800127c <main+0xa4>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	2065      	movs	r0, #101	; 0x65
 8001214:	f7ff fed0 	bl	8000fb8 <CAN_Send_Float>
		HAL_Delay(10);
 8001218:	200a      	movs	r0, #10
 800121a:	f000 fbe5 	bl	80019e8 <HAL_Delay>
		CAN_Send_Double(102, DOUBLE_Tx, Precisao_DOUBLE);
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <main+0xa8>)
 8001220:	ed93 7b00 	vldr	d7, [r3]
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <main+0xac>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	eeb0 0b47 	vmov.f64	d0, d7
 800122e:	2066      	movs	r0, #102	; 0x66
 8001230:	f7ff ff4d 	bl	80010ce <CAN_Send_Double>
		HAL_Delay(10);
 8001234:	200a      	movs	r0, #10
 8001236:	f000 fbd7 	bl	80019e8 <HAL_Delay>
		INTEIRO_Rx = CAN_Get_value(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f7ff fd0c 	bl	8000c58 <CAN_Get_value>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4910      	ldr	r1, [pc, #64]	; (8001288 <main+0xb0>)
 8001246:	e9c1 2300 	strd	r2, r3, [r1]
		FLOAT_Rx = CAN_Get_value_FLOAT(101);
 800124a:	2065      	movs	r0, #101	; 0x65
 800124c:	f7ff fd64 	bl	8000d18 <CAN_Get_value_FLOAT>
 8001250:	eef0 7a40 	vmov.f32	s15, s0
 8001254:	4b0d      	ldr	r3, [pc, #52]	; (800128c <main+0xb4>)
 8001256:	edc3 7a00 	vstr	s15, [r3]
		DOUBLE_Rx = CAN_Get_value_DOUBLE(102);
 800125a:	2066      	movs	r0, #102	; 0x66
 800125c:	f7ff fde4 	bl	8000e28 <CAN_Get_value_DOUBLE>
 8001260:	eeb0 7b40 	vmov.f64	d7, d0
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <main+0xb8>)
 8001266:	ed83 7b00 	vstr	d7, [r3]

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);
 800126a:	2102      	movs	r1, #2
 800126c:	4809      	ldr	r0, [pc, #36]	; (8001294 <main+0xbc>)
 800126e:	f002 f81e 	bl	80032ae <HAL_GPIO_TogglePin>
		CAN_Send(100, INTEIRO_Tx);
 8001272:	e7bd      	b.n	80011f0 <main+0x18>
 8001274:	24000000 	.word	0x24000000
 8001278:	24000008 	.word	0x24000008
 800127c:	2400000c 	.word	0x2400000c
 8001280:	24000010 	.word	0x24000010
 8001284:	24000018 	.word	0x24000018
 8001288:	24000b00 	.word	0x24000b00
 800128c:	24000b08 	.word	0x24000b08
 8001290:	24000b10 	.word	0x24000b10
 8001294:	58021000 	.word	0x58021000

08001298 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b09c      	sub	sp, #112	; 0x70
 800129c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800129e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a2:	224c      	movs	r2, #76	; 0x4c
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 f8a6 	bl	80053f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2220      	movs	r2, #32
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f004 f8a0 	bl	80053f8 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012b8:	2002      	movs	r0, #2
 80012ba:	f002 f813 	bl	80032e4 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <SystemClock_Config+0xf4>)
 80012c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c6:	4a31      	ldr	r2, [pc, #196]	; (800138c <SystemClock_Config+0xf4>)
 80012c8:	f023 0301 	bic.w	r3, r3, #1
 80012cc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <SystemClock_Config+0xf4>)
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <SystemClock_Config+0xf8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e0:	4a2b      	ldr	r2, [pc, #172]	; (8001390 <SystemClock_Config+0xf8>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <SystemClock_Config+0xf8>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80012f4:	bf00      	nop
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <SystemClock_Config+0xf8>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001302:	d1f8      	bne.n	80012f6 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001308:	2301      	movs	r3, #1
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2340      	movs	r3, #64	; 0x40
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001310:	2302      	movs	r3, #2
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001314:	2300      	movs	r3, #0
 8001316:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001318:	2304      	movs	r3, #4
 800131a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 800131c:	230c      	movs	r3, #12
 800131e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8001320:	2302      	movs	r3, #2
 8001322:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001324:	2304      	movs	r3, #4
 8001326:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001328:	2302      	movs	r3, #2
 800132a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800132c:	230c      	movs	r3, #12
 800132e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001330:	2300      	movs	r3, #0
 8001332:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8001334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001338:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4618      	mov	r0, r3
 8001340:	f002 f80a 	bl	8003358 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xb6>
		Error_Handler();
 800134a:	f000 f903 	bl	8001554 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800134e:	233f      	movs	r3, #63	; 0x3f
 8001350:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2303      	movs	r3, #3
 8001354:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2102      	movs	r1, #2
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fc1e 	bl	8003bb4 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xea>
		Error_Handler();
 800137e:	f000 f8e9 	bl	8001554 <Error_Handler>
	}
}
 8001382:	bf00      	nop
 8001384:	3770      	adds	r7, #112	; 0x70
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	58000400 	.word	0x58000400
 8001390:	58024800 	.word	0x58024800

08001394 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 800139a:	4a30      	ldr	r2, [pc, #192]	; (800145c <MX_FDCAN1_Init+0xc8>)
 800139c:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a4:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013a8:	2203      	movs	r2, #3
 80013aa:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 80013ac:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 1;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 7;
 80013c4:	4b24      	ldr	r3, [pc, #144]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013c6:	2207      	movs	r2, #7
 80013c8:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 42;
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013cc:	222a      	movs	r2, #42	; 0x2a
 80013ce:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 27;
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013d2:	221b      	movs	r2, #27
 80013d4:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 2;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013d8:	2202      	movs	r2, #2
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 12;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013de:	220c      	movs	r2, #12
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 12;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013e4:	220c      	movs	r2, #12
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 12;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013ea:	220c      	movs	r2, #12
 80013ec:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 8001402:	2201      	movs	r2, #1
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 8001408:	2204      	movs	r2, #4
 800140a:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 800140e:	2200      	movs	r2, #0
 8001410:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 8001414:	2204      	movs	r2, #4
 8001416:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 800141a:	2200      	movs	r2, #0
 800141c:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800141e:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 8001420:	2204      	movs	r2, #4
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 8001426:	2200      	movs	r2, #0
 8001428:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 800142c:	2200      	movs	r2, #0
 800142e:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 8001432:	2201      	movs	r2, #1
 8001434:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 8001438:	2200      	movs	r2, #0
 800143a:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 800143e:	2204      	movs	r2, #4
 8001440:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_FDCAN1_Init+0xc4>)
 8001444:	f000 fc10 	bl	8001c68 <HAL_FDCAN_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_FDCAN1_Init+0xbe>
		Error_Handler();
 800144e:	f000 f881 	bl	8001554 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	24000a60 	.word	0x24000a60
 800145c:	4000a000 	.word	0x4000a000

08001460 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <MX_GPIO_Init+0xe8>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a32      	ldr	r2, [pc, #200]	; (8001548 <MX_GPIO_Init+0xe8>)
 800147e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <MX_GPIO_Init+0xe8>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <MX_GPIO_Init+0xe8>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <MX_GPIO_Init+0xe8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <MX_GPIO_Init+0xe8>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <MX_GPIO_Init+0xe8>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a23      	ldr	r2, [pc, #140]	; (8001548 <MX_GPIO_Init+0xe8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b21      	ldr	r3, [pc, #132]	; (8001548 <MX_GPIO_Init+0xe8>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80014d0:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <MX_GPIO_Init+0xe8>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a1c      	ldr	r2, [pc, #112]	; (8001548 <MX_GPIO_Init+0xe8>)
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <MX_GPIO_Init+0xe8>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f244 0101 	movw	r1, #16385	; 0x4001
 80014f4:	4815      	ldr	r0, [pc, #84]	; (800154c <MX_GPIO_Init+0xec>)
 80014f6:	f001 fec1 	bl	800327c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2102      	movs	r1, #2
 80014fe:	4814      	ldr	r0, [pc, #80]	; (8001550 <MX_GPIO_Init+0xf0>)
 8001500:	f001 febc 	bl	800327c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14;
 8001504:	f244 0301 	movw	r3, #16385	; 0x4001
 8001508:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 0314 	add.w	r3, r7, #20
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <MX_GPIO_Init+0xec>)
 800151e:	f001 fcfd 	bl	8002f1c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001522:	2302      	movs	r3, #2
 8001524:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_GPIO_Init+0xf0>)
 800153a:	f001 fcef 	bl	8002f1c <HAL_GPIO_Init>

}
 800153e:	bf00      	nop
 8001540:	3728      	adds	r7, #40	; 0x28
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	58024400 	.word	0x58024400
 800154c:	58020400 	.word	0x58020400
 8001550:	58021000 	.word	0x58021000

08001554 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800155c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001560:	4801      	ldr	r0, [pc, #4]	; (8001568 <Error_Handler+0x14>)
 8001562:	f001 fea4 	bl	80032ae <HAL_GPIO_TogglePin>
 8001566:	e7f9      	b.n	800155c <Error_Handler+0x8>
 8001568:	58020400 	.word	0x58020400

0800156c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001572:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_MspInit+0x30>)
 8001574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001578:	4a08      	ldr	r2, [pc, #32]	; (800159c <HAL_MspInit+0x30>)
 800157a:	f043 0302 	orr.w	r3, r3, #2
 800157e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_MspInit+0x30>)
 8001584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	58024400 	.word	0x58024400

080015a0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b0b8      	sub	sp, #224	; 0xe0
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	22bc      	movs	r2, #188	; 0xbc
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 ff19 	bl	80053f8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a29      	ldr	r2, [pc, #164]	; (8001670 <HAL_FDCAN_MspInit+0xd0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d14b      	bne.n	8001668 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80015d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80015d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015da:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4618      	mov	r0, r3
 80015e2:	f002 fe17 	bl	8004214 <HAL_RCCEx_PeriphCLKConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80015ec:	f7ff ffb2 	bl	8001554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80015f0:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_FDCAN_MspInit+0xd4>)
 80015f2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015f6:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <HAL_FDCAN_MspInit+0xd4>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_FDCAN_MspInit+0xd4>)
 8001602:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_FDCAN_MspInit+0xd4>)
 8001610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001614:	4a17      	ldr	r2, [pc, #92]	; (8001674 <HAL_FDCAN_MspInit+0xd4>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_FDCAN_MspInit+0xd4>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800162c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001630:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001646:	2309      	movs	r3, #9
 8001648:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001650:	4619      	mov	r1, r3
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <HAL_FDCAN_MspInit+0xd8>)
 8001654:	f001 fc62 	bl	8002f1c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	2013      	movs	r0, #19
 800165e:	f000 face 	bl	8001bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001662:	2013      	movs	r0, #19
 8001664:	f000 fae5 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	37e0      	adds	r7, #224	; 0xe0
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	4000a000 	.word	0x4000a000
 8001674:	58024400 	.word	0x58024400
 8001678:	58020000 	.word	0x58020000

0800167c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <NMI_Handler+0x4>
	...

08001684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168c:	4801      	ldr	r0, [pc, #4]	; (8001694 <HardFault_Handler+0x10>)
 800168e:	f001 fe0e 	bl	80032ae <HAL_GPIO_TogglePin>
 8001692:	e7f9      	b.n	8001688 <HardFault_Handler+0x4>
 8001694:	58020400 	.word	0x58020400

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f966 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <FDCAN1_IT0_IRQHandler+0x10>)
 80016e6:	f000 ff0b 	bl	8002500 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	24000a60 	.word	0x24000a60

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f003 fe20 	bl	8005368 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	24080000 	.word	0x24080000
 8001754:	00000400 	.word	0x00000400
 8001758:	24000b18 	.word	0x24000b18
 800175c:	24000b30 	.word	0x24000b30

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001764:	4b37      	ldr	r3, [pc, #220]	; (8001844 <SystemInit+0xe4>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a36      	ldr	r2, [pc, #216]	; (8001844 <SystemInit+0xe4>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001774:	4b34      	ldr	r3, [pc, #208]	; (8001848 <SystemInit+0xe8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	2b06      	cmp	r3, #6
 800177e:	d807      	bhi.n	8001790 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001780:	4b31      	ldr	r3, [pc, #196]	; (8001848 <SystemInit+0xe8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 030f 	bic.w	r3, r3, #15
 8001788:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <SystemInit+0xe8>)
 800178a:	f043 0307 	orr.w	r3, r3, #7
 800178e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <SystemInit+0xec>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2d      	ldr	r2, [pc, #180]	; (800184c <SystemInit+0xec>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <SystemInit+0xec>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017a2:	4b2a      	ldr	r3, [pc, #168]	; (800184c <SystemInit+0xec>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4929      	ldr	r1, [pc, #164]	; (800184c <SystemInit+0xec>)
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <SystemInit+0xf0>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <SystemInit+0xe8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <SystemInit+0xe8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 030f 	bic.w	r3, r3, #15
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <SystemInit+0xe8>)
 80017c4:	f043 0307 	orr.w	r3, r3, #7
 80017c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <SystemInit+0xec>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <SystemInit+0xec>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017d6:	4b1d      	ldr	r3, [pc, #116]	; (800184c <SystemInit+0xec>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <SystemInit+0xec>)
 80017de:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <SystemInit+0xf4>)
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <SystemInit+0xec>)
 80017e4:	4a1c      	ldr	r2, [pc, #112]	; (8001858 <SystemInit+0xf8>)
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <SystemInit+0xec>)
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <SystemInit+0xfc>)
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <SystemInit+0xec>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <SystemInit+0xec>)
 80017f6:	4a19      	ldr	r2, [pc, #100]	; (800185c <SystemInit+0xfc>)
 80017f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <SystemInit+0xec>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <SystemInit+0xec>)
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <SystemInit+0xfc>)
 8001804:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <SystemInit+0xec>)
 8001808:	2200      	movs	r2, #0
 800180a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <SystemInit+0xec>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0e      	ldr	r2, [pc, #56]	; (800184c <SystemInit+0xec>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <SystemInit+0xec>)
 800181a:	2200      	movs	r2, #0
 800181c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <SystemInit+0x100>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <SystemInit+0x104>)
 8001824:	4013      	ands	r3, r2
 8001826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800182a:	d202      	bcs.n	8001832 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <SystemInit+0x108>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <SystemInit+0x10c>)
 8001834:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001838:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00
 8001848:	52002000 	.word	0x52002000
 800184c:	58024400 	.word	0x58024400
 8001850:	eaf6ed7f 	.word	0xeaf6ed7f
 8001854:	02020200 	.word	0x02020200
 8001858:	01ff0000 	.word	0x01ff0000
 800185c:	01010280 	.word	0x01010280
 8001860:	5c001000 	.word	0x5c001000
 8001864:	ffff0000 	.word	0xffff0000
 8001868:	51008108 	.word	0x51008108
 800186c:	52004000 	.word	0x52004000

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001874:	f7ff ff74 	bl	8001760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	; (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	; (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	; (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189e:	f003 fd69 	bl	8005374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7ff fc99 	bl	80011d8 <main>
  bx  lr
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018b0:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 80018b4:	08007540 	.word	0x08007540
  ldr r2, =_sbss
 80018b8:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 80018bc:	24000b30 	.word	0x24000b30

080018c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC3_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ca:	2003      	movs	r0, #3
 80018cc:	f000 f98c 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018d0:	f002 fb26 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_Init+0x68>)
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	0a1b      	lsrs	r3, r3, #8
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	4913      	ldr	r1, [pc, #76]	; (8001930 <HAL_Init+0x6c>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <HAL_Init+0x68>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_Init+0x6c>)
 80018f8:	5cd3      	ldrb	r3, [r2, r3]
 80018fa:	f003 031f 	and.w	r3, r3, #31
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_Init+0x70>)
 8001906:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001908:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <HAL_Init+0x74>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190e:	200f      	movs	r0, #15
 8001910:	f000 f814 	bl	800193c <HAL_InitTick>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e002      	b.n	8001924 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800191e:	f7ff fe25 	bl	800156c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	58024400 	.word	0x58024400
 8001930:	08005c5c 	.word	0x08005c5c
 8001934:	24000020 	.word	0x24000020
 8001938:	2400001c 	.word	0x2400001c

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <HAL_InitTick+0x60>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e021      	b.n	8001994 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_InitTick+0x64>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <HAL_InitTick+0x60>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f971 	bl	8001c4e <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f93b 	bl	8001bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_InitTick+0x68>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	24000028 	.word	0x24000028
 80019a0:	2400001c 	.word	0x2400001c
 80019a4:	24000024 	.word	0x24000024

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	24000028 	.word	0x24000028
 80019cc:	24000b1c 	.word	0x24000b1c

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	24000b1c 	.word	0x24000b1c

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	24000028 	.word	0x24000028

08001a30 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_GetREVID+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	0c1b      	lsrs	r3, r3, #16
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	5c001000 	.word	0x5c001000

08001a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <__NVIC_SetPriorityGrouping+0x40>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a64:	4013      	ands	r3, r2
 8001a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <__NVIC_SetPriorityGrouping+0x44>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x40>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00
 8001a8c:	05fa0000 	.word	0x05fa0000

08001a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	0a1b      	lsrs	r3, r3, #8
 8001a9a:	f003 0307 	and.w	r3, r3, #7
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ab6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	db0b      	blt.n	8001ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	f003 021f 	and.w	r2, r3, #31
 8001ac4:	4907      	ldr	r1, [pc, #28]	; (8001ae4 <__NVIC_EnableIRQ+0x38>)
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	2001      	movs	r0, #1
 8001ace:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
         );
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	; 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff29 	bl	8001a48 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff40 	bl	8001a90 <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff90 	bl	8001b3c <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5f 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff33 	bl	8001aac <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa4 	bl	8001ba4 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b098      	sub	sp, #96	; 0x60
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001c70:	4a84      	ldr	r2, [pc, #528]	; (8001e84 <HAL_FDCAN_Init+0x21c>)
 8001c72:	f107 030c 	add.w	r3, r7, #12
 8001c76:	4611      	mov	r1, r2
 8001c78:	224c      	movs	r2, #76	; 0x4c
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 fbae 	bl	80053dc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1c6      	b.n	8002018 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7e      	ldr	r2, [pc, #504]	; (8001e88 <HAL_FDCAN_Init+0x220>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d106      	bne.n	8001ca2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d106      	bne.n	8001cbc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff fc72 	bl	80015a0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0210 	bic.w	r2, r2, #16
 8001cca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff fe80 	bl	80019d0 <HAL_GetTick>
 8001cd0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001cd2:	e014      	b.n	8001cfe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001cd4:	f7ff fe7c 	bl	80019d0 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	d90d      	bls.n	8001cfe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e18c      	b.n	8002018 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d0e3      	beq.n	8001cd4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1c:	f7ff fe58 	bl	80019d0 <HAL_GetTick>
 8001d20:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001d22:	e014      	b.n	8001d4e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001d24:	f7ff fe54 	bl	80019d0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b0a      	cmp	r3, #10
 8001d30:	d90d      	bls.n	8001d4e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e164      	b.n	8002018 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0e3      	beq.n	8001d24 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699a      	ldr	r2, [r3, #24]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0202 	orr.w	r2, r2, #2
 8001d6a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7c1b      	ldrb	r3, [r3, #16]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d108      	bne.n	8001d86 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d82:	619a      	str	r2, [r3, #24]
 8001d84:	e007      	b.n	8001d96 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d94:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	7c5b      	ldrb	r3, [r3, #17]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d108      	bne.n	8001db0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	e007      	b.n	8001dc0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dbe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7c9b      	ldrb	r3, [r3, #18]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d108      	bne.n	8001dda <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699a      	ldr	r2, [r3, #24]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dd6:	619a      	str	r2, [r3, #24]
 8001dd8:	e007      	b.n	8001dea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	699a      	ldr	r2, [r3, #24]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001de8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001e0e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0210 	bic.w	r2, r2, #16
 8001e1e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0204 	orr.w	r2, r2, #4
 8001e36:	619a      	str	r2, [r3, #24]
 8001e38:	e030      	b.n	8001e9c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d02c      	beq.n	8001e9c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d020      	beq.n	8001e8c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e58:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0210 	orr.w	r2, r2, #16
 8001e68:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d114      	bne.n	8001e9c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699a      	ldr	r2, [r3, #24]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0220 	orr.w	r2, r2, #32
 8001e80:	619a      	str	r2, [r3, #24]
 8001e82:	e00b      	b.n	8001e9c <HAL_FDCAN_Init+0x234>
 8001e84:	08005c10 	.word	0x08005c10
 8001e88:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0220 	orr.w	r2, r2, #32
 8001e9a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001eac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001eb4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001ec4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ec6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ed0:	d115      	bne.n	8001efe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	3b01      	subs	r3, #1
 8001ede:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001ee0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001eea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001efa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001efc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00a      	beq.n	8001f1c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f24:	4413      	add	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d011      	beq.n	8001f4e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001f32:	f023 0107 	bic.w	r1, r3, #7
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	3360      	adds	r3, #96	; 0x60
 8001f3e:	443b      	add	r3, r7
 8001f40:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d011      	beq.n	8001f7a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001f5e:	f023 0107 	bic.w	r1, r3, #7
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	3360      	adds	r3, #96	; 0x60
 8001f6a:	443b      	add	r3, r7
 8001f6c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001f8a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	3360      	adds	r3, #96	; 0x60
 8001f96:	443b      	add	r3, r7
 8001f98:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001f9c:	011a      	lsls	r2, r3, #4
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d012      	beq.n	8001fd6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001fb8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	3360      	adds	r3, #96	; 0x60
 8001fc4:	443b      	add	r3, r7
 8001fc6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001fca:	021a      	lsls	r2, r3, #8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <HAL_FDCAN_Init+0x3b8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d107      	bne.n	8001ff0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f022 0203 	bic.w	r2, r2, #3
 8001fee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fd83 	bl	8002b14 <FDCAN_CalcultateRamBlockAddresses>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8002014:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8002018:	4618      	mov	r0, r3
 800201a:	3760      	adds	r7, #96	; 0x60
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	4000a000 	.word	0x4000a000

08002024 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d111      	bne.n	800205c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e008      	b.n	800206e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002062:	f043 0204 	orr.w	r2, r3, #4
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
  }
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d141      	bne.n	8002116 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800209a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020a8:	f043 0220 	orr.w	r2, r3, #32
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e038      	b.n	8002128 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e026      	b.n	8002128 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 fe95 	bl	8002e20 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2101      	movs	r1, #1
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002102:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002106:	2201      	movs	r2, #1
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e008      	b.n	8002128 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800211c:	f043 0208 	orr.w	r2, r3, #8
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
  }
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002130:	b480      	push	{r7}
 8002132:	b08b      	sub	sp, #44	; 0x2c
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002148:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800214a:	7efb      	ldrb	r3, [r7, #27]
 800214c:	2b02      	cmp	r3, #2
 800214e:	f040 814b 	bne.w	80023e8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d14d      	bne.n	80021f4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002160:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d109      	bne.n	800217c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e13e      	b.n	80023fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002192:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e12c      	b.n	80023fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021a8:	0e1b      	lsrs	r3, r3, #24
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d10b      	bne.n	80021ca <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80021ba:	0fdb      	lsrs	r3, r3, #31
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021c4:	d101      	bne.n	80021ca <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	4413      	add	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	69f9      	ldr	r1, [r7, #28]
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e069      	b.n	80022c8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b41      	cmp	r3, #65	; 0x41
 80021f8:	d14d      	bne.n	8002296 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002202:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e0ed      	b.n	80023fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002234:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0db      	b.n	80023fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800224a:	0e1b      	lsrs	r3, r3, #24
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d10b      	bne.n	800226c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800225c:	0fdb      	lsrs	r3, r3, #31
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002266:	d101      	bne.n	800226c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002268:	2301      	movs	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	69f9      	ldr	r1, [r7, #28]
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
 8002294:	e018      	b.n	80022c8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	429a      	cmp	r2, r3
 800229e:	d309      	bcc.n	80022b4 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0a2      	b.n	80023fa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0c9b      	lsrs	r3, r3, #18
 80022e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	e005      	b.n	80022f8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	3304      	adds	r3, #4
 8002314:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29a      	uxth	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0e1b      	lsrs	r3, r3, #24
 800234a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0fda      	lsrs	r2, r3, #31
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	3304      	adds	r3, #4
 8002360:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	e00a      	b.n	8002382 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	441a      	add	r2, r3
 8002372:	6839      	ldr	r1, [r7, #0]
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	440b      	add	r3, r1
 8002378:	7812      	ldrb	r2, [r2, #0]
 800237a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	3301      	adds	r3, #1
 8002380:	623b      	str	r3, [r7, #32]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	0c1b      	lsrs	r3, r3, #16
 8002388:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	461a      	mov	r2, r3
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	4293      	cmp	r3, r2
 8002392:	d3eb      	bcc.n	800236c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d105      	bne.n	80023a6 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80023a4:	e01e      	b.n	80023e4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b41      	cmp	r3, #65	; 0x41
 80023aa:	d105      	bne.n	80023b8 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80023b6:	e015      	b.n	80023e4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b1f      	cmp	r3, #31
 80023bc:	d808      	bhi.n	80023d0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2101      	movs	r1, #1
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80023ce:	e009      	b.n	80023e4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 021f 	and.w	r2, r3, #31
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	fa01 f202 	lsl.w	r2, r1, r2
 80023e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e008      	b.n	80023fa <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ee:	f043 0208 	orr.w	r2, r3, #8
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	372c      	adds	r7, #44	; 0x2c
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	08005c6c 	.word	0x08005c6c

0800240c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800241e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002420:	7dfb      	ldrb	r3, [r7, #23]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d002      	beq.n	800242c <HAL_FDCAN_ActivateNotification+0x20>
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b02      	cmp	r3, #2
 800242a:	d155      	bne.n	80024d8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d108      	bne.n	800244c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0201 	orr.w	r2, r2, #1
 8002448:	65da      	str	r2, [r3, #92]	; 0x5c
 800244a:	e014      	b.n	8002476 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	429a      	cmp	r2, r3
 800245a:	d108      	bne.n	800246e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0202 	orr.w	r2, r2, #2
 800246a:	65da      	str	r2, [r3, #92]	; 0x5c
 800246c:	e003      	b.n	8002476 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2203      	movs	r2, #3
 8002474:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	430a      	orrs	r2, r1
 8002490:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <HAL_FDCAN_ActivateNotification+0xec>)
 80024bc:	4013      	ands	r3, r2
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	430b      	orrs	r3, r1
 80024c4:	6553      	str	r3, [r2, #84]	; 0x54
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	0f9b      	lsrs	r3, r3, #30
 80024ce:	490b      	ldr	r1, [pc, #44]	; (80024fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e008      	b.n	80024ea <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024de:	f043 0202 	orr.w	r2, r3, #2
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	3fcfffff 	.word	0x3fcfffff
 80024fc:	4000a800 	.word	0x4000a800

08002500 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b096      	sub	sp, #88	; 0x58
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8002508:	4b9a      	ldr	r3, [pc, #616]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	079b      	lsls	r3, r3, #30
 800250e:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002510:	4b98      	ldr	r3, [pc, #608]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	079b      	lsls	r3, r3, #30
 8002516:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002518:	4013      	ands	r3, r2
 800251a:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002522:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002526:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002530:	4013      	ands	r3, r2
 8002532:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002548:	4013      	ands	r3, r2
 800254a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002556:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002560:	4013      	ands	r3, r2
 8002562:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002578:	4013      	ands	r3, r2
 800257a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002582:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8002586:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002590:	4013      	ands	r3, r2
 8002592:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80025a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80025b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00a      	beq.n	80025d2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025c4:	651a      	str	r2, [r3, #80]	; 0x50
 80025c6:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fa54 	bl	8002a7a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80025d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d4:	0a9b      	lsrs	r3, r3, #10
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01d      	beq.n	800261a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	0a9b      	lsrs	r3, r3, #10
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d017      	beq.n	800261a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80025f2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80025fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025fe:	4013      	ands	r3, r2
 8002600:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800260a:	651a      	str	r2, [r3, #80]	; 0x50
 800260c:	4b59      	ldr	r3, [pc, #356]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002612:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 fa07 	bl	8002a28 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800261a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00d      	beq.n	800263c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002626:	4b54      	ldr	r3, [pc, #336]	; (8002778 <HAL_FDCAN_IRQHandler+0x278>)
 8002628:	400b      	ands	r3, r1
 800262a:	6513      	str	r3, [r2, #80]	; 0x50
 800262c:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 800262e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002630:	0f9b      	lsrs	r3, r3, #30
 8002632:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002634:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f9c0 	bl	80029bc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800263c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_FDCAN_IRQHandler+0x278>)
 800264a:	400b      	ands	r3, r1
 800264c:	6513      	str	r3, [r2, #80]	; 0x50
 800264e:	4a49      	ldr	r2, [pc, #292]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 8002650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002652:	0f9b      	lsrs	r3, r3, #30
 8002654:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002656:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f9ba 	bl	80029d2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800265e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00d      	beq.n	8002680 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_FDCAN_IRQHandler+0x278>)
 800266c:	400b      	ands	r3, r1
 800266e:	6513      	str	r3, [r2, #80]	; 0x50
 8002670:	4a40      	ldr	r2, [pc, #256]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 8002672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002674:	0f9b      	lsrs	r3, r3, #30
 8002676:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002678:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe f820 	bl	80006c0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00d      	beq.n	80026a2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_FDCAN_IRQHandler+0x278>)
 800268e:	400b      	ands	r3, r1
 8002690:	6513      	str	r3, [r2, #80]	; 0x50
 8002692:	4a38      	ldr	r2, [pc, #224]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 8002694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002696:	0f9b      	lsrs	r3, r3, #30
 8002698:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800269a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f9a3 	bl	80029e8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80026a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026a4:	0adb      	lsrs	r3, r3, #11
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d010      	beq.n	80026d0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	0adb      	lsrs	r3, r3, #11
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026c2:	651a      	str	r2, [r3, #80]	; 0x50
 80026c4:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f997 	bl	80029fe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80026d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01d      	beq.n	8002718 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	0a5b      	lsrs	r3, r3, #9
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d017      	beq.n	8002718 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026fc:	4013      	ands	r3, r2
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002708:	651a      	str	r2, [r3, #80]	; 0x50
 800270a:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f97d 	bl	8002a12 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271a:	0cdb      	lsrs	r3, r3, #19
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002726:	0cdb      	lsrs	r3, r3, #19
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002738:	651a      	str	r2, [r3, #80]	; 0x50
 800273a:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f97c 	bl	8002a3e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	0c1b      	lsrs	r3, r3, #16
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002766:	651a      	str	r2, [r3, #80]	; 0x50
 8002768:	4b02      	ldr	r3, [pc, #8]	; (8002774 <HAL_FDCAN_IRQHandler+0x274>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	e004      	b.n	800277c <HAL_FDCAN_IRQHandler+0x27c>
 8002772:	bf00      	nop
 8002774:	4000a800 	.word	0x4000a800
 8002778:	3fcfffff 	.word	0x3fcfffff
 800277c:	f000 f969 	bl	8002a52 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002782:	0c9b      	lsrs	r3, r3, #18
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80027a0:	651a      	str	r2, [r3, #80]	; 0x50
 80027a2:	4b83      	ldr	r3, [pc, #524]	; (80029b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f95c 	bl	8002a66 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80027ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b0:	0c5b      	lsrs	r3, r3, #17
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d015      	beq.n	80027e6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	0c5b      	lsrs	r3, r3, #17
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00f      	beq.n	80027e6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ce:	651a      	str	r2, [r3, #80]	; 0x50
 80027d0:	4b77      	ldr	r3, [pc, #476]	; (80029b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80027e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00d      	beq.n	8002808 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80027f2:	4b70      	ldr	r3, [pc, #448]	; (80029b4 <HAL_FDCAN_IRQHandler+0x4b4>)
 80027f4:	400b      	ands	r3, r1
 80027f6:	6513      	str	r3, [r2, #80]	; 0x50
 80027f8:	4a6d      	ldr	r2, [pc, #436]	; (80029b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80027fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fc:	0f9b      	lsrs	r3, r3, #30
 80027fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002800:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f94d 	bl	8002aa2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280a:	2b00      	cmp	r3, #0
 800280c:	d011      	beq.n	8002832 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002814:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002816:	400b      	ands	r3, r1
 8002818:	6513      	str	r3, [r2, #80]	; 0x50
 800281a:	4a65      	ldr	r2, [pc, #404]	; (80029b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800281c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281e:	0f9b      	lsrs	r3, r3, #30
 8002820:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a60      	ldr	r2, [pc, #384]	; (80029b8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	f040 80ac 	bne.w	8002996 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 80a4 	beq.w	8002996 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 030f 	and.w	r3, r3, #15
 8002858:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002862:	4013      	ands	r3, r2
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800287a:	4013      	ands	r3, r2
 800287c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002892:	4013      	ands	r3, r2
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80028a0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	4013      	ands	r3, r2
 80028ac:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80028b8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d007      	beq.n	80028ec <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028e2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80028e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8e6 	bl	8002ab8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80028fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8e6 	bl	8002ace <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01a      	beq.n	8002944 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d014      	beq.n	8002944 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	b29b      	uxth	r3, r3
 8002924:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002930:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	6939      	ldr	r1, [r7, #16]
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8d0 	bl	8002ae4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002950:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8d1 	bl	8002afc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	6a3a      	ldr	r2, [r7, #32]
 8002966:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f874 	bl	8002a8e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80029a6:	bf00      	nop
 80029a8:	3758      	adds	r7, #88	; 0x58
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	4000a800 	.word	0x4000a800
 80029b4:	3fcfffff 	.word	0x3fcfffff
 80029b8:	4000a000 	.word	0x4000a000

080029bc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b2a:	4ba7      	ldr	r3, [pc, #668]	; (8002dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	0091      	lsls	r1, r2, #2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	430b      	orrs	r3, r1
 8002b38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b44:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4c:	041a      	lsls	r2, r3, #16
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	68ba      	ldr	r2, [r7, #8]
 8002b5e:	4413      	add	r3, r2
 8002b60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b6a:	4b97      	ldr	r3, [pc, #604]	; (8002dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	0091      	lsls	r1, r2, #2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b84:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	041a      	lsls	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002bac:	4b86      	ldr	r3, [pc, #536]	; (8002dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	0091      	lsls	r1, r2, #2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bc6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	041a      	lsls	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	4413      	add	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bf4:	4b74      	ldr	r3, [pc, #464]	; (8002dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	0091      	lsls	r1, r2, #2
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	430b      	orrs	r3, r1
 8002c02:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c16:	041a      	lsls	r2, r3, #16
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002c3c:	4b62      	ldr	r3, [pc, #392]	; (8002dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	0091      	lsls	r1, r2, #2
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002c68:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	0091      	lsls	r1, r2, #2
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c82:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	041a      	lsls	r2, r3, #16
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002caa:	4b47      	ldr	r3, [pc, #284]	; (8002dc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	0091      	lsls	r1, r2, #2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cc4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	041a      	lsls	r2, r3, #16
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002ce0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	061a      	lsls	r2, r3, #24
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cf8:	4b34      	ldr	r3, [pc, #208]	; (8002dcc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009a      	lsls	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	441a      	add	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	441a      	add	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	441a      	add	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	441a      	add	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	441a      	add	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	441a      	add	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d915      	bls.n	8002df0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002dc4:	e006      	b.n	8002dd4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002dc6:	bf00      	nop
 8002dc8:	ffff0003 	.word	0xffff0003
 8002dcc:	10002b00 	.word	0x10002b00
 8002dd0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2203      	movs	r2, #3
 8002de8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e010      	b.n	8002e12 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002df4:	60fb      	str	r3, [r7, #12]
 8002df6:	e005      	b.n	8002e04 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3304      	adds	r3, #4
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d3f3      	bcc.n	8002df8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop

08002e20 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	; 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002e3e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	e00a      	b.n	8002e62 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002e54:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002e5a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e60:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002e6c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002e72:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002e78:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e8c:	6839      	ldr	r1, [r7, #0]
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	3304      	adds	r3, #4
 8002eae:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e020      	b.n	8002ef8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3303      	adds	r3, #3
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	440b      	add	r3, r1
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002ece:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	440b      	add	r3, r1
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002edc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	440a      	add	r2, r1
 8002ee4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002ee6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	4a06      	ldr	r2, [pc, #24]	; (8002f18 <FDCAN_CopyMessageToRAM+0xf8>)
 8002f00:	5cd3      	ldrb	r3, [r2, r3]
 8002f02:	461a      	mov	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d3d5      	bcc.n	8002eb6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3724      	adds	r7, #36	; 0x24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	08005c6c 	.word	0x08005c6c

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f2a:	4b89      	ldr	r3, [pc, #548]	; (8003150 <HAL_GPIO_Init+0x234>)
 8002f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f2e:	e194      	b.n	800325a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2101      	movs	r1, #1
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8186 	beq.w	8003254 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d005      	beq.n	8002f60 <HAL_GPIO_Init+0x44>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d130      	bne.n	8002fc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	43db      	mvns	r3, r3
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	4013      	ands	r3, r2
 8002f76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f96:	2201      	movs	r2, #1
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	f003 0201 	and.w	r2, r3, #1
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d017      	beq.n	8002ffe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d123      	bne.n	8003052 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	08da      	lsrs	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3208      	adds	r2, #8
 8003012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	220f      	movs	r2, #15
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	08da      	lsrs	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3208      	adds	r2, #8
 800304c:	69b9      	ldr	r1, [r7, #24]
 800304e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0203 	and.w	r2, r3, #3
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80e0 	beq.w	8003254 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003094:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_GPIO_Init+0x238>)
 8003096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800309a:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <HAL_GPIO_Init+0x238>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030a4:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <HAL_GPIO_Init+0x238>)
 80030a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030b2:	4a29      	ldr	r2, [pc, #164]	; (8003158 <HAL_GPIO_Init+0x23c>)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	3302      	adds	r3, #2
 80030ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	220f      	movs	r2, #15
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a20      	ldr	r2, [pc, #128]	; (800315c <HAL_GPIO_Init+0x240>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d052      	beq.n	8003184 <HAL_GPIO_Init+0x268>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_GPIO_Init+0x244>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d031      	beq.n	800314a <HAL_GPIO_Init+0x22e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1e      	ldr	r2, [pc, #120]	; (8003164 <HAL_GPIO_Init+0x248>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02b      	beq.n	8003146 <HAL_GPIO_Init+0x22a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1d      	ldr	r2, [pc, #116]	; (8003168 <HAL_GPIO_Init+0x24c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d025      	beq.n	8003142 <HAL_GPIO_Init+0x226>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_GPIO_Init+0x250>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01f      	beq.n	800313e <HAL_GPIO_Init+0x222>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <HAL_GPIO_Init+0x254>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d019      	beq.n	800313a <HAL_GPIO_Init+0x21e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_GPIO_Init+0x258>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_GPIO_Init+0x21a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a19      	ldr	r2, [pc, #100]	; (8003178 <HAL_GPIO_Init+0x25c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00d      	beq.n	8003132 <HAL_GPIO_Init+0x216>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_GPIO_Init+0x260>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <HAL_GPIO_Init+0x212>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_GPIO_Init+0x264>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_GPIO_Init+0x20e>
 8003126:	2309      	movs	r3, #9
 8003128:	e02d      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 800312a:	230a      	movs	r3, #10
 800312c:	e02b      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 800312e:	2308      	movs	r3, #8
 8003130:	e029      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 8003132:	2307      	movs	r3, #7
 8003134:	e027      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 8003136:	2306      	movs	r3, #6
 8003138:	e025      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 800313a:	2305      	movs	r3, #5
 800313c:	e023      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 800313e:	2304      	movs	r3, #4
 8003140:	e021      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 8003142:	2303      	movs	r3, #3
 8003144:	e01f      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 8003146:	2302      	movs	r3, #2
 8003148:	e01d      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 800314a:	2301      	movs	r3, #1
 800314c:	e01b      	b.n	8003186 <HAL_GPIO_Init+0x26a>
 800314e:	bf00      	nop
 8003150:	58000080 	.word	0x58000080
 8003154:	58024400 	.word	0x58024400
 8003158:	58000400 	.word	0x58000400
 800315c:	58020000 	.word	0x58020000
 8003160:	58020400 	.word	0x58020400
 8003164:	58020800 	.word	0x58020800
 8003168:	58020c00 	.word	0x58020c00
 800316c:	58021000 	.word	0x58021000
 8003170:	58021400 	.word	0x58021400
 8003174:	58021800 	.word	0x58021800
 8003178:	58021c00 	.word	0x58021c00
 800317c:	58022000 	.word	0x58022000
 8003180:	58022400 	.word	0x58022400
 8003184:	2300      	movs	r3, #0
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	f002 0203 	and.w	r2, r2, #3
 800318c:	0092      	lsls	r2, r2, #2
 800318e:	4093      	lsls	r3, r2
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003196:	4938      	ldr	r1, [pc, #224]	; (8003278 <HAL_GPIO_Init+0x35c>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80031f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	3301      	adds	r3, #1
 8003258:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	f47f ae63 	bne.w	8002f30 <HAL_GPIO_Init+0x14>
  }
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	3724      	adds	r7, #36	; 0x24
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	58000400 	.word	0x58000400

0800327c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	460b      	mov	r3, r1
 8003286:	807b      	strh	r3, [r7, #2]
 8003288:	4613      	mov	r3, r2
 800328a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800328c:	787b      	ldrb	r3, [r7, #1]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003292:	887a      	ldrh	r2, [r7, #2]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003298:	e003      	b.n	80032a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800329a:	887b      	ldrh	r3, [r7, #2]
 800329c:	041a      	lsls	r2, r3, #16
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	619a      	str	r2, [r3, #24]
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b085      	sub	sp, #20
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032c0:	887a      	ldrh	r2, [r7, #2]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	041a      	lsls	r2, r3, #16
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	43d9      	mvns	r1, r3
 80032cc:	887b      	ldrh	r3, [r7, #2]
 80032ce:	400b      	ands	r3, r1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	619a      	str	r2, [r3, #24]
}
 80032d6:	bf00      	nop
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032ec:	4b19      	ldr	r3, [pc, #100]	; (8003354 <HAL_PWREx_ConfigSupply+0x70>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d00a      	beq.n	800330e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032f8:	4b16      	ldr	r3, [pc, #88]	; (8003354 <HAL_PWREx_ConfigSupply+0x70>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	429a      	cmp	r2, r3
 8003304:	d001      	beq.n	800330a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e01f      	b.n	800334a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e01d      	b.n	800334a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800330e:	4b11      	ldr	r3, [pc, #68]	; (8003354 <HAL_PWREx_ConfigSupply+0x70>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f023 0207 	bic.w	r2, r3, #7
 8003316:	490f      	ldr	r1, [pc, #60]	; (8003354 <HAL_PWREx_ConfigSupply+0x70>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4313      	orrs	r3, r2
 800331c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800331e:	f7fe fb57 	bl	80019d0 <HAL_GetTick>
 8003322:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003324:	e009      	b.n	800333a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003326:	f7fe fb53 	bl	80019d0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003334:	d901      	bls.n	800333a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e007      	b.n	800334a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800333a:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_PWREx_ConfigSupply+0x70>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003346:	d1ee      	bne.n	8003326 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	58024800 	.word	0x58024800

08003358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	f000 bc1d 	b.w	8003ba6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8087 	beq.w	8003488 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800337a:	4b99      	ldr	r3, [pc, #612]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003382:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003384:	4b96      	ldr	r3, [pc, #600]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	2b10      	cmp	r3, #16
 800338e:	d007      	beq.n	80033a0 <HAL_RCC_OscConfig+0x48>
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	2b18      	cmp	r3, #24
 8003394:	d110      	bne.n	80033b8 <HAL_RCC_OscConfig+0x60>
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d10b      	bne.n	80033b8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a0:	4b8f      	ldr	r3, [pc, #572]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d06c      	beq.n	8003486 <HAL_RCC_OscConfig+0x12e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d168      	bne.n	8003486 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e3f6      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c0:	d106      	bne.n	80033d0 <HAL_RCC_OscConfig+0x78>
 80033c2:	4b87      	ldr	r3, [pc, #540]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a86      	ldr	r2, [pc, #536]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80033c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	e02e      	b.n	800342e <HAL_RCC_OscConfig+0xd6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x9a>
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b7e      	ldr	r3, [pc, #504]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a7d      	ldr	r2, [pc, #500]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e01d      	b.n	800342e <HAL_RCC_OscConfig+0xd6>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fa:	d10c      	bne.n	8003416 <HAL_RCC_OscConfig+0xbe>
 80033fc:	4b78      	ldr	r3, [pc, #480]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a77      	ldr	r2, [pc, #476]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b75      	ldr	r3, [pc, #468]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a74      	ldr	r2, [pc, #464]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800340e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	e00b      	b.n	800342e <HAL_RCC_OscConfig+0xd6>
 8003416:	4b72      	ldr	r3, [pc, #456]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a71      	ldr	r2, [pc, #452]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800341c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b6f      	ldr	r3, [pc, #444]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6e      	ldr	r2, [pc, #440]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d013      	beq.n	800345e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003436:	f7fe facb 	bl	80019d0 <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343e:	f7fe fac7 	bl	80019d0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b64      	cmp	r3, #100	; 0x64
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e3aa      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003450:	4b63      	ldr	r3, [pc, #396]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0xe6>
 800345c:	e014      	b.n	8003488 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fab7 	bl	80019d0 <HAL_GetTick>
 8003462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003466:	f7fe fab3 	bl	80019d0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	; 0x64
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e396      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x10e>
 8003484:	e000      	b.n	8003488 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003486:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80cb 	beq.w	800362c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003496:	4b52      	ldr	r3, [pc, #328]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800349e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <HAL_RCC_OscConfig+0x164>
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	2b18      	cmp	r3, #24
 80034b0:	d156      	bne.n	8003560 <HAL_RCC_OscConfig+0x208>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d151      	bne.n	8003560 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_OscConfig+0x17c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e368      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034d4:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 0219 	bic.w	r2, r3, #25
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	493f      	ldr	r1, [pc, #252]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034e6:	f7fe fa73 	bl	80019d0 <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ee:	f7fe fa6f 	bl	80019d0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e352      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350c:	f7fe fa90 	bl	8001a30 <HAL_GetREVID>
 8003510:	4603      	mov	r3, r0
 8003512:	f241 0203 	movw	r2, #4099	; 0x1003
 8003516:	4293      	cmp	r3, r2
 8003518:	d817      	bhi.n	800354a <HAL_RCC_OscConfig+0x1f2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b40      	cmp	r3, #64	; 0x40
 8003520:	d108      	bne.n	8003534 <HAL_RCC_OscConfig+0x1dc>
 8003522:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800352a:	4a2d      	ldr	r2, [pc, #180]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800352c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003530:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003532:	e07b      	b.n	800362c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	031b      	lsls	r3, r3, #12
 8003542:	4927      	ldr	r1, [pc, #156]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003548:	e070      	b.n	800362c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b25      	ldr	r3, [pc, #148]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	061b      	lsls	r3, r3, #24
 8003558:	4921      	ldr	r1, [pc, #132]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800355e:	e065      	b.n	800362c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d048      	beq.n	80035fa <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 0219 	bic.w	r2, r3, #25
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	491a      	ldr	r1, [pc, #104]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fe fa29 	bl	80019d0 <HAL_GetTick>
 800357e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003582:	f7fe fa25 	bl	80019d0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e308      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	f7fe fa46 	bl	8001a30 <HAL_GetREVID>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d81a      	bhi.n	80035e4 <HAL_RCC_OscConfig+0x28c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d108      	bne.n	80035c8 <HAL_RCC_OscConfig+0x270>
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035be:	4a08      	ldr	r2, [pc, #32]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c4:	6053      	str	r3, [r2, #4]
 80035c6:	e031      	b.n	800362c <HAL_RCC_OscConfig+0x2d4>
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	031b      	lsls	r3, r3, #12
 80035d6:	4902      	ldr	r1, [pc, #8]	; (80035e0 <HAL_RCC_OscConfig+0x288>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
 80035dc:	e026      	b.n	800362c <HAL_RCC_OscConfig+0x2d4>
 80035de:	bf00      	nop
 80035e0:	58024400 	.word	0x58024400
 80035e4:	4b9a      	ldr	r3, [pc, #616]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	4997      	ldr	r1, [pc, #604]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
 80035f8:	e018      	b.n	800362c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fa:	4b95      	ldr	r3, [pc, #596]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a94      	ldr	r2, [pc, #592]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003600:	f023 0301 	bic.w	r3, r3, #1
 8003604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003606:	f7fe f9e3 	bl	80019d0 <HAL_GetTick>
 800360a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800360e:	f7fe f9df 	bl	80019d0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e2c2      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003620:	4b8b      	ldr	r3, [pc, #556]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80a9 	beq.w	800378c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800363a:	4b85      	ldr	r3, [pc, #532]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003642:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003644:	4b82      	ldr	r3, [pc, #520]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d007      	beq.n	8003660 <HAL_RCC_OscConfig+0x308>
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2b18      	cmp	r3, #24
 8003654:	d13a      	bne.n	80036cc <HAL_RCC_OscConfig+0x374>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d135      	bne.n	80036cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003660:	4b7b      	ldr	r3, [pc, #492]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_OscConfig+0x320>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d001      	beq.n	8003678 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e296      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003678:	f7fe f9da 	bl	8001a30 <HAL_GetREVID>
 800367c:	4603      	mov	r3, r0
 800367e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003682:	4293      	cmp	r3, r2
 8003684:	d817      	bhi.n	80036b6 <HAL_RCC_OscConfig+0x35e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	2b20      	cmp	r3, #32
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_OscConfig+0x348>
 800368e:	4b70      	ldr	r3, [pc, #448]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003696:	4a6e      	ldr	r2, [pc, #440]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800369c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800369e:	e075      	b.n	800378c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036a0:	4b6b      	ldr	r3, [pc, #428]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	069b      	lsls	r3, r3, #26
 80036ae:	4968      	ldr	r1, [pc, #416]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036b4:	e06a      	b.n	800378c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80036b6:	4b66      	ldr	r3, [pc, #408]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	061b      	lsls	r3, r3, #24
 80036c4:	4962      	ldr	r1, [pc, #392]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80036ca:	e05f      	b.n	800378c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d042      	beq.n	800375a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80036d4:	4b5e      	ldr	r3, [pc, #376]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5d      	ldr	r2, [pc, #372]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80036da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fe f976 	bl	80019d0 <HAL_GetTick>
 80036e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80036e8:	f7fe f972 	bl	80019d0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e255      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036fa:	4b55      	ldr	r3, [pc, #340]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003706:	f7fe f993 	bl	8001a30 <HAL_GetREVID>
 800370a:	4603      	mov	r3, r0
 800370c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003710:	4293      	cmp	r3, r2
 8003712:	d817      	bhi.n	8003744 <HAL_RCC_OscConfig+0x3ec>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	2b20      	cmp	r3, #32
 800371a:	d108      	bne.n	800372e <HAL_RCC_OscConfig+0x3d6>
 800371c:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003724:	4a4a      	ldr	r2, [pc, #296]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800372a:	6053      	str	r3, [r2, #4]
 800372c:	e02e      	b.n	800378c <HAL_RCC_OscConfig+0x434>
 800372e:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	069b      	lsls	r3, r3, #26
 800373c:	4944      	ldr	r1, [pc, #272]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
 8003742:	e023      	b.n	800378c <HAL_RCC_OscConfig+0x434>
 8003744:	4b42      	ldr	r3, [pc, #264]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	061b      	lsls	r3, r3, #24
 8003752:	493f      	ldr	r1, [pc, #252]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	60cb      	str	r3, [r1, #12]
 8003758:	e018      	b.n	800378c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800375a:	4b3d      	ldr	r3, [pc, #244]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3c      	ldr	r2, [pc, #240]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003766:	f7fe f933 	bl	80019d0 <HAL_GetTick>
 800376a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800376e:	f7fe f92f 	bl	80019d0 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e212      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003780:	4b33      	ldr	r3, [pc, #204]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b00      	cmp	r3, #0
 8003796:	d036      	beq.n	8003806 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d019      	beq.n	80037d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80037a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a4:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe f910 	bl	80019d0 <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b4:	f7fe f90c 	bl	80019d0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e1ef      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80037c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x45c>
 80037d2:	e018      	b.n	8003806 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037d4:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80037d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d8:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fe f8f6 	bl	80019d0 <HAL_GetTick>
 80037e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fe f8f2 	bl	80019d0 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e1d5      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80037fa:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d039      	beq.n	8003886 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01c      	beq.n	8003854 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003824:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003826:	f7fe f8d3 	bl	80019d0 <HAL_GetTick>
 800382a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800382e:	f7fe f8cf 	bl	80019d0 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1b2      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_RCC_OscConfig+0x4f8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0f0      	beq.n	800382e <HAL_RCC_OscConfig+0x4d6>
 800384c:	e01b      	b.n	8003886 <HAL_RCC_OscConfig+0x52e>
 800384e:	bf00      	nop
 8003850:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003854:	4b9b      	ldr	r3, [pc, #620]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a9a      	ldr	r2, [pc, #616]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 800385a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800385e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003860:	f7fe f8b6 	bl	80019d0 <HAL_GetTick>
 8003864:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003868:	f7fe f8b2 	bl	80019d0 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e195      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800387a:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 8081 	beq.w	8003996 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003894:	4b8c      	ldr	r3, [pc, #560]	; (8003ac8 <HAL_RCC_OscConfig+0x770>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a8b      	ldr	r2, [pc, #556]	; (8003ac8 <HAL_RCC_OscConfig+0x770>)
 800389a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038a0:	f7fe f896 	bl	80019d0 <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038a8:	f7fe f892 	bl	80019d0 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	; 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e175      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ba:	4b83      	ldr	r3, [pc, #524]	; (8003ac8 <HAL_RCC_OscConfig+0x770>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x584>
 80038ce:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	4a7c      	ldr	r2, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
 80038da:	e02d      	b.n	8003938 <HAL_RCC_OscConfig+0x5e0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10c      	bne.n	80038fe <HAL_RCC_OscConfig+0x5a6>
 80038e4:	4b77      	ldr	r3, [pc, #476]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	4a76      	ldr	r2, [pc, #472]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	6713      	str	r3, [r2, #112]	; 0x70
 80038f0:	4b74      	ldr	r3, [pc, #464]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f4:	4a73      	ldr	r2, [pc, #460]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80038f6:	f023 0304 	bic.w	r3, r3, #4
 80038fa:	6713      	str	r3, [r2, #112]	; 0x70
 80038fc:	e01c      	b.n	8003938 <HAL_RCC_OscConfig+0x5e0>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b05      	cmp	r3, #5
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c8>
 8003906:	4b6f      	ldr	r3, [pc, #444]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a6e      	ldr	r2, [pc, #440]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
 8003912:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a6b      	ldr	r2, [pc, #428]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0x5e0>
 8003920:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4a67      	ldr	r2, [pc, #412]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	; 0x70
 800392c:	4b65      	ldr	r3, [pc, #404]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003930:	4a64      	ldr	r2, [pc, #400]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003932:	f023 0304 	bic.w	r3, r3, #4
 8003936:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d015      	beq.n	800396c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fe f846 	bl	80019d0 <HAL_GetTick>
 8003944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7fe f842 	bl	80019d0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e123      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800395e:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0ee      	beq.n	8003948 <HAL_RCC_OscConfig+0x5f0>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fe f830 	bl	80019d0 <HAL_GetTick>
 8003970:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fe f82c 	bl	80019d0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e10d      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800398a:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1ee      	bne.n	8003974 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8102 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80039a0:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a8:	2b18      	cmp	r3, #24
 80039aa:	f000 80bd 	beq.w	8003b28 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	f040 809e 	bne.w	8003af4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b8:	4b42      	ldr	r3, [pc, #264]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a41      	ldr	r2, [pc, #260]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80039be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe f804 	bl	80019d0 <HAL_GetTick>
 80039c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039cc:	f7fe f800 	bl	80019d0 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e0e3      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039de:	4b39      	ldr	r3, [pc, #228]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 80039ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ee:	4b37      	ldr	r3, [pc, #220]	; (8003acc <HAL_RCC_OscConfig+0x774>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	430a      	orrs	r2, r1
 80039fe:	4931      	ldr	r1, [pc, #196]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	628b      	str	r3, [r1, #40]	; 0x28
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	3b01      	subs	r3, #1
 8003a14:	025b      	lsls	r3, r3, #9
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	041b      	lsls	r3, r3, #16
 8003a22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	061b      	lsls	r3, r3, #24
 8003a30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003a34:	4923      	ldr	r1, [pc, #140]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003a3a:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	4a21      	ldr	r2, [pc, #132]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a40:	f023 0301 	bic.w	r3, r3, #1
 8003a44:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a46:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4a:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <HAL_RCC_OscConfig+0x778>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a52:	00d2      	lsls	r2, r2, #3
 8003a54:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5e:	f023 020c 	bic.w	r2, r3, #12
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4917      	ldr	r1, [pc, #92]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003a6c:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	f023 0202 	bic.w	r2, r3, #2
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	4912      	ldr	r1, [pc, #72]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4a10      	ldr	r2, [pc, #64]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <HAL_RCC_OscConfig+0x76c>)
 8003ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd ff89 	bl	80019d0 <HAL_GetTick>
 8003abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ac0:	e011      	b.n	8003ae6 <HAL_RCC_OscConfig+0x78e>
 8003ac2:	bf00      	nop
 8003ac4:	58024400 	.word	0x58024400
 8003ac8:	58024800 	.word	0x58024800
 8003acc:	fffffc0c 	.word	0xfffffc0c
 8003ad0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd ff7c 	bl	80019d0 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e05f      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ae6:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <HAL_RCC_OscConfig+0x858>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x77c>
 8003af2:	e057      	b.n	8003ba4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af4:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <HAL_RCC_OscConfig+0x858>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2d      	ldr	r2, [pc, #180]	; (8003bb0 <HAL_RCC_OscConfig+0x858>)
 8003afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd ff66 	bl	80019d0 <HAL_GetTick>
 8003b04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fd ff62 	bl	80019d0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e045      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b1a:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <HAL_RCC_OscConfig+0x858>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x7b0>
 8003b26:	e03d      	b.n	8003ba4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003b28:	4b21      	ldr	r3, [pc, #132]	; (8003bb0 <HAL_RCC_OscConfig+0x858>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <HAL_RCC_OscConfig+0x858>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b32:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d031      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f003 0203 	and.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d12a      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d122      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d11a      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	0a5b      	lsrs	r3, r3, #9
 8003b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d111      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	0c1b      	lsrs	r3, r3, #16
 8003b80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d108      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	0e1b      	lsrs	r3, r3, #24
 8003b92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3730      	adds	r7, #48	; 0x30
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	58024400 	.word	0x58024400

08003bb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e19c      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc8:	4b8a      	ldr	r3, [pc, #552]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d910      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd6:	4b87      	ldr	r3, [pc, #540]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 020f 	bic.w	r2, r3, #15
 8003bde:	4985      	ldr	r1, [pc, #532]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b83      	ldr	r3, [pc, #524]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e184      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d010      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	4b7b      	ldr	r3, [pc, #492]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d908      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003c14:	4b78      	ldr	r3, [pc, #480]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	4975      	ldr	r1, [pc, #468]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d010      	beq.n	8003c54 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	4b70      	ldr	r3, [pc, #448]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d908      	bls.n	8003c54 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c42:	4b6d      	ldr	r3, [pc, #436]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	496a      	ldr	r1, [pc, #424]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d010      	beq.n	8003c82 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	4b64      	ldr	r3, [pc, #400]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d908      	bls.n	8003c82 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c70:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	495e      	ldr	r1, [pc, #376]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d010      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	4b59      	ldr	r3, [pc, #356]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d908      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003c9e:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	4953      	ldr	r1, [pc, #332]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d010      	beq.n	8003cde <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 030f 	and.w	r3, r3, #15
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d908      	bls.n	8003cde <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ccc:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f023 020f 	bic.w	r2, r3, #15
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	4947      	ldr	r1, [pc, #284]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d055      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003cea:	4b43      	ldr	r3, [pc, #268]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	4940      	ldr	r1, [pc, #256]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d107      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d04:	4b3c      	ldr	r3, [pc, #240]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d121      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0f6      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d1c:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d115      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0ea      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d34:	4b30      	ldr	r3, [pc, #192]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0de      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d44:	4b2c      	ldr	r3, [pc, #176]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0d6      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d54:	4b28      	ldr	r3, [pc, #160]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f023 0207 	bic.w	r2, r3, #7
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	4925      	ldr	r1, [pc, #148]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fd fe33 	bl	80019d0 <HAL_GetTick>
 8003d6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6e:	f7fd fe2f 	bl	80019d0 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0be      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d84:	4b1c      	ldr	r3, [pc, #112]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d1eb      	bne.n	8003d6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d208      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	f023 020f 	bic.w	r2, r3, #15
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	490e      	ldr	r1, [pc, #56]	; (8003df8 <HAL_RCC_ClockConfig+0x244>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 030f 	and.w	r3, r3, #15
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d214      	bcs.n	8003dfc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 020f 	bic.w	r2, r3, #15
 8003dda:	4906      	ldr	r1, [pc, #24]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de2:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <HAL_RCC_ClockConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e086      	b.n	8003f02 <HAL_RCC_ClockConfig+0x34e>
 8003df4:	52002000 	.word	0x52002000
 8003df8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d010      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	4b3f      	ldr	r3, [pc, #252]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d208      	bcs.n	8003e2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e18:	4b3c      	ldr	r3, [pc, #240]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	4939      	ldr	r1, [pc, #228]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d010      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695a      	ldr	r2, [r3, #20]
 8003e3a:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d208      	bcs.n	8003e58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e46:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	492e      	ldr	r1, [pc, #184]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	4b28      	ldr	r3, [pc, #160]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d208      	bcs.n	8003e86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e74:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	4922      	ldr	r1, [pc, #136]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d010      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69da      	ldr	r2, [r3, #28]
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d208      	bcs.n	8003eb4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003ea2:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4917      	ldr	r1, [pc, #92]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003eb4:	f000 f834 	bl	8003f20 <HAL_RCC_GetSysClockFreq>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	4b14      	ldr	r3, [pc, #80]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	4912      	ldr	r1, [pc, #72]	; (8003f10 <HAL_RCC_ClockConfig+0x35c>)
 8003ec6:	5ccb      	ldrb	r3, [r1, r3]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_RCC_ClockConfig+0x358>)
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a0d      	ldr	r2, [pc, #52]	; (8003f10 <HAL_RCC_ClockConfig+0x35c>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee8:	4a0a      	ldr	r2, [pc, #40]	; (8003f14 <HAL_RCC_ClockConfig+0x360>)
 8003eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eec:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <HAL_RCC_ClockConfig+0x364>)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_RCC_ClockConfig+0x368>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fd fd20 	bl	800193c <HAL_InitTick>
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	58024400 	.word	0x58024400
 8003f10:	08005c5c 	.word	0x08005c5c
 8003f14:	24000020 	.word	0x24000020
 8003f18:	2400001c 	.word	0x2400001c
 8003f1c:	24000024 	.word	0x24000024

08003f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f26:	4bb3      	ldr	r3, [pc, #716]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f2e:	2b18      	cmp	r3, #24
 8003f30:	f200 8155 	bhi.w	80041de <HAL_RCC_GetSysClockFreq+0x2be>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003fa1 	.word	0x08003fa1
 8003f40:	080041df 	.word	0x080041df
 8003f44:	080041df 	.word	0x080041df
 8003f48:	080041df 	.word	0x080041df
 8003f4c:	080041df 	.word	0x080041df
 8003f50:	080041df 	.word	0x080041df
 8003f54:	080041df 	.word	0x080041df
 8003f58:	080041df 	.word	0x080041df
 8003f5c:	08003fc7 	.word	0x08003fc7
 8003f60:	080041df 	.word	0x080041df
 8003f64:	080041df 	.word	0x080041df
 8003f68:	080041df 	.word	0x080041df
 8003f6c:	080041df 	.word	0x080041df
 8003f70:	080041df 	.word	0x080041df
 8003f74:	080041df 	.word	0x080041df
 8003f78:	080041df 	.word	0x080041df
 8003f7c:	08003fcd 	.word	0x08003fcd
 8003f80:	080041df 	.word	0x080041df
 8003f84:	080041df 	.word	0x080041df
 8003f88:	080041df 	.word	0x080041df
 8003f8c:	080041df 	.word	0x080041df
 8003f90:	080041df 	.word	0x080041df
 8003f94:	080041df 	.word	0x080041df
 8003f98:	080041df 	.word	0x080041df
 8003f9c:	08003fd3 	.word	0x08003fd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003fa0:	4b94      	ldr	r3, [pc, #592]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d009      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fac:	4b91      	ldr	r3, [pc, #580]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	08db      	lsrs	r3, r3, #3
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	4a90      	ldr	r2, [pc, #576]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003fbe:	e111      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003fc0:	4b8d      	ldr	r3, [pc, #564]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003fc2:	61bb      	str	r3, [r7, #24]
    break;
 8003fc4:	e10e      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003fc6:	4b8d      	ldr	r3, [pc, #564]	; (80041fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003fc8:	61bb      	str	r3, [r7, #24]
    break;
 8003fca:	e10b      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003fcc:	4b8c      	ldr	r3, [pc, #560]	; (8004200 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003fce:	61bb      	str	r3, [r7, #24]
    break;
 8003fd0:	e108      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fd2:	4b88      	ldr	r3, [pc, #544]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003fdc:	4b85      	ldr	r3, [pc, #532]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fe6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003fe8:	4b82      	ldr	r3, [pc, #520]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003ff2:	4b80      	ldr	r3, [pc, #512]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff6:	08db      	lsrs	r3, r3, #3
 8003ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80e1 	beq.w	80041d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2b02      	cmp	r3, #2
 800401a:	f000 8083 	beq.w	8004124 <HAL_RCC_GetSysClockFreq+0x204>
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b02      	cmp	r3, #2
 8004022:	f200 80a1 	bhi.w	8004168 <HAL_RCC_GetSysClockFreq+0x248>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x114>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d056      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004032:	e099      	b.n	8004168 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004034:	4b6f      	ldr	r3, [pc, #444]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d02d      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004040:	4b6c      	ldr	r3, [pc, #432]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	4a6b      	ldr	r2, [pc, #428]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
 8004050:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	ee07 3a90 	vmov	s15, r3
 8004058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406a:	4b62      	ldr	r3, [pc, #392]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407a:	ed97 6a02 	vldr	s12, [r7, #8]
 800407e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800408e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004096:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800409a:	e087      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004208 <HAL_RCC_GetSysClockFreq+0x2e8>
 80040aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ae:	4b51      	ldr	r3, [pc, #324]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040be:	ed97 6a02 	vldr	s12, [r7, #8]
 80040c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040de:	e065      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800420c <HAL_RCC_GetSysClockFreq+0x2ec>
 80040ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f2:	4b40      	ldr	r3, [pc, #256]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004102:	ed97 6a02 	vldr	s12, [r7, #8]
 8004106:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800410a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004122:	e043      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004210 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004146:	ed97 6a02 	vldr	s12, [r7, #8]
 800414a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 800414e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004166:	e021      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	eddf 6a26 	vldr	s13, [pc, #152]	; 800420c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417a:	4b1e      	ldr	r3, [pc, #120]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418a:	ed97 6a02 	vldr	s12, [r7, #8]
 800418e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004204 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800419e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041aa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80041ac:	4b11      	ldr	r3, [pc, #68]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	0a5b      	lsrs	r3, r3, #9
 80041b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041b6:	3301      	adds	r3, #1
 80041b8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d0:	ee17 3a90 	vmov	r3, s15
 80041d4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80041d6:	e005      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	61bb      	str	r3, [r7, #24]
    break;
 80041dc:	e002      	b.n	80041e4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80041e0:	61bb      	str	r3, [r7, #24]
    break;
 80041e2:	bf00      	nop
  }

  return sysclockfreq;
 80041e4:	69bb      	ldr	r3, [r7, #24]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3724      	adds	r7, #36	; 0x24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
 80041f8:	03d09000 	.word	0x03d09000
 80041fc:	003d0900 	.word	0x003d0900
 8004200:	017d7840 	.word	0x017d7840
 8004204:	46000000 	.word	0x46000000
 8004208:	4c742400 	.word	0x4c742400
 800420c:	4a742400 	.word	0x4a742400
 8004210:	4bbebc20 	.word	0x4bbebc20

08004214 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800421c:	2300      	movs	r3, #0
 800421e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004220:	2300      	movs	r3, #0
 8004222:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d03f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004234:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004238:	d02a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800423a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800423e:	d824      	bhi.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004244:	d018      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800424a:	d81e      	bhi.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004254:	d007      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004256:	e018      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004258:	4ba3      	ldr	r3, [pc, #652]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4aa2      	ldr	r2, [pc, #648]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004264:	e015      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	2102      	movs	r1, #2
 800426c:	4618      	mov	r0, r3
 800426e:	f000 ff17 	bl	80050a0 <RCCEx_PLL2_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004276:	e00c      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3324      	adds	r3, #36	; 0x24
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f000 ffc0 	bl	8005204 <RCCEx_PLL3_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004288:	e003      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
      break;
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004292:	7dfb      	ldrb	r3, [r7, #23]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d109      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004298:	4b93      	ldr	r3, [pc, #588]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800429a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a4:	4990      	ldr	r1, [pc, #576]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	650b      	str	r3, [r1, #80]	; 0x50
 80042aa:	e001      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d03d      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d826      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042e1 	.word	0x080042e1
 80042d0:	080042ef 	.word	0x080042ef
 80042d4:	08004301 	.word	0x08004301
 80042d8:	08004319 	.word	0x08004319
 80042dc:	08004319 	.word	0x08004319
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e0:	4b81      	ldr	r3, [pc, #516]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	4a80      	ldr	r2, [pc, #512]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042ec:	e015      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fed3 	bl	80050a0 <RCCEx_PLL2_Config>
 80042fa:	4603      	mov	r3, r0
 80042fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80042fe:	e00c      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3324      	adds	r3, #36	; 0x24
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f000 ff7c 	bl	8005204 <RCCEx_PLL3_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004310:	e003      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
      break;
 8004316:	e000      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d109      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004320:	4b71      	ldr	r3, [pc, #452]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004324:	f023 0207 	bic.w	r2, r3, #7
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	496e      	ldr	r1, [pc, #440]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	650b      	str	r3, [r1, #80]	; 0x50
 8004332:	e001      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004340:	2b00      	cmp	r3, #0
 8004342:	d042      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434c:	d02b      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d825      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004354:	2bc0      	cmp	r3, #192	; 0xc0
 8004356:	d028      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004358:	2bc0      	cmp	r3, #192	; 0xc0
 800435a:	d821      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800435c:	2b80      	cmp	r3, #128	; 0x80
 800435e:	d016      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004360:	2b80      	cmp	r3, #128	; 0x80
 8004362:	d81d      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d007      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800436c:	e018      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800436e:	4b5e      	ldr	r3, [pc, #376]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	4a5d      	ldr	r2, [pc, #372]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800437a:	e017      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fe8c 	bl	80050a0 <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800438c:	e00e      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3324      	adds	r3, #36	; 0x24
 8004392:	2100      	movs	r1, #0
 8004394:	4618      	mov	r0, r3
 8004396:	f000 ff35 	bl	8005204 <RCCEx_PLL3_Config>
 800439a:	4603      	mov	r3, r0
 800439c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800439e:	e005      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	75fb      	strb	r3, [r7, #23]
      break;
 80043a4:	e002      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80043aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80043b2:	4b4d      	ldr	r3, [pc, #308]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	494a      	ldr	r1, [pc, #296]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	650b      	str	r3, [r1, #80]	; 0x50
 80043c4:	e001      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c6:	7dfb      	ldrb	r3, [r7, #23]
 80043c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d049      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043e0:	d030      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80043e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043e6:	d82a      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043ec:	d02c      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80043ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043f2:	d824      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80043f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f8:	d018      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80043fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043fe:	d81e      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004408:	d007      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800440a:	e018      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	4a35      	ldr	r2, [pc, #212]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004418:	e017      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3304      	adds	r3, #4
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fe3d 	bl	80050a0 <RCCEx_PLL2_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800442a:	e00e      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3324      	adds	r3, #36	; 0x24
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fee6 	bl	8005204 <RCCEx_PLL3_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800443c:	e005      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	75fb      	strb	r3, [r7, #23]
      break;
 8004442:	e002      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444a:	7dfb      	ldrb	r3, [r7, #23]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800445e:	4922      	ldr	r1, [pc, #136]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004460:	4313      	orrs	r3, r2
 8004462:	658b      	str	r3, [r1, #88]	; 0x58
 8004464:	e001      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004472:	2b00      	cmp	r3, #0
 8004474:	d04b      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800447c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004480:	d030      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004486:	d82a      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004488:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800448c:	d02e      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800448e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004492:	d824      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004498:	d018      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800449a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800449e:	d81e      	bhi.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x298>
 80044a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a8:	d007      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80044aa:	e018      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4a0d      	ldr	r2, [pc, #52]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044b8:	e019      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3304      	adds	r3, #4
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fded 	bl	80050a0 <RCCEx_PLL2_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80044ca:	e010      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3324      	adds	r3, #36	; 0x24
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fe96 	bl	8005204 <RCCEx_PLL3_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044dc:	e007      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	75fb      	strb	r3, [r7, #23]
      break;
 80044e2:	e004      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80044e4:	bf00      	nop
 80044e6:	e002      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80044e8:	58024400 	.word	0x58024400
      break;
 80044ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044f4:	4b99      	ldr	r3, [pc, #612]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004502:	4996      	ldr	r1, [pc, #600]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004504:	4313      	orrs	r3, r2
 8004506:	658b      	str	r3, [r1, #88]	; 0x58
 8004508:	e001      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450a:	7dfb      	ldrb	r3, [r7, #23]
 800450c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d032      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451e:	2b30      	cmp	r3, #48	; 0x30
 8004520:	d01c      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004522:	2b30      	cmp	r3, #48	; 0x30
 8004524:	d817      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004526:	2b20      	cmp	r3, #32
 8004528:	d00c      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800452a:	2b20      	cmp	r3, #32
 800452c:	d813      	bhi.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004532:	2b10      	cmp	r3, #16
 8004534:	d10f      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004536:	4b89      	ldr	r3, [pc, #548]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	4a88      	ldr	r2, [pc, #544]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800453c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004540:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004542:	e00e      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	2102      	movs	r1, #2
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fda8 	bl	80050a0 <RCCEx_PLL2_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004554:	e005      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	75fb      	strb	r3, [r7, #23]
      break;
 800455a:	e002      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800455c:	bf00      	nop
 800455e:	e000      	b.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d109      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004568:	4b7c      	ldr	r3, [pc, #496]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800456a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004574:	4979      	ldr	r1, [pc, #484]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004576:	4313      	orrs	r3, r2
 8004578:	64cb      	str	r3, [r1, #76]	; 0x4c
 800457a:	e001      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d047      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004590:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004594:	d030      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800459a:	d82a      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800459c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045a0:	d02c      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80045a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045a6:	d824      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ac:	d018      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80045ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045b2:	d81e      	bhi.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045bc:	d007      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80045be:	e018      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045c0:	4b66      	ldr	r3, [pc, #408]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	4a65      	ldr	r2, [pc, #404]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045cc:	e017      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	2100      	movs	r1, #0
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fd63 	bl	80050a0 <RCCEx_PLL2_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045de:	e00e      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3324      	adds	r3, #36	; 0x24
 80045e4:	2100      	movs	r1, #0
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fe0c 	bl	8005204 <RCCEx_PLL3_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045f0:	e005      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	75fb      	strb	r3, [r7, #23]
      break;
 80045f6:	e002      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80045f8:	bf00      	nop
 80045fa:	e000      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80045fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045fe:	7dfb      	ldrb	r3, [r7, #23]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d109      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004604:	4b55      	ldr	r3, [pc, #340]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004610:	4952      	ldr	r1, [pc, #328]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004612:	4313      	orrs	r3, r2
 8004614:	650b      	str	r3, [r1, #80]	; 0x50
 8004616:	e001      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d049      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004630:	d02e      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004636:	d828      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004638:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800463c:	d02a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800463e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004642:	d822      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004644:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004648:	d026      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800464a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800464e:	d81c      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004654:	d010      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800465a:	d816      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01d      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004664:	d111      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	2101      	movs	r1, #1
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fd17 	bl	80050a0 <RCCEx_PLL2_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004676:	e012      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3324      	adds	r3, #36	; 0x24
 800467c:	2101      	movs	r1, #1
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fdc0 	bl	8005204 <RCCEx_PLL3_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004688:	e009      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
      break;
 800468e:	e006      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004690:	bf00      	nop
 8004692:	e004      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004694:	bf00      	nop
 8004696:	e002      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004698:	bf00      	nop
 800469a:	e000      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800469c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800469e:	7dfb      	ldrb	r3, [r7, #23]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d109      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80046a4:	4b2d      	ldr	r3, [pc, #180]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b0:	492a      	ldr	r1, [pc, #168]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	650b      	str	r3, [r1, #80]	; 0x50
 80046b6:	e001      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
 80046ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d04d      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80046ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046d2:	d02e      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80046d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046d8:	d828      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046de:	d02a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d822      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046ea:	d026      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80046ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046f0:	d81c      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f6:	d010      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80046f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046fc:	d816      	bhi.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x518>
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01d      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004706:	d111      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3304      	adds	r3, #4
 800470c:	2101      	movs	r1, #1
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fcc6 	bl	80050a0 <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004718:	e012      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3324      	adds	r3, #36	; 0x24
 800471e:	2101      	movs	r1, #1
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fd6f 	bl	8005204 <RCCEx_PLL3_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800472a:	e009      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	75fb      	strb	r3, [r7, #23]
      break;
 8004730:	e006      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004732:	bf00      	nop
 8004734:	e004      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004736:	bf00      	nop
 8004738:	e002      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800473a:	bf00      	nop
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800473e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10c      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004754:	4901      	ldr	r1, [pc, #4]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004756:	4313      	orrs	r3, r2
 8004758:	658b      	str	r3, [r1, #88]	; 0x58
 800475a:	e003      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800475c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004760:	7dfb      	ldrb	r3, [r7, #23]
 8004762:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d02f      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004778:	d00e      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800477a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800477e:	d814      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d015      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004788:	d10f      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800478a:	4baf      	ldr	r3, [pc, #700]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800478c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478e:	4aae      	ldr	r2, [pc, #696]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004796:	e00c      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3304      	adds	r3, #4
 800479c:	2101      	movs	r1, #1
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fc7e 	bl	80050a0 <RCCEx_PLL2_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80047a8:	e003      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
      break;
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80047b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047b8:	4ba3      	ldr	r3, [pc, #652]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c4:	49a0      	ldr	r1, [pc, #640]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	650b      	str	r3, [r1, #80]	; 0x50
 80047ca:	e001      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d032      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d81b      	bhi.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x608>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004823 	.word	0x08004823
 80047f0:	080047fd 	.word	0x080047fd
 80047f4:	0800480b 	.word	0x0800480b
 80047f8:	08004823 	.word	0x08004823
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047fc:	4b92      	ldr	r3, [pc, #584]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	4a91      	ldr	r2, [pc, #580]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004808:	e00c      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3304      	adds	r3, #4
 800480e:	2102      	movs	r1, #2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fc45 	bl	80050a0 <RCCEx_PLL2_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800481a:	e003      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	75fb      	strb	r3, [r7, #23]
      break;
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800482a:	4b87      	ldr	r3, [pc, #540]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800482c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482e:	f023 0203 	bic.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	4984      	ldr	r1, [pc, #528]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004838:	4313      	orrs	r3, r2
 800483a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800483c:	e001      	b.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483e:	7dfb      	ldrb	r3, [r7, #23]
 8004840:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8086 	beq.w	800495c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004850:	4b7e      	ldr	r3, [pc, #504]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7d      	ldr	r2, [pc, #500]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800485c:	f7fd f8b8 	bl	80019d0 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004862:	e009      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004864:	f7fd f8b4 	bl	80019d0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d902      	bls.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	75fb      	strb	r3, [r7, #23]
        break;
 8004876:	e005      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004878:	4b74      	ldr	r3, [pc, #464]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0ef      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004884:	7dfb      	ldrb	r3, [r7, #23]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d166      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800488a:	4b6f      	ldr	r3, [pc, #444]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800488c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004894:	4053      	eors	r3, r2
 8004896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489a:	2b00      	cmp	r3, #0
 800489c:	d013      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800489e:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a8:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	4a66      	ldr	r2, [pc, #408]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b4:	4b64      	ldr	r3, [pc, #400]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	4a63      	ldr	r2, [pc, #396]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048c0:	4a61      	ldr	r2, [pc, #388]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d0:	d115      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d2:	f7fd f87d 	bl	80019d0 <HAL_GetTick>
 80048d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048d8:	e00b      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048da:	f7fd f879 	bl	80019d0 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d902      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	75fb      	strb	r3, [r7, #23]
            break;
 80048f0:	e005      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048f2:	4b55      	ldr	r3, [pc, #340]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0ed      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d126      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800490a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004912:	d10d      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004914:	4b4c      	ldr	r3, [pc, #304]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004922:	0919      	lsrs	r1, r3, #4
 8004924:	4b4a      	ldr	r3, [pc, #296]	; (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004926:	400b      	ands	r3, r1
 8004928:	4947      	ldr	r1, [pc, #284]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800492a:	4313      	orrs	r3, r2
 800492c:	610b      	str	r3, [r1, #16]
 800492e:	e005      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004930:	4b45      	ldr	r3, [pc, #276]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	4a44      	ldr	r2, [pc, #272]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004936:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800493a:	6113      	str	r3, [r2, #16]
 800493c:	4b42      	ldr	r3, [pc, #264]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800493e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800494a:	493f      	ldr	r1, [pc, #252]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800494c:	4313      	orrs	r3, r2
 800494e:	670b      	str	r3, [r1, #112]	; 0x70
 8004950:	e004      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004952:	7dfb      	ldrb	r3, [r7, #23]
 8004954:	75bb      	strb	r3, [r7, #22]
 8004956:	e001      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004958:	7dfb      	ldrb	r3, [r7, #23]
 800495a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8085 	beq.w	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800496e:	2b28      	cmp	r3, #40	; 0x28
 8004970:	d866      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	08004a55 	.word	0x08004a55
 800497c:	08004a41 	.word	0x08004a41
 8004980:	08004a41 	.word	0x08004a41
 8004984:	08004a41 	.word	0x08004a41
 8004988:	08004a41 	.word	0x08004a41
 800498c:	08004a41 	.word	0x08004a41
 8004990:	08004a41 	.word	0x08004a41
 8004994:	08004a41 	.word	0x08004a41
 8004998:	08004a1d 	.word	0x08004a1d
 800499c:	08004a41 	.word	0x08004a41
 80049a0:	08004a41 	.word	0x08004a41
 80049a4:	08004a41 	.word	0x08004a41
 80049a8:	08004a41 	.word	0x08004a41
 80049ac:	08004a41 	.word	0x08004a41
 80049b0:	08004a41 	.word	0x08004a41
 80049b4:	08004a41 	.word	0x08004a41
 80049b8:	08004a2f 	.word	0x08004a2f
 80049bc:	08004a41 	.word	0x08004a41
 80049c0:	08004a41 	.word	0x08004a41
 80049c4:	08004a41 	.word	0x08004a41
 80049c8:	08004a41 	.word	0x08004a41
 80049cc:	08004a41 	.word	0x08004a41
 80049d0:	08004a41 	.word	0x08004a41
 80049d4:	08004a41 	.word	0x08004a41
 80049d8:	08004a55 	.word	0x08004a55
 80049dc:	08004a41 	.word	0x08004a41
 80049e0:	08004a41 	.word	0x08004a41
 80049e4:	08004a41 	.word	0x08004a41
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a41 	.word	0x08004a41
 80049f0:	08004a41 	.word	0x08004a41
 80049f4:	08004a41 	.word	0x08004a41
 80049f8:	08004a55 	.word	0x08004a55
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a41 	.word	0x08004a41
 8004a04:	08004a41 	.word	0x08004a41
 8004a08:	08004a41 	.word	0x08004a41
 8004a0c:	08004a41 	.word	0x08004a41
 8004a10:	08004a41 	.word	0x08004a41
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	08004a55 	.word	0x08004a55
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	2101      	movs	r1, #1
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fb3c 	bl	80050a0 <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a2c:	e013      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3324      	adds	r3, #36	; 0x24
 8004a32:	2101      	movs	r1, #1
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fbe5 	bl	8005204 <RCCEx_PLL3_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
      break;
 8004a44:	e007      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a46:	bf00      	nop
 8004a48:	58024400 	.word	0x58024400
 8004a4c:	58024800 	.word	0x58024800
 8004a50:	00ffffcf 	.word	0x00ffffcf
      break;
 8004a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a5c:	4b96      	ldr	r3, [pc, #600]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a68:	4993      	ldr	r1, [pc, #588]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	654b      	str	r3, [r1, #84]	; 0x54
 8004a6e:	e001      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d038      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a84:	2b05      	cmp	r3, #5
 8004a86:	d821      	bhi.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ad3 	.word	0x08004ad3
 8004a94:	08004aa9 	.word	0x08004aa9
 8004a98:	08004abb 	.word	0x08004abb
 8004a9c:	08004ad3 	.word	0x08004ad3
 8004aa0:	08004ad3 	.word	0x08004ad3
 8004aa4:	08004ad3 	.word	0x08004ad3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	2101      	movs	r1, #1
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 faf6 	bl	80050a0 <RCCEx_PLL2_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004ab8:	e00c      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3324      	adds	r3, #36	; 0x24
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fb9f 	bl	8005204 <RCCEx_PLL3_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004aca:	e003      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d109      	bne.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004ada:	4b77      	ldr	r3, [pc, #476]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ade:	f023 0207 	bic.w	r2, r3, #7
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae6:	4974      	ldr	r1, [pc, #464]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	654b      	str	r3, [r1, #84]	; 0x54
 8004aec:	e001      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aee:	7dfb      	ldrb	r3, [r7, #23]
 8004af0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d03a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d821      	bhi.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004b08:	a201      	add	r2, pc, #4	; (adr r2, 8004b10 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b53 	.word	0x08004b53
 8004b14:	08004b29 	.word	0x08004b29
 8004b18:	08004b3b 	.word	0x08004b3b
 8004b1c:	08004b53 	.word	0x08004b53
 8004b20:	08004b53 	.word	0x08004b53
 8004b24:	08004b53 	.word	0x08004b53
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fab6 	bl	80050a0 <RCCEx_PLL2_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b38:	e00c      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3324      	adds	r3, #36	; 0x24
 8004b3e:	2101      	movs	r1, #1
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fb5f 	bl	8005204 <RCCEx_PLL3_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b4a:	e003      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b50:	e000      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b5a:	4b57      	ldr	r3, [pc, #348]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	f023 0207 	bic.w	r2, r3, #7
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	4953      	ldr	r1, [pc, #332]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b6e:	e001      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d04b      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b8a:	d02e      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b90:	d828      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d02a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9c:	d822      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004b9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ba2:	d026      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004ba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ba8:	d81c      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bae:	d010      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bb4:	d816      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d01d      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004bba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bbe:	d111      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fa6a 	bl	80050a0 <RCCEx_PLL2_Config>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004bd0:	e012      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3324      	adds	r3, #36	; 0x24
 8004bd6:	2102      	movs	r1, #2
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fb13 	bl	8005204 <RCCEx_PLL3_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004be2:	e009      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
      break;
 8004be8:	e006      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bea:	bf00      	nop
 8004bec:	e004      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e002      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bfe:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c02:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c0c:	492a      	ldr	r1, [pc, #168]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	654b      	str	r3, [r1, #84]	; 0x54
 8004c12:	e001      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
 8004c16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d04d      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c2e:	d02e      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004c30:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c34:	d828      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d02a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c40:	d822      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c46:	d026      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004c48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c4c:	d81c      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c52:	d010      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c58:	d816      	bhi.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01d      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c62:	d111      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 fa18 	bl	80050a0 <RCCEx_PLL2_Config>
 8004c70:	4603      	mov	r3, r0
 8004c72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c74:	e012      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3324      	adds	r3, #36	; 0x24
 8004c7a:	2102      	movs	r1, #2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fac1 	bl	8005204 <RCCEx_PLL3_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c86:	e009      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c8c:	e006      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004c9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cb0:	4901      	ldr	r1, [pc, #4]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	658b      	str	r3, [r1, #88]	; 0x58
 8004cb6:	e003      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d04b      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cd6:	d02e      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004cd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cdc:	d828      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce2:	d02a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce8:	d822      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cee:	d026      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004cf0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cf4:	d81c      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfa:	d010      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004cfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d00:	d816      	bhi.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01d      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d0a:	d111      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3304      	adds	r3, #4
 8004d10:	2100      	movs	r1, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f9c4 	bl	80050a0 <RCCEx_PLL2_Config>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d1c:	e012      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3324      	adds	r3, #36	; 0x24
 8004d22:	2102      	movs	r1, #2
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fa6d 	bl	8005204 <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d2e:	e009      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	75fb      	strb	r3, [r7, #23]
      break;
 8004d34:	e006      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d36:	bf00      	nop
 8004d38:	e004      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d4a:	4b9d      	ldr	r3, [pc, #628]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d58:	4999      	ldr	r1, [pc, #612]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004d5e:	e001      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
 8004d62:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0308 	and.w	r3, r3, #8
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01a      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d7a:	d10a      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3324      	adds	r3, #36	; 0x24
 8004d80:	2102      	movs	r1, #2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa3e 	bl	8005204 <RCCEx_PLL3_Config>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004d92:	4b8b      	ldr	r3, [pc, #556]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da0:	4987      	ldr	r1, [pc, #540]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d01a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dbc:	d10a      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3324      	adds	r3, #36	; 0x24
 8004dc2:	2102      	movs	r1, #2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fa1d 	bl	8005204 <RCCEx_PLL3_Config>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dd4:	4b7a      	ldr	r3, [pc, #488]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004de2:	4977      	ldr	r1, [pc, #476]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d034      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004dfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dfe:	d01d      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e04:	d817      	bhi.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004e10:	e011      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2100      	movs	r1, #0
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 f941 	bl	80050a0 <RCCEx_PLL2_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e22:	e00c      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3324      	adds	r3, #36	; 0x24
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f9ea 	bl	8005204 <RCCEx_PLL3_Config>
 8004e30:	4603      	mov	r3, r0
 8004e32:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e34:	e003      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3a:	e000      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e44:	4b5e      	ldr	r3, [pc, #376]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e52:	495b      	ldr	r1, [pc, #364]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	658b      	str	r3, [r1, #88]	; 0x58
 8004e58:	e001      	b.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d033      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e74:	d01c      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004e76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e7a:	d816      	bhi.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004e7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e80:	d003      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004e82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e86:	d007      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004e88:	e00f      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e8a:	4b4d      	ldr	r3, [pc, #308]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	4a4c      	ldr	r2, [pc, #304]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e96:	e00c      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3324      	adds	r3, #36	; 0x24
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f000 f9b0 	bl	8005204 <RCCEx_PLL3_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ea8:	e003      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
      break;
 8004eae:	e000      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004eb8:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec6:	493e      	ldr	r1, [pc, #248]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	654b      	str	r3, [r1, #84]	; 0x54
 8004ecc:	e001      	b.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ece:	7dfb      	ldrb	r3, [r7, #23]
 8004ed0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d029      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eea:	d007      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004eec:	e00f      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eee:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	4a33      	ldr	r2, [pc, #204]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004efa:	e00b      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3304      	adds	r3, #4
 8004f00:	2102      	movs	r1, #2
 8004f02:	4618      	mov	r0, r3
 8004f04:	f000 f8cc 	bl	80050a0 <RCCEx_PLL2_Config>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004f0c:	e002      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
      break;
 8004f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f1a:	4b29      	ldr	r3, [pc, #164]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f26:	4926      	ldr	r1, [pc, #152]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f2c:	e001      	b.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2e:	7dfb      	ldrb	r3, [r7, #23]
 8004f30:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3324      	adds	r3, #36	; 0x24
 8004f42:	2102      	movs	r1, #2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f95d 	bl	8005204 <RCCEx_PLL3_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d033      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f68:	d017      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f6e:	d811      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f74:	d013      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f7a:	d80b      	bhi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d010      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f84:	d106      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	4a0d      	ldr	r2, [pc, #52]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004f92:	e007      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	75fb      	strb	r3, [r7, #23]
      break;
 8004f98:	e004      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e002      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004fa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fa4:	7dfb      	ldrb	r3, [r7, #23]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fb6:	4902      	ldr	r1, [pc, #8]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	654b      	str	r3, [r1, #84]	; 0x54
 8004fbc:	e004      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004fbe:	bf00      	nop
 8004fc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fd4:	4b31      	ldr	r3, [pc, #196]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	492e      	ldr	r1, [pc, #184]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ff2:	4b2a      	ldr	r3, [pc, #168]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005000:	4926      	ldr	r1, [pc, #152]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005002:	4313      	orrs	r3, r2
 8005004:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005012:	4b22      	ldr	r3, [pc, #136]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800501e:	491f      	ldr	r1, [pc, #124]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005020:	4313      	orrs	r3, r2
 8005022:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00d      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005030:	4b1a      	ldr	r3, [pc, #104]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005036:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800503a:	6113      	str	r3, [r2, #16]
 800503c:	4b17      	ldr	r3, [pc, #92]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005046:	4915      	ldr	r1, [pc, #84]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005048:	4313      	orrs	r3, r2
 800504a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	da08      	bge.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005054:	4b11      	ldr	r3, [pc, #68]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005058:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005060:	490e      	ldr	r1, [pc, #56]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005062:	4313      	orrs	r3, r2
 8005064:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005080:	4906      	ldr	r1, [pc, #24]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005082:	4313      	orrs	r3, r2
 8005084:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005086:	7dbb      	ldrb	r3, [r7, #22]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	58024400 	.word	0x58024400

080050a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050ae:	4b53      	ldr	r3, [pc, #332]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80050b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d101      	bne.n	80050be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e099      	b.n	80051f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050be:	4b4f      	ldr	r3, [pc, #316]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a4e      	ldr	r2, [pc, #312]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80050c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ca:	f7fc fc81 	bl	80019d0 <HAL_GetTick>
 80050ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050d0:	e008      	b.n	80050e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050d2:	f7fc fc7d 	bl	80019d0 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e086      	b.n	80051f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050e4:	4b45      	ldr	r3, [pc, #276]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050f0:	4b42      	ldr	r3, [pc, #264]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	031b      	lsls	r3, r3, #12
 80050fe:	493f      	ldr	r1, [pc, #252]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005100:	4313      	orrs	r3, r2
 8005102:	628b      	str	r3, [r1, #40]	; 0x28
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	3b01      	subs	r3, #1
 800510a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	3b01      	subs	r3, #1
 8005114:	025b      	lsls	r3, r3, #9
 8005116:	b29b      	uxth	r3, r3
 8005118:	431a      	orrs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	3b01      	subs	r3, #1
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	3b01      	subs	r3, #1
 800512e:	061b      	lsls	r3, r3, #24
 8005130:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005134:	4931      	ldr	r1, [pc, #196]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005136:	4313      	orrs	r3, r2
 8005138:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800513a:	4b30      	ldr	r3, [pc, #192]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	492d      	ldr	r1, [pc, #180]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800514c:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	f023 0220 	bic.w	r2, r3, #32
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	4928      	ldr	r1, [pc, #160]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800515e:	4b27      	ldr	r3, [pc, #156]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	4a26      	ldr	r2, [pc, #152]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005164:	f023 0310 	bic.w	r3, r3, #16
 8005168:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800516a:	4b24      	ldr	r3, [pc, #144]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 800516c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <RCCEx_PLL2_Config+0x160>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	69d2      	ldr	r2, [r2, #28]
 8005176:	00d2      	lsls	r2, r2, #3
 8005178:	4920      	ldr	r1, [pc, #128]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 800517a:	4313      	orrs	r3, r2
 800517c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800517e:	4b1f      	ldr	r3, [pc, #124]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005182:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005184:	f043 0310 	orr.w	r3, r3, #16
 8005188:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005190:	4b1a      	ldr	r3, [pc, #104]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005194:	4a19      	ldr	r2, [pc, #100]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 8005196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800519a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800519c:	e00f      	b.n	80051be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d106      	bne.n	80051b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051a4:	4b15      	ldr	r3, [pc, #84]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	4a14      	ldr	r2, [pc, #80]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80051aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051b0:	e005      	b.n	80051be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	4a11      	ldr	r2, [pc, #68]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80051b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a0e      	ldr	r2, [pc, #56]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80051c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ca:	f7fc fc01 	bl	80019d0 <HAL_GetTick>
 80051ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051d0:	e008      	b.n	80051e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051d2:	f7fc fbfd 	bl	80019d0 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e006      	b.n	80051f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <RCCEx_PLL2_Config+0x15c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0f0      	beq.n	80051d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	58024400 	.word	0x58024400
 8005200:	ffff0007 	.word	0xffff0007

08005204 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005212:	4b53      	ldr	r3, [pc, #332]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b03      	cmp	r3, #3
 800521c:	d101      	bne.n	8005222 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e099      	b.n	8005356 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005222:	4b4f      	ldr	r3, [pc, #316]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a4e      	ldr	r2, [pc, #312]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 8005228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800522e:	f7fc fbcf 	bl	80019d0 <HAL_GetTick>
 8005232:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005234:	e008      	b.n	8005248 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005236:	f7fc fbcb 	bl	80019d0 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e086      	b.n	8005356 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005248:	4b45      	ldr	r3, [pc, #276]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1f0      	bne.n	8005236 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005254:	4b42      	ldr	r3, [pc, #264]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	051b      	lsls	r3, r3, #20
 8005262:	493f      	ldr	r1, [pc, #252]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 8005264:	4313      	orrs	r3, r2
 8005266:	628b      	str	r3, [r1, #40]	; 0x28
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	3b01      	subs	r3, #1
 800526e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	3b01      	subs	r3, #1
 8005278:	025b      	lsls	r3, r3, #9
 800527a:	b29b      	uxth	r3, r3
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	3b01      	subs	r3, #1
 8005284:	041b      	lsls	r3, r3, #16
 8005286:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	3b01      	subs	r3, #1
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005298:	4931      	ldr	r1, [pc, #196]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800529e:	4b30      	ldr	r3, [pc, #192]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	492d      	ldr	r1, [pc, #180]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052b0:	4b2b      	ldr	r3, [pc, #172]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	4928      	ldr	r1, [pc, #160]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052c2:	4b27      	ldr	r3, [pc, #156]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	4a26      	ldr	r2, [pc, #152]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <RCCEx_PLL3_Config+0x160>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	69d2      	ldr	r2, [r2, #28]
 80052da:	00d2      	lsls	r2, r2, #3
 80052dc:	4920      	ldr	r1, [pc, #128]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052e2:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d106      	bne.n	8005302 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052f4:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	4a19      	ldr	r2, [pc, #100]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 80052fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005300:	e00f      	b.n	8005322 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d106      	bne.n	8005316 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	4a14      	ldr	r2, [pc, #80]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 800530e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005314:	e005      	b.n	8005322 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005316:	4b12      	ldr	r3, [pc, #72]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	4a11      	ldr	r2, [pc, #68]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 800531c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005320:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a0e      	ldr	r2, [pc, #56]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800532e:	f7fc fb4f 	bl	80019d0 <HAL_GetTick>
 8005332:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005334:	e008      	b.n	8005348 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005336:	f7fc fb4b 	bl	80019d0 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e006      	b.n	8005356 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <RCCEx_PLL3_Config+0x15c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	58024400 	.word	0x58024400
 8005364:	ffff0007 	.word	0xffff0007

08005368 <__errno>:
 8005368:	4b01      	ldr	r3, [pc, #4]	; (8005370 <__errno+0x8>)
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	2400002c 	.word	0x2400002c

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4d0d      	ldr	r5, [pc, #52]	; (80053ac <__libc_init_array+0x38>)
 8005378:	4c0d      	ldr	r4, [pc, #52]	; (80053b0 <__libc_init_array+0x3c>)
 800537a:	1b64      	subs	r4, r4, r5
 800537c:	10a4      	asrs	r4, r4, #2
 800537e:	2600      	movs	r6, #0
 8005380:	42a6      	cmp	r6, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	4d0b      	ldr	r5, [pc, #44]	; (80053b4 <__libc_init_array+0x40>)
 8005386:	4c0c      	ldr	r4, [pc, #48]	; (80053b8 <__libc_init_array+0x44>)
 8005388:	f000 fc36 	bl	8005bf8 <_init>
 800538c:	1b64      	subs	r4, r4, r5
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	2600      	movs	r6, #0
 8005392:	42a6      	cmp	r6, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f855 3b04 	ldr.w	r3, [r5], #4
 800539c:	4798      	blx	r3
 800539e:	3601      	adds	r6, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a6:	4798      	blx	r3
 80053a8:	3601      	adds	r6, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	08007538 	.word	0x08007538
 80053b0:	08007538 	.word	0x08007538
 80053b4:	08007538 	.word	0x08007538
 80053b8:	0800753c 	.word	0x0800753c

080053bc <malloc>:
 80053bc:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <malloc+0xc>)
 80053be:	4601      	mov	r1, r0
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	f000 b88d 	b.w	80054e0 <_malloc_r>
 80053c6:	bf00      	nop
 80053c8:	2400002c 	.word	0x2400002c

080053cc <free>:
 80053cc:	4b02      	ldr	r3, [pc, #8]	; (80053d8 <free+0xc>)
 80053ce:	4601      	mov	r1, r0
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	f000 b819 	b.w	8005408 <_free_r>
 80053d6:	bf00      	nop
 80053d8:	2400002c 	.word	0x2400002c

080053dc <memcpy>:
 80053dc:	440a      	add	r2, r1
 80053de:	4291      	cmp	r1, r2
 80053e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053e4:	d100      	bne.n	80053e8 <memcpy+0xc>
 80053e6:	4770      	bx	lr
 80053e8:	b510      	push	{r4, lr}
 80053ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053f2:	4291      	cmp	r1, r2
 80053f4:	d1f9      	bne.n	80053ea <memcpy+0xe>
 80053f6:	bd10      	pop	{r4, pc}

080053f8 <memset>:
 80053f8:	4402      	add	r2, r0
 80053fa:	4603      	mov	r3, r0
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d100      	bne.n	8005402 <memset+0xa>
 8005400:	4770      	bx	lr
 8005402:	f803 1b01 	strb.w	r1, [r3], #1
 8005406:	e7f9      	b.n	80053fc <memset+0x4>

08005408 <_free_r>:
 8005408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800540a:	2900      	cmp	r1, #0
 800540c:	d044      	beq.n	8005498 <_free_r+0x90>
 800540e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005412:	9001      	str	r0, [sp, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f1a1 0404 	sub.w	r4, r1, #4
 800541a:	bfb8      	it	lt
 800541c:	18e4      	addlt	r4, r4, r3
 800541e:	f000 f8e3 	bl	80055e8 <__malloc_lock>
 8005422:	4a1e      	ldr	r2, [pc, #120]	; (800549c <_free_r+0x94>)
 8005424:	9801      	ldr	r0, [sp, #4]
 8005426:	6813      	ldr	r3, [r2, #0]
 8005428:	b933      	cbnz	r3, 8005438 <_free_r+0x30>
 800542a:	6063      	str	r3, [r4, #4]
 800542c:	6014      	str	r4, [r2, #0]
 800542e:	b003      	add	sp, #12
 8005430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005434:	f000 b8de 	b.w	80055f4 <__malloc_unlock>
 8005438:	42a3      	cmp	r3, r4
 800543a:	d908      	bls.n	800544e <_free_r+0x46>
 800543c:	6825      	ldr	r5, [r4, #0]
 800543e:	1961      	adds	r1, r4, r5
 8005440:	428b      	cmp	r3, r1
 8005442:	bf01      	itttt	eq
 8005444:	6819      	ldreq	r1, [r3, #0]
 8005446:	685b      	ldreq	r3, [r3, #4]
 8005448:	1949      	addeq	r1, r1, r5
 800544a:	6021      	streq	r1, [r4, #0]
 800544c:	e7ed      	b.n	800542a <_free_r+0x22>
 800544e:	461a      	mov	r2, r3
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	b10b      	cbz	r3, 8005458 <_free_r+0x50>
 8005454:	42a3      	cmp	r3, r4
 8005456:	d9fa      	bls.n	800544e <_free_r+0x46>
 8005458:	6811      	ldr	r1, [r2, #0]
 800545a:	1855      	adds	r5, r2, r1
 800545c:	42a5      	cmp	r5, r4
 800545e:	d10b      	bne.n	8005478 <_free_r+0x70>
 8005460:	6824      	ldr	r4, [r4, #0]
 8005462:	4421      	add	r1, r4
 8005464:	1854      	adds	r4, r2, r1
 8005466:	42a3      	cmp	r3, r4
 8005468:	6011      	str	r1, [r2, #0]
 800546a:	d1e0      	bne.n	800542e <_free_r+0x26>
 800546c:	681c      	ldr	r4, [r3, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	6053      	str	r3, [r2, #4]
 8005472:	4421      	add	r1, r4
 8005474:	6011      	str	r1, [r2, #0]
 8005476:	e7da      	b.n	800542e <_free_r+0x26>
 8005478:	d902      	bls.n	8005480 <_free_r+0x78>
 800547a:	230c      	movs	r3, #12
 800547c:	6003      	str	r3, [r0, #0]
 800547e:	e7d6      	b.n	800542e <_free_r+0x26>
 8005480:	6825      	ldr	r5, [r4, #0]
 8005482:	1961      	adds	r1, r4, r5
 8005484:	428b      	cmp	r3, r1
 8005486:	bf04      	itt	eq
 8005488:	6819      	ldreq	r1, [r3, #0]
 800548a:	685b      	ldreq	r3, [r3, #4]
 800548c:	6063      	str	r3, [r4, #4]
 800548e:	bf04      	itt	eq
 8005490:	1949      	addeq	r1, r1, r5
 8005492:	6021      	streq	r1, [r4, #0]
 8005494:	6054      	str	r4, [r2, #4]
 8005496:	e7ca      	b.n	800542e <_free_r+0x26>
 8005498:	b003      	add	sp, #12
 800549a:	bd30      	pop	{r4, r5, pc}
 800549c:	24000b20 	.word	0x24000b20

080054a0 <sbrk_aligned>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4e0e      	ldr	r6, [pc, #56]	; (80054dc <sbrk_aligned+0x3c>)
 80054a4:	460c      	mov	r4, r1
 80054a6:	6831      	ldr	r1, [r6, #0]
 80054a8:	4605      	mov	r5, r0
 80054aa:	b911      	cbnz	r1, 80054b2 <sbrk_aligned+0x12>
 80054ac:	f000 f88c 	bl	80055c8 <_sbrk_r>
 80054b0:	6030      	str	r0, [r6, #0]
 80054b2:	4621      	mov	r1, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 f887 	bl	80055c8 <_sbrk_r>
 80054ba:	1c43      	adds	r3, r0, #1
 80054bc:	d00a      	beq.n	80054d4 <sbrk_aligned+0x34>
 80054be:	1cc4      	adds	r4, r0, #3
 80054c0:	f024 0403 	bic.w	r4, r4, #3
 80054c4:	42a0      	cmp	r0, r4
 80054c6:	d007      	beq.n	80054d8 <sbrk_aligned+0x38>
 80054c8:	1a21      	subs	r1, r4, r0
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f87c 	bl	80055c8 <_sbrk_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d101      	bne.n	80054d8 <sbrk_aligned+0x38>
 80054d4:	f04f 34ff 	mov.w	r4, #4294967295
 80054d8:	4620      	mov	r0, r4
 80054da:	bd70      	pop	{r4, r5, r6, pc}
 80054dc:	24000b24 	.word	0x24000b24

080054e0 <_malloc_r>:
 80054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e4:	1ccd      	adds	r5, r1, #3
 80054e6:	f025 0503 	bic.w	r5, r5, #3
 80054ea:	3508      	adds	r5, #8
 80054ec:	2d0c      	cmp	r5, #12
 80054ee:	bf38      	it	cc
 80054f0:	250c      	movcc	r5, #12
 80054f2:	2d00      	cmp	r5, #0
 80054f4:	4607      	mov	r7, r0
 80054f6:	db01      	blt.n	80054fc <_malloc_r+0x1c>
 80054f8:	42a9      	cmp	r1, r5
 80054fa:	d905      	bls.n	8005508 <_malloc_r+0x28>
 80054fc:	230c      	movs	r3, #12
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	2600      	movs	r6, #0
 8005502:	4630      	mov	r0, r6
 8005504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005508:	4e2e      	ldr	r6, [pc, #184]	; (80055c4 <_malloc_r+0xe4>)
 800550a:	f000 f86d 	bl	80055e8 <__malloc_lock>
 800550e:	6833      	ldr	r3, [r6, #0]
 8005510:	461c      	mov	r4, r3
 8005512:	bb34      	cbnz	r4, 8005562 <_malloc_r+0x82>
 8005514:	4629      	mov	r1, r5
 8005516:	4638      	mov	r0, r7
 8005518:	f7ff ffc2 	bl	80054a0 <sbrk_aligned>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	4604      	mov	r4, r0
 8005520:	d14d      	bne.n	80055be <_malloc_r+0xde>
 8005522:	6834      	ldr	r4, [r6, #0]
 8005524:	4626      	mov	r6, r4
 8005526:	2e00      	cmp	r6, #0
 8005528:	d140      	bne.n	80055ac <_malloc_r+0xcc>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	4631      	mov	r1, r6
 800552e:	4638      	mov	r0, r7
 8005530:	eb04 0803 	add.w	r8, r4, r3
 8005534:	f000 f848 	bl	80055c8 <_sbrk_r>
 8005538:	4580      	cmp	r8, r0
 800553a:	d13a      	bne.n	80055b2 <_malloc_r+0xd2>
 800553c:	6821      	ldr	r1, [r4, #0]
 800553e:	3503      	adds	r5, #3
 8005540:	1a6d      	subs	r5, r5, r1
 8005542:	f025 0503 	bic.w	r5, r5, #3
 8005546:	3508      	adds	r5, #8
 8005548:	2d0c      	cmp	r5, #12
 800554a:	bf38      	it	cc
 800554c:	250c      	movcc	r5, #12
 800554e:	4629      	mov	r1, r5
 8005550:	4638      	mov	r0, r7
 8005552:	f7ff ffa5 	bl	80054a0 <sbrk_aligned>
 8005556:	3001      	adds	r0, #1
 8005558:	d02b      	beq.n	80055b2 <_malloc_r+0xd2>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	442b      	add	r3, r5
 800555e:	6023      	str	r3, [r4, #0]
 8005560:	e00e      	b.n	8005580 <_malloc_r+0xa0>
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	1b52      	subs	r2, r2, r5
 8005566:	d41e      	bmi.n	80055a6 <_malloc_r+0xc6>
 8005568:	2a0b      	cmp	r2, #11
 800556a:	d916      	bls.n	800559a <_malloc_r+0xba>
 800556c:	1961      	adds	r1, r4, r5
 800556e:	42a3      	cmp	r3, r4
 8005570:	6025      	str	r5, [r4, #0]
 8005572:	bf18      	it	ne
 8005574:	6059      	strne	r1, [r3, #4]
 8005576:	6863      	ldr	r3, [r4, #4]
 8005578:	bf08      	it	eq
 800557a:	6031      	streq	r1, [r6, #0]
 800557c:	5162      	str	r2, [r4, r5]
 800557e:	604b      	str	r3, [r1, #4]
 8005580:	4638      	mov	r0, r7
 8005582:	f104 060b 	add.w	r6, r4, #11
 8005586:	f000 f835 	bl	80055f4 <__malloc_unlock>
 800558a:	f026 0607 	bic.w	r6, r6, #7
 800558e:	1d23      	adds	r3, r4, #4
 8005590:	1af2      	subs	r2, r6, r3
 8005592:	d0b6      	beq.n	8005502 <_malloc_r+0x22>
 8005594:	1b9b      	subs	r3, r3, r6
 8005596:	50a3      	str	r3, [r4, r2]
 8005598:	e7b3      	b.n	8005502 <_malloc_r+0x22>
 800559a:	6862      	ldr	r2, [r4, #4]
 800559c:	42a3      	cmp	r3, r4
 800559e:	bf0c      	ite	eq
 80055a0:	6032      	streq	r2, [r6, #0]
 80055a2:	605a      	strne	r2, [r3, #4]
 80055a4:	e7ec      	b.n	8005580 <_malloc_r+0xa0>
 80055a6:	4623      	mov	r3, r4
 80055a8:	6864      	ldr	r4, [r4, #4]
 80055aa:	e7b2      	b.n	8005512 <_malloc_r+0x32>
 80055ac:	4634      	mov	r4, r6
 80055ae:	6876      	ldr	r6, [r6, #4]
 80055b0:	e7b9      	b.n	8005526 <_malloc_r+0x46>
 80055b2:	230c      	movs	r3, #12
 80055b4:	603b      	str	r3, [r7, #0]
 80055b6:	4638      	mov	r0, r7
 80055b8:	f000 f81c 	bl	80055f4 <__malloc_unlock>
 80055bc:	e7a1      	b.n	8005502 <_malloc_r+0x22>
 80055be:	6025      	str	r5, [r4, #0]
 80055c0:	e7de      	b.n	8005580 <_malloc_r+0xa0>
 80055c2:	bf00      	nop
 80055c4:	24000b20 	.word	0x24000b20

080055c8 <_sbrk_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d06      	ldr	r5, [pc, #24]	; (80055e4 <_sbrk_r+0x1c>)
 80055cc:	2300      	movs	r3, #0
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	602b      	str	r3, [r5, #0]
 80055d4:	f7fc f88e 	bl	80016f4 <_sbrk>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_sbrk_r+0x1a>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_sbrk_r+0x1a>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	24000b28 	.word	0x24000b28

080055e8 <__malloc_lock>:
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <__malloc_lock+0x8>)
 80055ea:	f000 b809 	b.w	8005600 <__retarget_lock_acquire_recursive>
 80055ee:	bf00      	nop
 80055f0:	24000b2c 	.word	0x24000b2c

080055f4 <__malloc_unlock>:
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <__malloc_unlock+0x8>)
 80055f6:	f000 b804 	b.w	8005602 <__retarget_lock_release_recursive>
 80055fa:	bf00      	nop
 80055fc:	24000b2c 	.word	0x24000b2c

08005600 <__retarget_lock_acquire_recursive>:
 8005600:	4770      	bx	lr

08005602 <__retarget_lock_release_recursive>:
 8005602:	4770      	bx	lr

08005604 <checkint>:
 8005604:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005608:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800560c:	429a      	cmp	r2, r3
 800560e:	b570      	push	{r4, r5, r6, lr}
 8005610:	dd2a      	ble.n	8005668 <checkint+0x64>
 8005612:	f240 4333 	movw	r3, #1075	; 0x433
 8005616:	429a      	cmp	r2, r3
 8005618:	dc24      	bgt.n	8005664 <checkint+0x60>
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	f1a3 0620 	sub.w	r6, r3, #32
 8005620:	f04f 32ff 	mov.w	r2, #4294967295
 8005624:	fa02 f403 	lsl.w	r4, r2, r3
 8005628:	fa02 f606 	lsl.w	r6, r2, r6
 800562c:	f1c3 0520 	rsb	r5, r3, #32
 8005630:	fa22 f505 	lsr.w	r5, r2, r5
 8005634:	4334      	orrs	r4, r6
 8005636:	432c      	orrs	r4, r5
 8005638:	409a      	lsls	r2, r3
 800563a:	ea20 0202 	bic.w	r2, r0, r2
 800563e:	ea21 0404 	bic.w	r4, r1, r4
 8005642:	4322      	orrs	r2, r4
 8005644:	f1a3 0420 	sub.w	r4, r3, #32
 8005648:	f1c3 0220 	rsb	r2, r3, #32
 800564c:	d10c      	bne.n	8005668 <checkint+0x64>
 800564e:	40d8      	lsrs	r0, r3
 8005650:	fa01 f302 	lsl.w	r3, r1, r2
 8005654:	4318      	orrs	r0, r3
 8005656:	40e1      	lsrs	r1, r4
 8005658:	4308      	orrs	r0, r1
 800565a:	f000 0001 	and.w	r0, r0, #1
 800565e:	f1d0 0002 	rsbs	r0, r0, #2
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	2002      	movs	r0, #2
 8005666:	e7fc      	b.n	8005662 <checkint+0x5e>
 8005668:	2000      	movs	r0, #0
 800566a:	e7fa      	b.n	8005662 <checkint+0x5e>
 800566c:	0000      	movs	r0, r0
	...

08005670 <pow>:
 8005670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005674:	ee10 4a90 	vmov	r4, s1
 8005678:	ed2d 8b0a 	vpush	{d8-d12}
 800567c:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8005680:	ee11 7a90 	vmov	r7, s3
 8005684:	f10a 32ff 	add.w	r2, sl, #4294967295
 8005688:	f240 73fd 	movw	r3, #2045	; 0x7fd
 800568c:	429a      	cmp	r2, r3
 800568e:	ee10 6a10 	vmov	r6, s0
 8005692:	ee11 0a10 	vmov	r0, s2
 8005696:	b086      	sub	sp, #24
 8005698:	46d4      	mov	ip, sl
 800569a:	ea4f 5517 	mov.w	r5, r7, lsr #20
 800569e:	d806      	bhi.n	80056ae <pow+0x3e>
 80056a0:	f3c5 030a 	ubfx	r3, r5, #0, #11
 80056a4:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 80056a8:	2b7f      	cmp	r3, #127	; 0x7f
 80056aa:	f240 8156 	bls.w	800595a <pow+0x2ea>
 80056ae:	1802      	adds	r2, r0, r0
 80056b0:	eb47 0107 	adc.w	r1, r7, r7
 80056b4:	f06f 0e01 	mvn.w	lr, #1
 80056b8:	f112 39ff 	adds.w	r9, r2, #4294967295
 80056bc:	f141 38ff 	adc.w	r8, r1, #4294967295
 80056c0:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 80056c4:	45ce      	cmp	lr, r9
 80056c6:	eb73 0808 	sbcs.w	r8, r3, r8
 80056ca:	d23f      	bcs.n	800574c <pow+0xdc>
 80056cc:	ea52 0301 	orrs.w	r3, r2, r1
 80056d0:	f04f 0300 	mov.w	r3, #0
 80056d4:	d10c      	bne.n	80056f0 <pow+0x80>
 80056d6:	19b6      	adds	r6, r6, r6
 80056d8:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 80056dc:	4164      	adcs	r4, r4
 80056de:	42b3      	cmp	r3, r6
 80056e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80056e4:	41a3      	sbcs	r3, r4
 80056e6:	f0c0 808c 	bcc.w	8005802 <pow+0x192>
 80056ea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80056ee:	e028      	b.n	8005742 <pow+0xd2>
 80056f0:	4da3      	ldr	r5, [pc, #652]	; (8005980 <pow+0x310>)
 80056f2:	42ac      	cmp	r4, r5
 80056f4:	bf08      	it	eq
 80056f6:	429e      	cmpeq	r6, r3
 80056f8:	d107      	bne.n	800570a <pow+0x9a>
 80056fa:	1800      	adds	r0, r0, r0
 80056fc:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8005700:	417f      	adcs	r7, r7
 8005702:	4283      	cmp	r3, r0
 8005704:	4b9f      	ldr	r3, [pc, #636]	; (8005984 <pow+0x314>)
 8005706:	41bb      	sbcs	r3, r7
 8005708:	e7ed      	b.n	80056e6 <pow+0x76>
 800570a:	19b6      	adds	r6, r6, r6
 800570c:	489e      	ldr	r0, [pc, #632]	; (8005988 <pow+0x318>)
 800570e:	4164      	adcs	r4, r4
 8005710:	42b3      	cmp	r3, r6
 8005712:	eb70 0504 	sbcs.w	r5, r0, r4
 8005716:	d374      	bcc.n	8005802 <pow+0x192>
 8005718:	4281      	cmp	r1, r0
 800571a:	bf08      	it	eq
 800571c:	429a      	cmpeq	r2, r3
 800571e:	d170      	bne.n	8005802 <pow+0x192>
 8005720:	4a9a      	ldr	r2, [pc, #616]	; (800598c <pow+0x31c>)
 8005722:	4294      	cmp	r4, r2
 8005724:	bf08      	it	eq
 8005726:	429e      	cmpeq	r6, r3
 8005728:	d0df      	beq.n	80056ea <pow+0x7a>
 800572a:	4294      	cmp	r4, r2
 800572c:	ea6f 0707 	mvn.w	r7, r7
 8005730:	bf34      	ite	cc
 8005732:	2400      	movcc	r4, #0
 8005734:	2401      	movcs	r4, #1
 8005736:	0fff      	lsrs	r7, r7, #31
 8005738:	42bc      	cmp	r4, r7
 800573a:	f040 81d9 	bne.w	8005af0 <pow+0x480>
 800573e:	ee21 0b01 	vmul.f64	d0, d1, d1
 8005742:	b006      	add	sp, #24
 8005744:	ecbd 8b0a 	vpop	{d8-d12}
 8005748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574c:	eb16 0806 	adds.w	r8, r6, r6
 8005750:	eb44 0904 	adc.w	r9, r4, r4
 8005754:	f118 31ff 	adds.w	r1, r8, #4294967295
 8005758:	f169 0200 	sbc.w	r2, r9, #0
 800575c:	458e      	cmp	lr, r1
 800575e:	4193      	sbcs	r3, r2
 8005760:	d223      	bcs.n	80057aa <pow+0x13a>
 8005762:	ee20 0b00 	vmul.f64	d0, d0, d0
 8005766:	2c00      	cmp	r4, #0
 8005768:	da12      	bge.n	8005790 <pow+0x120>
 800576a:	4639      	mov	r1, r7
 800576c:	f7ff ff4a 	bl	8005604 <checkint>
 8005770:	2801      	cmp	r0, #1
 8005772:	d10d      	bne.n	8005790 <pow+0x120>
 8005774:	eeb1 0b40 	vneg.f64	d0, d0
 8005778:	ea58 0309 	orrs.w	r3, r8, r9
 800577c:	d10a      	bne.n	8005794 <pow+0x124>
 800577e:	2f00      	cmp	r7, #0
 8005780:	dadf      	bge.n	8005742 <pow+0xd2>
 8005782:	b006      	add	sp, #24
 8005784:	ecbd 8b0a 	vpop	{d8-d12}
 8005788:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800578c:	f000 b9f0 	b.w	8005b70 <__math_divzero>
 8005790:	2000      	movs	r0, #0
 8005792:	e7f1      	b.n	8005778 <pow+0x108>
 8005794:	2f00      	cmp	r7, #0
 8005796:	dad4      	bge.n	8005742 <pow+0xd2>
 8005798:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800579c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80057a0:	ed8d 7b00 	vstr	d7, [sp]
 80057a4:	ed9d 0b00 	vldr	d0, [sp]
 80057a8:	e7cb      	b.n	8005742 <pow+0xd2>
 80057aa:	2c00      	cmp	r4, #0
 80057ac:	da2c      	bge.n	8005808 <pow+0x198>
 80057ae:	4639      	mov	r1, r7
 80057b0:	f7ff ff28 	bl	8005604 <checkint>
 80057b4:	b930      	cbnz	r0, 80057c4 <pow+0x154>
 80057b6:	b006      	add	sp, #24
 80057b8:	ecbd 8b0a 	vpop	{d8-d12}
 80057bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c0:	f000 b9ee 	b.w	8005ba0 <__math_invalid>
 80057c4:	2801      	cmp	r0, #1
 80057c6:	bf14      	ite	ne
 80057c8:	2000      	movne	r0, #0
 80057ca:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 80057ce:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80057d2:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 80057d6:	f3c5 020a 	ubfx	r2, r5, #0, #11
 80057da:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 80057de:	2b7f      	cmp	r3, #127	; 0x7f
 80057e0:	d92d      	bls.n	800583e <pow+0x1ce>
 80057e2:	4b67      	ldr	r3, [pc, #412]	; (8005980 <pow+0x310>)
 80057e4:	2000      	movs	r0, #0
 80057e6:	429c      	cmp	r4, r3
 80057e8:	bf08      	it	eq
 80057ea:	4286      	cmpeq	r6, r0
 80057ec:	f43f af7d 	beq.w	80056ea <pow+0x7a>
 80057f0:	f240 31bd 	movw	r1, #957	; 0x3bd
 80057f4:	428a      	cmp	r2, r1
 80057f6:	d80c      	bhi.n	8005812 <pow+0x1a2>
 80057f8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80057fc:	42b0      	cmp	r0, r6
 80057fe:	41a3      	sbcs	r3, r4
 8005800:	d204      	bcs.n	800580c <pow+0x19c>
 8005802:	ee31 0b00 	vadd.f64	d0, d1, d0
 8005806:	e79c      	b.n	8005742 <pow+0xd2>
 8005808:	2000      	movs	r0, #0
 800580a:	e7e4      	b.n	80057d6 <pow+0x166>
 800580c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8005810:	e797      	b.n	8005742 <pow+0xd2>
 8005812:	2e01      	cmp	r6, #1
 8005814:	eb74 0303 	sbcs.w	r3, r4, r3
 8005818:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800581c:	bf34      	ite	cc
 800581e:	2301      	movcc	r3, #1
 8005820:	2300      	movcs	r3, #0
 8005822:	4295      	cmp	r5, r2
 8005824:	bf8c      	ite	hi
 8005826:	2500      	movhi	r5, #0
 8005828:	2501      	movls	r5, #1
 800582a:	42ab      	cmp	r3, r5
 800582c:	f000 809d 	beq.w	800596a <pow+0x2fa>
 8005830:	b006      	add	sp, #24
 8005832:	ecbd 8b0a 	vpop	{d8-d12}
 8005836:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800583a:	f000 b991 	b.w	8005b60 <__math_oflow>
 800583e:	f1bc 0f00 	cmp.w	ip, #0
 8005842:	d10b      	bne.n	800585c <pow+0x1ec>
 8005844:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8005978 <pow+0x308>
 8005848:	ee20 7b07 	vmul.f64	d7, d0, d7
 800584c:	ec53 2b17 	vmov	r2, r3, d7
 8005850:	ee17 6a10 	vmov	r6, s14
 8005854:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005858:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 800585c:	4b4c      	ldr	r3, [pc, #304]	; (8005990 <pow+0x320>)
 800585e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8005862:	4423      	add	r3, r4
 8005864:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8005868:	1519      	asrs	r1, r3, #20
 800586a:	0d1b      	lsrs	r3, r3, #20
 800586c:	051b      	lsls	r3, r3, #20
 800586e:	eba4 0903 	sub.w	r9, r4, r3
 8005872:	4b48      	ldr	r3, [pc, #288]	; (8005994 <pow+0x324>)
 8005874:	ee04 1a10 	vmov	s8, r1
 8005878:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 800587c:	f1b6 0800 	subs.w	r8, r6, #0
 8005880:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8005884:	ec49 8b15 	vmov	d5, r8, r9
 8005888:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 800588c:	eea5 6b07 	vfma.f64	d6, d5, d7
 8005890:	ed93 7b00 	vldr	d7, [r3]
 8005894:	ed93 5b02 	vldr	d5, [r3, #8]
 8005898:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 800589c:	eea4 2b07 	vfma.f64	d2, d4, d7
 80058a0:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 80058a4:	ee36 ab02 	vadd.f64	d10, d6, d2
 80058a8:	ee32 2b4a 	vsub.f64	d2, d2, d10
 80058ac:	eea4 7b05 	vfma.f64	d7, d4, d5
 80058b0:	ed93 5b04 	vldr	d5, [r3, #16]
 80058b4:	ee32 2b06 	vadd.f64	d2, d2, d6
 80058b8:	ee37 7b02 	vadd.f64	d7, d7, d2
 80058bc:	ee26 5b05 	vmul.f64	d5, d6, d5
 80058c0:	ed93 4b08 	vldr	d4, [r3, #32]
 80058c4:	ee26 0b05 	vmul.f64	d0, d6, d5
 80058c8:	eeb0 9b40 	vmov.f64	d9, d0
 80058cc:	ee95 9b06 	vfnms.f64	d9, d5, d6
 80058d0:	ed93 5b06 	vldr	d5, [r3, #24]
 80058d4:	ee3a 8b00 	vadd.f64	d8, d10, d0
 80058d8:	ee26 bb00 	vmul.f64	d11, d6, d0
 80058dc:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 80058e0:	eea6 5b04 	vfma.f64	d5, d6, d4
 80058e4:	ee3a ab48 	vsub.f64	d10, d10, d8
 80058e8:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 80058ec:	ee37 9b09 	vadd.f64	d9, d7, d9
 80058f0:	ee3a ab00 	vadd.f64	d10, d10, d0
 80058f4:	eea6 4b03 	vfma.f64	d4, d6, d3
 80058f8:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 80058fc:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8005900:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8005904:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8005908:	eea0 4b03 	vfma.f64	d4, d0, d3
 800590c:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005910:	eeab ab05 	vfma.f64	d10, d11, d5
 8005914:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8005918:	ee21 7b06 	vmul.f64	d7, d1, d6
 800591c:	ee17 3a90 	vmov	r3, s15
 8005920:	eeb0 5b47 	vmov.f64	d5, d7
 8005924:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8005928:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800592c:	18b2      	adds	r2, r6, r2
 800592e:	2a3e      	cmp	r2, #62	; 0x3e
 8005930:	ee91 5b06 	vfnms.f64	d5, d1, d6
 8005934:	ee38 8b46 	vsub.f64	d8, d8, d6
 8005938:	ee38 ab0a 	vadd.f64	d10, d8, d10
 800593c:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8005940:	d92b      	bls.n	800599a <pow+0x32a>
 8005942:	2a00      	cmp	r2, #0
 8005944:	da0b      	bge.n	800595e <pow+0x2ee>
 8005946:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800594a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800594e:	2800      	cmp	r0, #0
 8005950:	f43f aef7 	beq.w	8005742 <pow+0xd2>
 8005954:	eeb1 0b40 	vneg.f64	d0, d0
 8005958:	e6f3      	b.n	8005742 <pow+0xd2>
 800595a:	2000      	movs	r0, #0
 800595c:	e77e      	b.n	800585c <pow+0x1ec>
 800595e:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 8005962:	d919      	bls.n	8005998 <pow+0x328>
 8005964:	2b00      	cmp	r3, #0
 8005966:	f6bf af63 	bge.w	8005830 <pow+0x1c0>
 800596a:	b006      	add	sp, #24
 800596c:	ecbd 8b0a 	vpop	{d8-d12}
 8005970:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	f000 b8ec 	b.w	8005b50 <__math_uflow>
 8005978:	00000000 	.word	0x00000000
 800597c:	43300000 	.word	0x43300000
 8005980:	3ff00000 	.word	0x3ff00000
 8005984:	fff00000 	.word	0xfff00000
 8005988:	ffe00000 	.word	0xffe00000
 800598c:	7fe00000 	.word	0x7fe00000
 8005990:	c0196aab 	.word	0xc0196aab
 8005994:	08005c80 	.word	0x08005c80
 8005998:	2600      	movs	r6, #0
 800599a:	495d      	ldr	r1, [pc, #372]	; (8005b10 <pow+0x4a0>)
 800599c:	ed91 4b02 	vldr	d4, [r1, #8]
 80059a0:	ed91 3b00 	vldr	d3, [r1]
 80059a4:	eeb0 6b44 	vmov.f64	d6, d4
 80059a8:	eea7 6b03 	vfma.f64	d6, d7, d3
 80059ac:	ee16 5a10 	vmov	r5, s12
 80059b0:	ee36 6b44 	vsub.f64	d6, d6, d4
 80059b4:	ed91 4b04 	vldr	d4, [r1, #16]
 80059b8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80059bc:	eea6 7b04 	vfma.f64	d7, d6, d4
 80059c0:	eeb0 0b47 	vmov.f64	d0, d7
 80059c4:	ed91 7b06 	vldr	d7, [r1, #24]
 80059c8:	18dc      	adds	r4, r3, r3
 80059ca:	f104 030f 	add.w	r3, r4, #15
 80059ce:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80059d2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80059d6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80059da:	ee35 0b00 	vadd.f64	d0, d5, d0
 80059de:	ee20 6b00 	vmul.f64	d6, d0, d0
 80059e2:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80059e6:	ed91 5b08 	vldr	d5, [r1, #32]
 80059ea:	ee30 7b07 	vadd.f64	d7, d0, d7
 80059ee:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80059f2:	eea0 5b04 	vfma.f64	d5, d0, d4
 80059f6:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80059fa:	eea6 7b05 	vfma.f64	d7, d6, d5
 80059fe:	ee26 6b06 	vmul.f64	d6, d6, d6
 8005a02:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 8005a06:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8005a0a:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005a0e:	eea0 5b04 	vfma.f64	d5, d0, d4
 8005a12:	1940      	adds	r0, r0, r5
 8005a14:	2700      	movs	r7, #0
 8005a16:	eb17 020c 	adds.w	r2, r7, ip
 8005a1a:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8005a1e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8005a22:	2e00      	cmp	r6, #0
 8005a24:	d15f      	bne.n	8005ae6 <pow+0x476>
 8005a26:	42bd      	cmp	r5, r7
 8005a28:	db13      	blt.n	8005a52 <pow+0x3e2>
 8005a2a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8005a2e:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8005a32:	4610      	mov	r0, r2
 8005a34:	ec41 0b10 	vmov	d0, r0, r1
 8005a38:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005a3c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005af8 <pow+0x488>
 8005a40:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005a44:	b006      	add	sp, #24
 8005a46:	ecbd 8b0a 	vpop	{d8-d12}
 8005a4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a4e:	f000 b8bf 	b.w	8005bd0 <__math_check_oflow>
 8005a52:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8005a56:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	ec41 0b15 	vmov	d5, r0, r1
 8005a60:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8005a64:	ee27 6b05 	vmul.f64	d6, d7, d5
 8005a68:	ee35 7b06 	vadd.f64	d7, d5, d6
 8005a6c:	eeb0 3bc7 	vabs.f64	d3, d7
 8005a70:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8005a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a78:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005b00 <pow+0x490>
 8005a7c:	d52a      	bpl.n	8005ad4 <pow+0x464>
 8005a7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005a82:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8a:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8005a8e:	ee35 6b06 	vadd.f64	d6, d5, d6
 8005a92:	bf48      	it	mi
 8005a94:	eeb0 4b43 	vmovmi.f64	d4, d3
 8005a98:	ee37 3b04 	vadd.f64	d3, d7, d4
 8005a9c:	ee34 5b43 	vsub.f64	d5, d4, d3
 8005aa0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005aa4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005aa8:	ee37 7b03 	vadd.f64	d7, d7, d3
 8005aac:	ee37 7b44 	vsub.f64	d7, d7, d4
 8005ab0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ab8:	d104      	bne.n	8005ac4 <pow+0x454>
 8005aba:	4632      	mov	r2, r6
 8005abc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005ac0:	ec43 2b17 	vmov	d7, r2, r3
 8005ac4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005ac8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005acc:	ee26 6b00 	vmul.f64	d6, d6, d0
 8005ad0:	ed8d 6b04 	vstr	d6, [sp, #16]
 8005ad4:	ee27 0b00 	vmul.f64	d0, d7, d0
 8005ad8:	b006      	add	sp, #24
 8005ada:	ecbd 8b0a 	vpop	{d8-d12}
 8005ade:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae2:	f000 b86c 	b.w	8005bbe <__math_check_uflow>
 8005ae6:	ec43 2b10 	vmov	d0, r2, r3
 8005aea:	eea7 0b00 	vfma.f64	d0, d7, d0
 8005aee:	e628      	b.n	8005742 <pow+0xd2>
 8005af0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005b08 <pow+0x498>
 8005af4:	e625      	b.n	8005742 <pow+0xd2>
 8005af6:	bf00      	nop
 8005af8:	00000000 	.word	0x00000000
 8005afc:	7f000000 	.word	0x7f000000
 8005b00:	00000000 	.word	0x00000000
 8005b04:	00100000 	.word	0x00100000
	...
 8005b10:	08006cc8 	.word	0x08006cc8

08005b14 <with_errno>:
 8005b14:	b513      	push	{r0, r1, r4, lr}
 8005b16:	4604      	mov	r4, r0
 8005b18:	ed8d 0b00 	vstr	d0, [sp]
 8005b1c:	f7ff fc24 	bl	8005368 <__errno>
 8005b20:	ed9d 0b00 	vldr	d0, [sp]
 8005b24:	6004      	str	r4, [r0, #0]
 8005b26:	b002      	add	sp, #8
 8005b28:	bd10      	pop	{r4, pc}

08005b2a <xflow>:
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	b158      	cbz	r0, 8005b46 <xflow+0x1c>
 8005b2e:	eeb1 7b40 	vneg.f64	d7, d0
 8005b32:	ed8d 7b00 	vstr	d7, [sp]
 8005b36:	ed9d 7b00 	vldr	d7, [sp]
 8005b3a:	2022      	movs	r0, #34	; 0x22
 8005b3c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005b40:	b002      	add	sp, #8
 8005b42:	f7ff bfe7 	b.w	8005b14 <with_errno>
 8005b46:	eeb0 7b40 	vmov.f64	d7, d0
 8005b4a:	e7f2      	b.n	8005b32 <xflow+0x8>
 8005b4c:	0000      	movs	r0, r0
	...

08005b50 <__math_uflow>:
 8005b50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005b58 <__math_uflow+0x8>
 8005b54:	f7ff bfe9 	b.w	8005b2a <xflow>
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	10000000 	.word	0x10000000

08005b60 <__math_oflow>:
 8005b60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005b68 <__math_oflow+0x8>
 8005b64:	f7ff bfe1 	b.w	8005b2a <xflow>
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	70000000 	.word	0x70000000

08005b70 <__math_divzero>:
 8005b70:	b082      	sub	sp, #8
 8005b72:	2800      	cmp	r0, #0
 8005b74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005b78:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8005b7c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8005b80:	ed8d 7b00 	vstr	d7, [sp]
 8005b84:	ed9d 0b00 	vldr	d0, [sp]
 8005b88:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8005b98 <__math_divzero+0x28>
 8005b8c:	2022      	movs	r0, #34	; 0x22
 8005b8e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8005b92:	b002      	add	sp, #8
 8005b94:	f7ff bfbe 	b.w	8005b14 <with_errno>
	...

08005ba0 <__math_invalid>:
 8005ba0:	eeb0 7b40 	vmov.f64	d7, d0
 8005ba4:	eeb4 7b47 	vcmp.f64	d7, d7
 8005ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bac:	ee30 6b40 	vsub.f64	d6, d0, d0
 8005bb0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8005bb4:	d602      	bvs.n	8005bbc <__math_invalid+0x1c>
 8005bb6:	2021      	movs	r0, #33	; 0x21
 8005bb8:	f7ff bfac 	b.w	8005b14 <with_errno>
 8005bbc:	4770      	bx	lr

08005bbe <__math_check_uflow>:
 8005bbe:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc6:	d102      	bne.n	8005bce <__math_check_uflow+0x10>
 8005bc8:	2022      	movs	r0, #34	; 0x22
 8005bca:	f7ff bfa3 	b.w	8005b14 <with_errno>
 8005bce:	4770      	bx	lr

08005bd0 <__math_check_oflow>:
 8005bd0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8005bf0 <__math_check_oflow+0x20>
 8005bd4:	eeb0 7bc0 	vabs.f64	d7, d0
 8005bd8:	eeb4 7b46 	vcmp.f64	d7, d6
 8005bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be0:	dd02      	ble.n	8005be8 <__math_check_oflow+0x18>
 8005be2:	2022      	movs	r0, #34	; 0x22
 8005be4:	f7ff bf96 	b.w	8005b14 <with_errno>
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	f3af 8000 	nop.w
 8005bf0:	ffffffff 	.word	0xffffffff
 8005bf4:	7fefffff 	.word	0x7fefffff

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
