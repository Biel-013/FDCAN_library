
FDCAN_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004708  08004708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  0800470c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f24  24000014  08004720  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000f38  08004720  00020f38  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e2d6  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c8c  00000000  00000000  0002e35b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ae8  00000000  00000000  0002ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000083b  00000000  00000000  00030ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035b80  00000000  00000000  0003130b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000c4ee  00000000  00000000  00066e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00158d80  00000000  00000000  00073379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00002d48  00000000  00000000  001cc0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000070  00000000  00000000  001cee44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004680 	.word	0x08004680

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08004680 	.word	0x08004680

080002d8 <HAL_FDCAN_RxFifo0Callback>:
 * @brief  Função chamada quando detectado uma mensagem no barramento da CAN
 * @param  hfdcan: Handle da CAN || normalmente "hfdcan1"
 * @param  RxFifo0ITs: FIFO em que foi detectado a mensagem
 * @retval ***NONE***
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	/* Pisca o  LED 2 caso tenha algo para receber pela CAN */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_4);
 80002e2:	2110      	movs	r1, #16
 80002e4:	480e      	ldr	r0, [pc, #56]	; (8000320 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80002e6:	f002 f934 	bl	8002552 <HAL_GPIO_TogglePin>

	/* Pega as informações e dados da CAN, e armazena respectivamente em RxHeader e RxData */
	HAL_FDCAN_GetRxMessage(hFDCAN, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80002ea:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80002ec:	6818      	ldr	r0, [r3, #0]
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80002f0:	4a0e      	ldr	r2, [pc, #56]	; (800032c <HAL_FDCAN_RxFifo0Callback+0x54>)
 80002f2:	2140      	movs	r1, #64	; 0x40
 80002f4:	f001 f8fe 	bl	80014f4 <HAL_FDCAN_GetRxMessage>

	/* Chama a função de tratamento de dados */
	CAN_Stream_ReceiveCallback(&RxHeader, RxData);
 80002f8:	490b      	ldr	r1, [pc, #44]	; (8000328 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80002fa:	480c      	ldr	r0, [pc, #48]	; (800032c <HAL_FDCAN_RxFifo0Callback+0x54>)
 80002fc:	f000 f818 	bl	8000330 <CAN_Stream_ReceiveCallback>

	/* Ativa novamente a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(hFDCAN, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)
 8000300:	4b08      	ldr	r3, [pc, #32]	; (8000324 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2200      	movs	r2, #0
 8000306:	2101      	movs	r1, #1
 8000308:	4618      	mov	r0, r3
 800030a:	f001 fa61 	bl	80017d0 <HAL_FDCAN_ActivateNotification>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <HAL_FDCAN_RxFifo0Callback+0x40>
			!= HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000314:	f000 fbac 	bl	8000a70 <Error_Handler>
	}
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	58020c00 	.word	0x58020c00
 8000324:	24000000 	.word	0x24000000
 8000328:	24000e8c 	.word	0x24000e8c
 800032c:	24000e64 	.word	0x24000e64

08000330 <CAN_Stream_ReceiveCallback>:
 * @param  hRxFDCAN: Handler com as innformações do flame recebido
 * @param  Buffer: Buffer com os dados e informações da mensagem
 * @retval Status de execução da função
 */
FDCAN_StatusTypedef CAN_Stream_ReceiveCallback(FDCAN_RxHeaderTypeDef *hRxFDCAN,
		uint8_t *Buffer) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
	/* Caso o indentificador não faça parte dos ID's utilizados a função quebra */
	if (hRxFDCAN->Identifier > CAN_IDS_NUMBER)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000342:	d901      	bls.n	8000348 <CAN_Stream_ReceiveCallback+0x18>
		/* Caso de errado, retorna erro */
		return FDCAN_ERROR;
 8000344:	2301      	movs	r3, #1
 8000346:	e04c      	b.n	80003e2 <CAN_Stream_ReceiveCallback+0xb2>

	/* Variavel para armazenamento do tamanho dos dados */
	uint8_t SIZE_DATA = hRxFDCAN->DataLength >> 16U;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	0c1b      	lsrs	r3, r3, #16
 800034e:	75fb      	strb	r3, [r7, #23]

	for (int i = SIZE_DATA; i < 8; i++)
 8000350:	7dfb      	ldrb	r3, [r7, #23]
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	e00b      	b.n	800036e <CAN_Stream_ReceiveCallback+0x3e>
		CAN_stream.Data_buf[hRxFDCAN->Identifier][i] = 0;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4a24      	ldr	r2, [pc, #144]	; (80003ec <CAN_Stream_ReceiveCallback+0xbc>)
 800035c:	00db      	lsls	r3, r3, #3
 800035e:	441a      	add	r2, r3
 8000360:	693b      	ldr	r3, [r7, #16]
 8000362:	4413      	add	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	701a      	strb	r2, [r3, #0]
	for (int i = SIZE_DATA; i < 8; i++)
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	3301      	adds	r3, #1
 800036c:	613b      	str	r3, [r7, #16]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	2b07      	cmp	r3, #7
 8000372:	ddf0      	ble.n	8000356 <CAN_Stream_ReceiveCallback+0x26>

	if (SIZE_DATA <= INT_SIZE)
 8000374:	7dfb      	ldrb	r3, [r7, #23]
 8000376:	2b04      	cmp	r3, #4
 8000378:	d801      	bhi.n	800037e <CAN_Stream_ReceiveCallback+0x4e>
		SIZE_DATA = INT_SIZE;
 800037a:	2304      	movs	r3, #4
 800037c:	75fb      	strb	r3, [r7, #23]

	/*Switch case para armazenar os dados de forma correta na memória*/
	switch (SIZE_DATA) {
 800037e:	7dfb      	ldrb	r3, [r7, #23]
 8000380:	2b08      	cmp	r3, #8
 8000382:	d016      	beq.n	80003b2 <CAN_Stream_ReceiveCallback+0x82>
 8000384:	2b08      	cmp	r3, #8
 8000386:	dc1c      	bgt.n	80003c2 <CAN_Stream_ReceiveCallback+0x92>
 8000388:	2b04      	cmp	r3, #4
 800038a:	d002      	beq.n	8000392 <CAN_Stream_ReceiveCallback+0x62>
 800038c:	2b05      	cmp	r3, #5
 800038e:	d008      	beq.n	80003a2 <CAN_Stream_ReceiveCallback+0x72>
	case DOUBLE_SIZE:
		/*Tratamento de valores doubles*/
		CAN_Storage_DOUBLE(hRxFDCAN->Identifier, Buffer);
		break;
	default:
		break;
 8000390:	e017      	b.n	80003c2 <CAN_Stream_ReceiveCallback+0x92>
		CAN_Storage_INT(hRxFDCAN->Identifier, Buffer);
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	b29b      	uxth	r3, r3
 8000398:	6839      	ldr	r1, [r7, #0]
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f91c 	bl	80005d8 <CAN_Storage_INT>
		break;
 80003a0:	e010      	b.n	80003c4 <CAN_Stream_ReceiveCallback+0x94>
		CAN_Storage_FLOAT(hRxFDCAN->Identifier, Buffer);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	6839      	ldr	r1, [r7, #0]
 80003aa:	4618      	mov	r0, r3
 80003ac:	f000 f950 	bl	8000650 <CAN_Storage_FLOAT>
		break;
 80003b0:	e008      	b.n	80003c4 <CAN_Stream_ReceiveCallback+0x94>
		CAN_Storage_DOUBLE(hRxFDCAN->Identifier, Buffer);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	b29b      	uxth	r3, r3
 80003b8:	6839      	ldr	r1, [r7, #0]
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 f984 	bl	80006c8 <CAN_Storage_DOUBLE>
		break;
 80003c0:	e000      	b.n	80003c4 <CAN_Stream_ReceiveCallback+0x94>
		break;
 80003c2:	bf00      	nop
	}

	for (int i = 0; i < 8; i++)
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	e007      	b.n	80003da <CAN_Stream_ReceiveCallback+0xaa>
		Buffer[i] = 0;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	4413      	add	r3, r2
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++)
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	3301      	adds	r3, #1
 80003d8:	60fb      	str	r3, [r7, #12]
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	2b07      	cmp	r3, #7
 80003de:	ddf4      	ble.n	80003ca <CAN_Stream_ReceiveCallback+0x9a>

	/* Caso de tudo certo, retorna ok */
	return FDCAN_OK;
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	24000030 	.word	0x24000030

080003f0 <CAN_Configure_Init>:
/**
 * @brief  Configura a CAN, overwrite das configurações do .IOC
 * @param  ***NONE***
 * @retval Status de execução da função
 */
FDCAN_StatusTypedef CAN_Configure_Init() {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	/* Configura os parâmetros da FDCAN - LEITURA DO RELATÓRIO */
	hFDCAN->Instance = FDCAN1;
 80003f4:	4b3e      	ldr	r3, [pc, #248]	; (80004f0 <CAN_Configure_Init+0x100>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a3e      	ldr	r2, [pc, #248]	; (80004f4 <CAN_Configure_Init+0x104>)
 80003fa:	601a      	str	r2, [r3, #0]
	hFDCAN->Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80003fc:	4b3c      	ldr	r3, [pc, #240]	; (80004f0 <CAN_Configure_Init+0x100>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000404:	609a      	str	r2, [r3, #8]
	hFDCAN->Init.Mode = FDCAN_MODE_NORMAL;
 8000406:	4b3a      	ldr	r3, [pc, #232]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
	hFDCAN->Init.AutoRetransmission = DISABLE;
 800040e:	4b38      	ldr	r3, [pc, #224]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2200      	movs	r2, #0
 8000414:	741a      	strb	r2, [r3, #16]
	hFDCAN->Init.TransmitPause = DISABLE;
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2200      	movs	r2, #0
 800041c:	745a      	strb	r2, [r3, #17]
	hFDCAN->Init.ProtocolException = DISABLE;
 800041e:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2200      	movs	r2, #0
 8000424:	749a      	strb	r2, [r3, #18]
	hFDCAN->Init.NominalPrescaler = 1;
 8000426:	4b32      	ldr	r3, [pc, #200]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2201      	movs	r2, #1
 800042c:	615a      	str	r2, [r3, #20]
	hFDCAN->Init.NominalSyncJumpWidth = 1;
 800042e:	4b30      	ldr	r3, [pc, #192]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2201      	movs	r2, #1
 8000434:	619a      	str	r2, [r3, #24]
	hFDCAN->Init.NominalTimeSeg1 = 17;
 8000436:	4b2e      	ldr	r3, [pc, #184]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2211      	movs	r2, #17
 800043c:	61da      	str	r2, [r3, #28]
	hFDCAN->Init.NominalTimeSeg2 = 1;
 800043e:	4b2c      	ldr	r3, [pc, #176]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2201      	movs	r2, #1
 8000444:	621a      	str	r2, [r3, #32]
	hFDCAN->Init.DataPrescaler = 2;
 8000446:	4b2a      	ldr	r3, [pc, #168]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	2202      	movs	r2, #2
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
	hFDCAN->Init.DataSyncJumpWidth = 14;
 800044e:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	220e      	movs	r2, #14
 8000454:	629a      	str	r2, [r3, #40]	; 0x28
	hFDCAN->Init.DataTimeSeg1 = 15;
 8000456:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	220f      	movs	r2, #15
 800045c:	62da      	str	r2, [r3, #44]	; 0x2c
	hFDCAN->Init.DataTimeSeg2 = 14;
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	220e      	movs	r2, #14
 8000464:	631a      	str	r2, [r3, #48]	; 0x30
	hFDCAN->Init.StdFiltersNbr = 0;
 8000466:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2200      	movs	r2, #0
 800046c:	639a      	str	r2, [r3, #56]	; 0x38
	hFDCAN->Init.ExtFiltersNbr = 0;
 800046e:	4b20      	ldr	r3, [pc, #128]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2200      	movs	r2, #0
 8000474:	63da      	str	r2, [r3, #60]	; 0x3c
	hFDCAN->Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000476:	4b1e      	ldr	r3, [pc, #120]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	665a      	str	r2, [r3, #100]	; 0x64

	/*Esses parâmentros extras não são compatíveis com STM32G0, por isso se encontram dentro do "#ifdef"*/
#ifdef CHIP_STM32H7
	hFDCAN->Init.MessageRAMOffset = 0;
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2200      	movs	r2, #0
 8000484:	635a      	str	r2, [r3, #52]	; 0x34
	hFDCAN->Init.RxFifo0ElmtsNbr = 1;
 8000486:	4b1a      	ldr	r3, [pc, #104]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	2201      	movs	r2, #1
 800048c:	641a      	str	r2, [r3, #64]	; 0x40
	hFDCAN->Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800048e:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2204      	movs	r2, #4
 8000494:	645a      	str	r2, [r3, #68]	; 0x44
	hFDCAN->Init.RxFifo1ElmtsNbr = 0;
 8000496:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <CAN_Configure_Init+0x100>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2200      	movs	r2, #0
 800049c:	649a      	str	r2, [r3, #72]	; 0x48
	hFDCAN->Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800049e:	4b14      	ldr	r3, [pc, #80]	; (80004f0 <CAN_Configure_Init+0x100>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2204      	movs	r2, #4
 80004a4:	64da      	str	r2, [r3, #76]	; 0x4c
	hFDCAN->Init.RxBuffersNbr = 0;
 80004a6:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <CAN_Configure_Init+0x100>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	2200      	movs	r2, #0
 80004ac:	651a      	str	r2, [r3, #80]	; 0x50
	hFDCAN->Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80004ae:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <CAN_Configure_Init+0x100>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2204      	movs	r2, #4
 80004b4:	655a      	str	r2, [r3, #84]	; 0x54
	hFDCAN->Init.TxEventsNbr = 0;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	; (80004f0 <CAN_Configure_Init+0x100>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2200      	movs	r2, #0
 80004bc:	659a      	str	r2, [r3, #88]	; 0x58
	hFDCAN->Init.TxBuffersNbr = 0;
 80004be:	4b0c      	ldr	r3, [pc, #48]	; (80004f0 <CAN_Configure_Init+0x100>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2200      	movs	r2, #0
 80004c4:	65da      	str	r2, [r3, #92]	; 0x5c
	hFDCAN->Init.TxFifoQueueElmtsNbr = 32;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <CAN_Configure_Init+0x100>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2220      	movs	r2, #32
 80004cc:	661a      	str	r2, [r3, #96]	; 0x60
	hFDCAN->Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <CAN_Configure_Init+0x100>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2204      	movs	r2, #4
 80004d4:	669a      	str	r2, [r3, #104]	; 0x68
#endif

	/* Inicializa a CAN com os parâmetros definidos */
	if (HAL_FDCAN_Init(hFDCAN) != HAL_OK)
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <CAN_Configure_Init+0x100>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 fe00 	bl	80010e0 <HAL_FDCAN_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <CAN_Configure_Init+0xfa>
		/* Caso de errado, retorna erro */
		return FDCAN_ERROR;
 80004e6:	2301      	movs	r3, #1
 80004e8:	e000      	b.n	80004ec <CAN_Configure_Init+0xfc>
	else
		/* Caso de tudo certo, retorna ok */
		return FDCAN_OK;
 80004ea:	2300      	movs	r3, #0
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	24000000 	.word	0x24000000
 80004f4:	4000a000 	.word	0x4000a000

080004f8 <CAN_Clean_Buffers>:
/**
 * @brief  Inicialização dos buffers de armazenamento das mensagens da CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Clean_Buffers(void) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
	/* Zera cada posição do vetor de dados - Redundância */
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80004fe:	2300      	movs	r3, #0
 8000500:	80fb      	strh	r3, [r7, #6]
 8000502:	e019      	b.n	8000538 <CAN_Clean_Buffers+0x40>
		/*Limpa os lixos de memória que podem existir*/
		for (uint8_t j = 0; j < 8; j++)
 8000504:	2300      	movs	r3, #0
 8000506:	717b      	strb	r3, [r7, #5]
 8000508:	e00a      	b.n	8000520 <CAN_Clean_Buffers+0x28>
			CAN_stream.Data_buf[i][j] = 0;
 800050a:	88fa      	ldrh	r2, [r7, #6]
 800050c:	797b      	ldrb	r3, [r7, #5]
 800050e:	4910      	ldr	r1, [pc, #64]	; (8000550 <CAN_Clean_Buffers+0x58>)
 8000510:	00d2      	lsls	r2, r2, #3
 8000512:	440a      	add	r2, r1
 8000514:	4413      	add	r3, r2
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
		for (uint8_t j = 0; j < 8; j++)
 800051a:	797b      	ldrb	r3, [r7, #5]
 800051c:	3301      	adds	r3, #1
 800051e:	717b      	strb	r3, [r7, #5]
 8000520:	797b      	ldrb	r3, [r7, #5]
 8000522:	2b07      	cmp	r3, #7
 8000524:	d9f1      	bls.n	800050a <CAN_Clean_Buffers+0x12>
		/*Garante que não seja possível recuperar valores que não foram alocados na memória*/
		CAN_stream.Type_buf[i] = FDCAN_FREE;
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	4a09      	ldr	r2, [pc, #36]	; (8000550 <CAN_Clean_Buffers+0x58>)
 800052a:	4413      	add	r3, r2
 800052c:	2203      	movs	r2, #3
 800052e:	f883 2c80 	strb.w	r2, [r3, #3200]	; 0xc80
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	3301      	adds	r3, #1
 8000536:	80fb      	strh	r3, [r7, #6]
 8000538:	88fb      	ldrh	r3, [r7, #6]
 800053a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800053e:	d3e1      	bcc.n	8000504 <CAN_Clean_Buffers+0xc>
	}
}
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	24000030 	.word	0x24000030

08000554 <CAN_Init>:
/**
 * @brief  Inicialização da comunicação via FDCAN
 * @param  ***NONE***
 * @retval Status de execução da função
 */
FDCAN_StatusTypedef CAN_Init(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	/* Chama a função de configuração dos parâmetros da CAN */
	if (CAN_Configure_Init() != FDCAN_OK)
 8000558:	f7ff ff4a 	bl	80003f0 <CAN_Configure_Init>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <CAN_Init+0x12>
		/* Caso de errado, retorna erro */
		return FDCAN_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	e032      	b.n	80005cc <CAN_Init+0x78>

	/* Chama a função de limpeza do vetor de armazenamento de dados */
	CAN_Clean_Buffers();
 8000566:	f7ff ffc7 	bl	80004f8 <CAN_Clean_Buffers>

	/* Começa a comunicação via CAN */
	if (HAL_FDCAN_Start(hFDCAN) != HAL_OK)
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <CAN_Init+0x7c>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f000 ff94 	bl	800149c <HAL_FDCAN_Start>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <CAN_Init+0x2a>
		/* Caso de errado, retorna erro */
		return FDCAN_ERROR;
 800057a:	2301      	movs	r3, #1
 800057c:	e026      	b.n	80005cc <CAN_Init+0x78>

	/* Ativa a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(hFDCAN, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0)
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <CAN_Init+0x7c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2200      	movs	r2, #0
 8000584:	2101      	movs	r1, #1
 8000586:	4618      	mov	r0, r3
 8000588:	f001 f922 	bl	80017d0 <HAL_FDCAN_ActivateNotification>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <CAN_Init+0x42>
			!= HAL_OK)
		/* Caso de errado, retorna erro */
		return FDCAN_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e01a      	b.n	80005cc <CAN_Init+0x78>

	/* Configura os parametros para envio de mensagem */
	TxHeader.IdType = FDCAN_STANDARD_ID; // TIPO DE IDENTIFICADOR - STANDARD OU EXTENDED
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <CAN_Init+0x80>)
 8000598:	2200      	movs	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // TIPO DE FLAME - DATA OU REMOTE
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <CAN_Init+0x80>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8; // TAMANHO DOS DADOS - 0 A 64 WORDS - DESLOCAMENTO DE 16 BITS <<
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <CAN_Init+0x80>)
 80005a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005a8:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // INDICADOR DE ERRO - ATIVO OU PASSIVO
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <CAN_Init+0x80>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;	// BIT DE INTERRUPÇÃO - ON OU OFF
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <CAN_Init+0x80>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;			// TIPO DE CAN - NORMAL OU FDCAN
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <CAN_Init+0x80>)
 80005b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005bc:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // ARMAZENAMENTO DE EVENTOS DE ENVIO - ON OU OFF
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <CAN_Init+0x80>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;				// MASCARA DA MENSAGEM - 0 A 0xFF
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <CAN_Init+0x80>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	621a      	str	r2, [r3, #32]

	/* Caso de tudo certo, retorna ok */
	return FDCAN_OK;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	24000000 	.word	0x24000000
 80005d4:	24000e40 	.word	0x24000e40

080005d8 <CAN_Storage_INT>:
 * @param  Identifier: Identificador da mensagem
 * @param  Size: Espaço necessário para armazenamento da mensagem
 * @param  Buffer: Ponteiro para os buffer que contém os dados e as informações para seu armazenamento
 * @retval ***NONE***
 */
void CAN_Storage_INT(uint16_t Identifier, uint8_t *Buffer) {
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	80fb      	strh	r3, [r7, #6]
	/* Armazenando o tipo da variável no buffer da CAN */
	CAN_stream.Type_buf[Identifier] = FDCAN_INT;
 80005e4:	88fb      	ldrh	r3, [r7, #6]
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <CAN_Storage_INT+0x74>)
 80005e8:	4413      	add	r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 2c80 	strb.w	r2, [r3, #3200]	; 0xc80

	/* Armazena o valor na memória alocada, sendo necessário armazenar byte por byte*/
	for (int i = 0; i < INT_SIZE; i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	e00e      	b.n	8000614 <CAN_Storage_INT+0x3c>
		CAN_stream.Data_buf[Identifier][i] = Buffer[i];
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	683a      	ldr	r2, [r7, #0]
 80005fa:	441a      	add	r2, r3
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	7811      	ldrb	r1, [r2, #0]
 8000600:	4a12      	ldr	r2, [pc, #72]	; (800064c <CAN_Storage_INT+0x74>)
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	441a      	add	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	4413      	add	r3, r2
 800060a:	460a      	mov	r2, r1
 800060c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INT_SIZE; i++)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b03      	cmp	r3, #3
 8000618:	dded      	ble.n	80005f6 <CAN_Storage_INT+0x1e>

	/* Armazena o valor na memória alocada, sendo necessário armazenar byte por byte*/
	for (int i = INT_SIZE; i < 8; i++)
 800061a:	2304      	movs	r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	e00a      	b.n	8000636 <CAN_Storage_INT+0x5e>
		CAN_stream.Data_buf[Identifier][i] = 0;
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <CAN_Storage_INT+0x74>)
 8000624:	00db      	lsls	r3, r3, #3
 8000626:	441a      	add	r2, r3
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4413      	add	r3, r2
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
	for (int i = INT_SIZE; i < 8; i++)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2b07      	cmp	r3, #7
 800063a:	ddf1      	ble.n	8000620 <CAN_Storage_INT+0x48>
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	24000030 	.word	0x24000030

08000650 <CAN_Storage_FLOAT>:
 * @param  Identifier: Identificador da mensagem
 * @param  Size: Espaço necessário para armazenamento da mensagem
 * @param  Buffer: Ponteiro para os buffer que contém os dados e as informações para seu armazenamento
 * @retval ***NONE***
 */
void CAN_Storage_FLOAT(uint16_t Identifier, uint8_t *Buffer) {
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	80fb      	strh	r3, [r7, #6]
	/* Armazenando o tipo da variável no buffer da CAN */
	CAN_stream.Type_buf[Identifier] = FDCAN_FLOAT;
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	4a19      	ldr	r2, [pc, #100]	; (80006c4 <CAN_Storage_FLOAT+0x74>)
 8000660:	4413      	add	r3, r2
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2c80 	strb.w	r2, [r3, #3200]	; 0xc80

	/* Armazena o valor na memória alocada, sendo necessário armazenar byte por byte*/
	for (int i = 0; i < FLOAT_SIZE; i++)
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e00e      	b.n	800068c <CAN_Storage_FLOAT+0x3c>
		CAN_stream.Data_buf[Identifier][i] = Buffer[i];
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	441a      	add	r2, r3
 8000674:	88fb      	ldrh	r3, [r7, #6]
 8000676:	7811      	ldrb	r1, [r2, #0]
 8000678:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <CAN_Storage_FLOAT+0x74>)
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	441a      	add	r2, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	460a      	mov	r2, r1
 8000684:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < FLOAT_SIZE; i++)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b04      	cmp	r3, #4
 8000690:	dded      	ble.n	800066e <CAN_Storage_FLOAT+0x1e>

	/* Armazena o valor na memória alocada, sendo necessário armazenar byte por byte*/
	for (int i = FLOAT_SIZE; i < 8; i++)
 8000692:	2305      	movs	r3, #5
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	e00a      	b.n	80006ae <CAN_Storage_FLOAT+0x5e>
		CAN_stream.Data_buf[Identifier][i] = 0;
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <CAN_Storage_FLOAT+0x74>)
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	441a      	add	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4413      	add	r3, r2
 80006a4:	2200      	movs	r2, #0
 80006a6:	701a      	strb	r2, [r3, #0]
	for (int i = FLOAT_SIZE; i < 8; i++)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b07      	cmp	r3, #7
 80006b2:	ddf1      	ble.n	8000698 <CAN_Storage_FLOAT+0x48>
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	24000030 	.word	0x24000030

080006c8 <CAN_Storage_DOUBLE>:
 * @param  Identifier: Identificador da mensagem
 * @param  Size: Espaço necessário para armazenamento da mensagem
 * @param  Buffer: Ponteiro para os buffer que contém os dados e as informações para seu armazenamento
 * @retval ***NONE***
 */
void CAN_Storage_DOUBLE(uint16_t Identifier, uint8_t *Buffer) {
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	80fb      	strh	r3, [r7, #6]
	/* Armazenando o tipo da variável no buffer da CAN */
	CAN_stream.Type_buf[Identifier] = FDCAN_DOUBLE;
 80006d4:	88fb      	ldrh	r3, [r7, #6]
 80006d6:	4a10      	ldr	r2, [pc, #64]	; (8000718 <CAN_Storage_DOUBLE+0x50>)
 80006d8:	4413      	add	r3, r2
 80006da:	2202      	movs	r2, #2
 80006dc:	f883 2c80 	strb.w	r2, [r3, #3200]	; 0xc80

	/* Armazena o valor na memória alocada, sendo necessário armazenar byte por byte*/
	for (int i = 0; i < DOUBLE_SIZE; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
 80006e4:	e00e      	b.n	8000704 <CAN_Storage_DOUBLE+0x3c>
		CAN_stream.Data_buf[Identifier][i] = Buffer[i];
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	683a      	ldr	r2, [r7, #0]
 80006ea:	441a      	add	r2, r3
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	7811      	ldrb	r1, [r2, #0]
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <CAN_Storage_DOUBLE+0x50>)
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	441a      	add	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	460a      	mov	r2, r1
 80006fc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < DOUBLE_SIZE; i++)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	3301      	adds	r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b07      	cmp	r3, #7
 8000708:	dded      	ble.n	80006e6 <CAN_Storage_DOUBLE+0x1e>
}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	24000030 	.word	0x24000030

0800071c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000720:	f000 fb30 	bl	8000d84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000724:	f000 f810 	bl	8000748 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000728:	f000 f904 	bl	8000934 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 800072c:	f000 f89c 	bl	8000868 <MX_FDCAN1_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000730:	f000 f88e 	bl	8000850 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	CAN_Init();
 8000734:	f7ff ff0e 	bl	8000554 <CAN_Init>
	while (1) {

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_6);
 8000738:	2140      	movs	r1, #64	; 0x40
 800073a:	4802      	ldr	r0, [pc, #8]	; (8000744 <main+0x28>)
 800073c:	f001 ff09 	bl	8002552 <HAL_GPIO_TogglePin>
 8000740:	e7fa      	b.n	8000738 <main+0x1c>
 8000742:	bf00      	nop
 8000744:	58020c00 	.word	0x58020c00

08000748 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b09c      	sub	sp, #112	; 0x70
 800074c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800074e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000752:	224c      	movs	r2, #76	; 0x4c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 ff58 	bl	800460c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2220      	movs	r2, #32
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 ff52 	bl	800460c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000768:	2002      	movs	r0, #2
 800076a:	f001 ff0d 	bl	8002588 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <SystemClock_Config+0xfc>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a33      	ldr	r2, [pc, #204]	; (8000844 <SystemClock_Config+0xfc>)
 8000778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <SystemClock_Config+0xfc>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <SystemClock_Config+0x100>)
 800078a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078c:	4a2e      	ldr	r2, [pc, #184]	; (8000848 <SystemClock_Config+0x100>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <SystemClock_Config+0x100>)
 8000796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	603b      	str	r3, [r7, #0]
 800079e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80007a0:	bf00      	nop
 80007a2:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xfc>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ae:	d1f8      	bne.n	80007a2 <SystemClock_Config+0x5a>
	}

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <SystemClock_Config+0x104>)
 80007b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b4:	f023 0303 	bic.w	r3, r3, #3
 80007b8:	4a24      	ldr	r2, [pc, #144]	; (800084c <SystemClock_Config+0x104>)
 80007ba:	f043 0302 	orr.w	r3, r3, #2
 80007be:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	2302      	movs	r3, #2
 80007d0:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 80007d6:	2378      	movs	r3, #120	; 0x78
 80007d8:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 8;
 80007e2:	2308      	movs	r3, #8
 80007e4:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007e6:	230c      	movs	r3, #12
 80007e8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 ff00 	bl	80025fc <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xbe>
		Error_Handler();
 8000802:	f000 f935 	bl	8000a70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000806:	233f      	movs	r3, #63	; 0x3f
 8000808:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080a:	2303      	movs	r3, #3
 800080c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000812:	2308      	movs	r3, #8
 8000814:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000816:	2340      	movs	r3, #64	; 0x40
 8000818:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800081e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000822:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000824:	2340      	movs	r3, #64	; 0x40
 8000826:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2104      	movs	r1, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fb13 	bl	8002e58 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xf4>
		Error_Handler();
 8000838:	f000 f91a 	bl	8000a70 <Error_Handler>
	}
}
 800083c:	bf00      	nop
 800083e:	3770      	adds	r7, #112	; 0x70
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	58024800 	.word	0x58024800
 8000848:	58000400 	.word	0x58000400
 800084c:	58024400 	.word	0x58024400

08000850 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* FDCAN1_IT0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 15, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	210f      	movs	r1, #15
 8000858:	2013      	movs	r0, #19
 800085a:	f000 fc0c 	bl	8001076 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800085e:	2013      	movs	r0, #19
 8000860:	f000 fc23 	bl	80010aa <HAL_NVIC_EnableIRQ>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_FDCAN1_Init+0xc4>)
 800086e:	4a30      	ldr	r2, [pc, #192]	; (8000930 <MX_FDCAN1_Init+0xc8>)
 8000870:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000872:	4b2e      	ldr	r3, [pc, #184]	; (800092c <MX_FDCAN1_Init+0xc4>)
 8000874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000878:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_FDCAN1_Init+0xc4>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 8000880:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_FDCAN1_Init+0xc4>)
 8000882:	2200      	movs	r2, #0
 8000884:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000886:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_FDCAN1_Init+0xc4>)
 8000888:	2200      	movs	r2, #0
 800088a:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 800088c:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_FDCAN1_Init+0xc4>)
 800088e:	2200      	movs	r2, #0
 8000890:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 1;
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_FDCAN1_Init+0xc4>)
 8000894:	2201      	movs	r2, #1
 8000896:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 13;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_FDCAN1_Init+0xc4>)
 800089a:	220d      	movs	r2, #13
 800089c:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 86;
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008a0:	2256      	movs	r2, #86	; 0x56
 80008a2:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 13;
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008a6:	220d      	movs	r2, #13
 80008a8:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 25;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008ac:	2219      	movs	r2, #25
 80008ae:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 2;
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008be:	2201      	movs	r2, #1
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008dc:	2204      	movs	r2, #4
 80008de:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008e8:	2204      	movs	r2, #4
 80008ea:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008f4:	2204      	movs	r2, #4
 80008f6:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_FDCAN1_Init+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_FDCAN1_Init+0xc4>)
 8000900:	2200      	movs	r2, #0
 8000902:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_FDCAN1_Init+0xc4>)
 8000906:	2201      	movs	r2, #1
 8000908:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_FDCAN1_Init+0xc4>)
 800090c:	2200      	movs	r2, #0
 800090e:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_FDCAN1_Init+0xc4>)
 8000912:	2204      	movs	r2, #4
 8000914:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_FDCAN1_Init+0xc4>)
 8000918:	f000 fbe2 	bl	80010e0 <HAL_FDCAN_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_FDCAN1_Init+0xbe>
		Error_Handler();
 8000922:	f000 f8a5 	bl	8000a70 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	24000e94 	.word	0x24000e94
 8000930:	4000a000 	.word	0x4000a000

08000934 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <MX_GPIO_Init+0x12c>)
 800094c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000950:	4a43      	ldr	r2, [pc, #268]	; (8000a60 <MX_GPIO_Init+0x12c>)
 8000952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000956:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095a:	4b41      	ldr	r3, [pc, #260]	; (8000a60 <MX_GPIO_Init+0x12c>)
 800095c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b3d      	ldr	r3, [pc, #244]	; (8000a60 <MX_GPIO_Init+0x12c>)
 800096a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096e:	4a3c      	ldr	r2, [pc, #240]	; (8000a60 <MX_GPIO_Init+0x12c>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000978:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <MX_GPIO_Init+0x12c>)
 800097a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000986:	4b36      	ldr	r3, [pc, #216]	; (8000a60 <MX_GPIO_Init+0x12c>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a34      	ldr	r2, [pc, #208]	; (8000a60 <MX_GPIO_Init+0x12c>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b32      	ldr	r3, [pc, #200]	; (8000a60 <MX_GPIO_Init+0x12c>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	4b2e      	ldr	r3, [pc, #184]	; (8000a60 <MX_GPIO_Init+0x12c>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009aa:	4a2d      	ldr	r2, [pc, #180]	; (8000a60 <MX_GPIO_Init+0x12c>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b4:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_GPIO_Init+0x12c>)
 80009b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <MX_GPIO_Init+0x12c>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c8:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <MX_GPIO_Init+0x12c>)
 80009ca:	f043 0310 	orr.w	r3, r3, #16
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d2:	4b23      	ldr	r3, [pc, #140]	; (8000a60 <MX_GPIO_Init+0x12c>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f244 0101 	movw	r1, #16385	; 0x4001
 80009e6:	481f      	ldr	r0, [pc, #124]	; (8000a64 <MX_GPIO_Init+0x130>)
 80009e8:	f001 fd9a 	bl	8002520 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80009ec:	2200      	movs	r2, #0
 80009ee:	217c      	movs	r1, #124	; 0x7c
 80009f0:	481d      	ldr	r0, [pc, #116]	; (8000a68 <MX_GPIO_Init+0x134>)
 80009f2:	f001 fd95 	bl	8002520 <HAL_GPIO_WritePin>
			GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2102      	movs	r1, #2
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <MX_GPIO_Init+0x138>)
 80009fc:	f001 fd90 	bl	8002520 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14;
 8000a00:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <MX_GPIO_Init+0x130>)
 8000a1a:	f001 fbd1 	bl	80021c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD2 PD3 PD4 PD5
	 PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5
 8000a1e:	237c      	movs	r3, #124	; 0x7c
 8000a20:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <MX_GPIO_Init+0x134>)
 8000a36:	f001 fbc3 	bl	80021c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <MX_GPIO_Init+0x138>)
 8000a52:	f001 fbb5 	bl	80021c0 <HAL_GPIO_Init>

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58024400 	.word	0x58024400
 8000a64:	58020400 	.word	0x58020400
 8000a68:	58020c00 	.word	0x58020c00
 8000a6c:	58021000 	.word	0x58021000

08000a70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000a78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a7c:	4801      	ldr	r0, [pc, #4]	; (8000a84 <Error_Handler+0x14>)
 8000a7e:	f001 fd68 	bl	8002552 <HAL_GPIO_TogglePin>
 8000a82:	e7f9      	b.n	8000a78 <Error_Handler+0x8>
 8000a84:	58020400 	.word	0x58020400

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <HAL_MspInit+0x30>)
 8000a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x30>)
 8000a96:	f043 0302 	orr.w	r3, r3, #2
 8000a9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x30>)
 8000aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	58024400 	.word	0x58024400

08000abc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0b8      	sub	sp, #224	; 0xe0
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	22bc      	movs	r2, #188	; 0xbc
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 fd95 	bl	800460c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a2d      	ldr	r2, [pc, #180]	; (8000b9c <HAL_FDCAN_MspInit+0xe0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d153      	bne.n	8000b94 <HAL_FDCAN_MspInit+0xd8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000aec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 125;
 8000af6:	237d      	movs	r3, #125	; 0x7d
 8000af8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000b12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000b16:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 fccb 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000b28:	f7ff ffa2 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_FDCAN_MspInit+0xe4>)
 8000b2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b32:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <HAL_FDCAN_MspInit+0xe4>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b38:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_FDCAN_MspInit+0xe4>)
 8000b3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_FDCAN_MspInit+0xe4>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <HAL_FDCAN_MspInit+0xe4>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_FDCAN_MspInit+0xe4>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000b82:	2309      	movs	r3, #9
 8000b84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_FDCAN_MspInit+0xe8>)
 8000b90:	f001 fb16 	bl	80021c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	37e0      	adds	r7, #224	; 0xe0
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	4000a000 	.word	0x4000a000
 8000ba0:	58024400 	.word	0x58024400
 8000ba4:	58020400 	.word	0x58020400

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>
	...

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000bb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bb8:	4801      	ldr	r0, [pc, #4]	; (8000bc0 <HardFault_Handler+0x10>)
 8000bba:	f001 fcca 	bl	8002552 <HAL_GPIO_TogglePin>
 8000bbe:	e7f9      	b.n	8000bb4 <HardFault_Handler+0x4>
 8000bc0:	58020400 	.word	0x58020400

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f930 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <FDCAN1_IT0_IRQHandler+0x10>)
 8000c12:	f000 fe57 	bl	80018c4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	24000e94 	.word	0x24000e94

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c24:	4b37      	ldr	r3, [pc, #220]	; (8000d04 <SystemInit+0xe4>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a36      	ldr	r2, [pc, #216]	; (8000d04 <SystemInit+0xe4>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c34:	4b34      	ldr	r3, [pc, #208]	; (8000d08 <SystemInit+0xe8>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 030f 	and.w	r3, r3, #15
 8000c3c:	2b06      	cmp	r3, #6
 8000c3e:	d807      	bhi.n	8000c50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c40:	4b31      	ldr	r3, [pc, #196]	; (8000d08 <SystemInit+0xe8>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f023 030f 	bic.w	r3, r3, #15
 8000c48:	4a2f      	ldr	r2, [pc, #188]	; (8000d08 <SystemInit+0xe8>)
 8000c4a:	f043 0307 	orr.w	r3, r3, #7
 8000c4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c50:	4b2e      	ldr	r3, [pc, #184]	; (8000d0c <SystemInit+0xec>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a2d      	ldr	r2, [pc, #180]	; (8000d0c <SystemInit+0xec>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <SystemInit+0xec>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c62:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <SystemInit+0xec>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	4929      	ldr	r1, [pc, #164]	; (8000d0c <SystemInit+0xec>)
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <SystemInit+0xf0>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <SystemInit+0xe8>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d007      	beq.n	8000c8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c7a:	4b23      	ldr	r3, [pc, #140]	; (8000d08 <SystemInit+0xe8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f023 030f 	bic.w	r3, r3, #15
 8000c82:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <SystemInit+0xe8>)
 8000c84:	f043 0307 	orr.w	r3, r3, #7
 8000c88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <SystemInit+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <SystemInit+0xec>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <SystemInit+0xec>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <SystemInit+0xec>)
 8000c9e:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <SystemInit+0xf4>)
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <SystemInit+0xec>)
 8000ca4:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <SystemInit+0xf8>)
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <SystemInit+0xec>)
 8000caa:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <SystemInit+0xfc>)
 8000cac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <SystemInit+0xec>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <SystemInit+0xec>)
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <SystemInit+0xfc>)
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cba:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <SystemInit+0xec>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <SystemInit+0xec>)
 8000cc2:	4a16      	ldr	r2, [pc, #88]	; (8000d1c <SystemInit+0xfc>)
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <SystemInit+0xec>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <SystemInit+0xec>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <SystemInit+0xec>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <SystemInit+0xec>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <SystemInit+0x100>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <SystemInit+0x104>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cea:	d202      	bcs.n	8000cf2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <SystemInit+0x108>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <SystemInit+0x10c>)
 8000cf4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cf8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00
 8000d08:	52002000 	.word	0x52002000
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d14:	02020200 	.word	0x02020200
 8000d18:	01ff0000 	.word	0x01ff0000
 8000d1c:	01010280 	.word	0x01010280
 8000d20:	5c001000 	.word	0x5c001000
 8000d24:	ffff0000 	.word	0xffff0000
 8000d28:	51008108 	.word	0x51008108
 8000d2c:	52004000 	.word	0x52004000

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d34:	f7ff ff74 	bl	8000c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f003 fc5d 	bl	800461c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d62:	f7ff fcdb 	bl	800071c <main>
  bx  lr
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d70:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000d74:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 8000d78:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000d7c:	24000f38 	.word	0x24000f38

08000d80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC3_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f000 f968 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d90:	f002 fa18 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 8000d94:	4602      	mov	r2, r0
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_Init+0x68>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	f003 030f 	and.w	r3, r3, #15
 8000da0:	4913      	ldr	r1, [pc, #76]	; (8000df0 <HAL_Init+0x6c>)
 8000da2:	5ccb      	ldrb	r3, [r1, r3]
 8000da4:	f003 031f 	and.w	r3, r3, #31
 8000da8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_Init+0x68>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_Init+0x6c>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	f003 031f 	and.w	r3, r3, #31
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_Init+0x70>)
 8000dc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <HAL_Init+0x74>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f000 f814 	bl	8000dfc <HAL_InitTick>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e002      	b.n	8000de4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dde:	f7ff fe53 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	58024400 	.word	0x58024400
 8000df0:	080046e4 	.word	0x080046e4
 8000df4:	24000008 	.word	0x24000008
 8000df8:	24000004 	.word	0x24000004

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_InitTick+0x60>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d101      	bne.n	8000e10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e021      	b.n	8000e54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <HAL_InitTick+0x64>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <HAL_InitTick+0x60>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f94d 	bl	80010c6 <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00e      	b.n	8000e54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2b0f      	cmp	r3, #15
 8000e3a:	d80a      	bhi.n	8000e52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f000 f917 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <HAL_InitTick+0x68>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	24000010 	.word	0x24000010
 8000e60:	24000004 	.word	0x24000004
 8000e64:	2400000c 	.word	0x2400000c

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	24000010 	.word	0x24000010
 8000e8c:	24000f34 	.word	0x24000f34

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	24000f34 	.word	0x24000f34

08000ea8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetREVID+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	0c1b      	lsrs	r3, r3, #16
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	5c001000 	.word	0x5c001000

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00
 8000f04:	05fa0000 	.word	0x05fa0000

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	; (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	; (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	; (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	88fb      	ldrh	r3, [r7, #6]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	; 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff8e 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff29 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff40 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff90 	bl	8000fb4 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5f 	bl	8000f60 <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff33 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffa4 	bl	800101c <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b098      	sub	sp, #96	; 0x60
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80010e8:	4a84      	ldr	r2, [pc, #528]	; (80012fc <HAL_FDCAN_Init+0x21c>)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4611      	mov	r1, r2
 80010f0:	224c      	movs	r2, #76	; 0x4c
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fab6 	bl	8004664 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e1c6      	b.n	8001490 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a7e      	ldr	r2, [pc, #504]	; (8001300 <HAL_FDCAN_Init+0x220>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d106      	bne.n	800111a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001114:	461a      	mov	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d106      	bne.n	8001134 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fcc4 	bl	8000abc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	699a      	ldr	r2, [r3, #24]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0210 	bic.w	r2, r2, #16
 8001142:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001144:	f7ff fea4 	bl	8000e90 <HAL_GetTick>
 8001148:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800114a:	e014      	b.n	8001176 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800114c:	f7ff fea0 	bl	8000e90 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b0a      	cmp	r3, #10
 8001158:	d90d      	bls.n	8001176 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001160:	f043 0201 	orr.w	r2, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2203      	movs	r2, #3
 800116e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e18c      	b.n	8001490 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b08      	cmp	r3, #8
 8001182:	d0e3      	beq.n	800114c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	699a      	ldr	r2, [r3, #24]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0201 	orr.w	r2, r2, #1
 8001192:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001194:	f7ff fe7c 	bl	8000e90 <HAL_GetTick>
 8001198:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800119a:	e014      	b.n	80011c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800119c:	f7ff fe78 	bl	8000e90 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b0a      	cmp	r3, #10
 80011a8:	d90d      	bls.n	80011c6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011b0:	f043 0201 	orr.w	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2203      	movs	r2, #3
 80011be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e164      	b.n	8001490 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0e3      	beq.n	800119c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	699a      	ldr	r2, [r3, #24]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0202 	orr.w	r2, r2, #2
 80011e2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7c1b      	ldrb	r3, [r3, #16]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d108      	bne.n	80011fe <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	699a      	ldr	r2, [r3, #24]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011fa:	619a      	str	r2, [r3, #24]
 80011fc:	e007      	b.n	800120e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800120c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7c5b      	ldrb	r3, [r3, #17]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d108      	bne.n	8001228 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001224:	619a      	str	r2, [r3, #24]
 8001226:	e007      	b.n	8001238 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	699a      	ldr	r2, [r3, #24]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001236:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	7c9b      	ldrb	r3, [r3, #18]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800124e:	619a      	str	r2, [r3, #24]
 8001250:	e007      	b.n	8001262 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001260:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	699a      	ldr	r2, [r3, #24]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001286:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0210 	bic.w	r2, r2, #16
 8001296:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d108      	bne.n	80012b2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0204 	orr.w	r2, r2, #4
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	e030      	b.n	8001314 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d02c      	beq.n	8001314 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d020      	beq.n	8001304 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012d0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	691a      	ldr	r2, [r3, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f042 0210 	orr.w	r2, r2, #16
 80012e0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d114      	bne.n	8001314 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 0220 	orr.w	r2, r2, #32
 80012f8:	619a      	str	r2, [r3, #24]
 80012fa:	e00b      	b.n	8001314 <HAL_FDCAN_Init+0x234>
 80012fc:	08004698 	.word	0x08004698
 8001300:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0220 	orr.w	r2, r2, #32
 8001312:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	3b01      	subs	r3, #1
 800131a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	3b01      	subs	r3, #1
 8001322:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001324:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800132c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	3b01      	subs	r3, #1
 8001336:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800133c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800133e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001348:	d115      	bne.n	8001376 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	3b01      	subs	r3, #1
 8001356:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001358:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	3b01      	subs	r3, #1
 8001360:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001362:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	3b01      	subs	r3, #1
 800136c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001372:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001374:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00a      	beq.n	8001394 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139c:	4413      	add	r3, r2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d011      	beq.n	80013c6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80013aa:	f023 0107 	bic.w	r1, r3, #7
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	3360      	adds	r3, #96	; 0x60
 80013b6:	443b      	add	r3, r7
 80013b8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d011      	beq.n	80013f2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80013d6:	f023 0107 	bic.w	r1, r3, #7
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	3360      	adds	r3, #96	; 0x60
 80013e2:	443b      	add	r3, r7
 80013e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d012      	beq.n	8001420 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001402:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	3360      	adds	r3, #96	; 0x60
 800140e:	443b      	add	r3, r7
 8001410:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001414:	011a      	lsls	r2, r3, #4
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001424:	2b00      	cmp	r3, #0
 8001426:	d012      	beq.n	800144e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001430:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	3360      	adds	r3, #96	; 0x60
 800143c:	443b      	add	r3, r7
 800143e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001442:	021a      	lsls	r2, r3, #8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <HAL_FDCAN_Init+0x3b8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d107      	bne.n	8001468 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f022 0203 	bic.w	r2, r2, #3
 8001466:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fd17 	bl	8001eb4 <FDCAN_CalcultateRamBlockAddresses>
 8001486:	4603      	mov	r3, r0
 8001488:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800148c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001490:	4618      	mov	r0, r3
 8001492:	3760      	adds	r7, #96	; 0x60
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	4000a000 	.word	0x4000a000

0800149c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d111      	bne.n	80014d4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	e008      	b.n	80014e6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014da:	f043 0204 	orr.w	r2, r3, #4
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
  }
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b08b      	sub	sp, #44	; 0x2c
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800150c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800150e:	7efb      	ldrb	r3, [r7, #27]
 8001510:	2b02      	cmp	r3, #2
 8001512:	f040 814b 	bne.w	80017ac <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2b40      	cmp	r3, #64	; 0x40
 800151a:	d14d      	bne.n	80015b8 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001524:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001532:	f043 0220 	orr.w	r2, r3, #32
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e13e      	b.n	80017be <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800154c:	2b00      	cmp	r3, #0
 800154e:	d109      	bne.n	8001564 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001556:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e12c      	b.n	80017be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800156c:	0e1b      	lsrs	r3, r3, #24
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b01      	cmp	r3, #1
 8001574:	d10b      	bne.n	800158e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800157e:	0fdb      	lsrs	r3, r3, #31
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001588:	d101      	bne.n	800158e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800158a:	2301      	movs	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001596:	0a1b      	lsrs	r3, r3, #8
 8001598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	4413      	add	r3, r2
 80015a0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	69f9      	ldr	r1, [r7, #28]
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
 80015b6:	e069      	b.n	800168c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b41      	cmp	r3, #65	; 0x41
 80015bc:	d14d      	bne.n	800165a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015d4:	f043 0220 	orr.w	r2, r3, #32
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0ed      	b.n	80017be <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e0db      	b.n	80017be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800160e:	0e1b      	lsrs	r3, r3, #24
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b01      	cmp	r3, #1
 8001616:	d10b      	bne.n	8001630 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001620:	0fdb      	lsrs	r3, r3, #31
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800162a:	d101      	bne.n	8001630 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800162c:	2301      	movs	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164c:	69f9      	ldr	r1, [r7, #28]
 800164e:	fb01 f303 	mul.w	r3, r1, r3
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
 8001658:	e018      	b.n	800168c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	429a      	cmp	r2, r3
 8001662:	d309      	bcc.n	8001678 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800166a:	f043 0220 	orr.w	r2, r3, #32
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0a2      	b.n	80017be <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	0c9b      	lsrs	r3, r3, #18
 80016a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e005      	b.n	80016bc <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	3304      	adds	r3, #4
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	0e1b      	lsrs	r3, r3, #24
 800170e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	0fda      	lsrs	r2, r3, #31
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	3304      	adds	r3, #4
 8001724:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800172a:	2300      	movs	r3, #0
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	e00a      	b.n	8001746 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	441a      	add	r2, r3
 8001736:	6839      	ldr	r1, [r7, #0]
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	440b      	add	r3, r1
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	3301      	adds	r3, #1
 8001744:	623b      	str	r3, [r7, #32]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	0c1b      	lsrs	r3, r3, #16
 800174c:	4a1f      	ldr	r2, [pc, #124]	; (80017cc <HAL_FDCAN_GetRxMessage+0x2d8>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	461a      	mov	r2, r3
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	4293      	cmp	r3, r2
 8001756:	d3eb      	bcc.n	8001730 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d105      	bne.n	800176a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001768:	e01e      	b.n	80017a8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b41      	cmp	r3, #65	; 0x41
 800176e:	d105      	bne.n	800177c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	69fa      	ldr	r2, [r7, #28]
 8001776:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800177a:	e015      	b.n	80017a8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2b1f      	cmp	r3, #31
 8001780:	d808      	bhi.n	8001794 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2101      	movs	r1, #1
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	fa01 f202 	lsl.w	r2, r1, r2
 800178e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001792:	e009      	b.n	80017a8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	f003 021f 	and.w	r2, r3, #31
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	fa01 f202 	lsl.w	r2, r1, r2
 80017a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	e008      	b.n	80017be <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017b2:	f043 0208 	orr.w	r2, r3, #8
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
  }
}
 80017be:	4618      	mov	r0, r3
 80017c0:	372c      	adds	r7, #44	; 0x2c
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	080046f4 	.word	0x080046f4

080017d0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80017e2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d002      	beq.n	80017f0 <HAL_FDCAN_ActivateNotification+0x20>
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d155      	bne.n	800189c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	4013      	ands	r3, r2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d108      	bne.n	8001810 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	65da      	str	r2, [r3, #92]	; 0x5c
 800180e:	e014      	b.n	800183a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	4013      	ands	r3, r2
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	429a      	cmp	r2, r3
 800181e:	d108      	bne.n	8001832 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0202 	orr.w	r2, r2, #2
 800182e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001830:	e003      	b.n	800183a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2203      	movs	r2, #3
 8001838:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001840:	2b00      	cmp	r3, #0
 8001842:	d009      	beq.n	8001858 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	430a      	orrs	r2, r1
 8001854:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	430a      	orrs	r2, r1
 8001872:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <HAL_FDCAN_ActivateNotification+0xec>)
 8001880:	4013      	ands	r3, r2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	430b      	orrs	r3, r1
 8001888:	6553      	str	r3, [r2, #84]	; 0x54
 800188a:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_FDCAN_ActivateNotification+0xf0>)
 800188c:	695a      	ldr	r2, [r3, #20]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	0f9b      	lsrs	r3, r3, #30
 8001892:	490b      	ldr	r1, [pc, #44]	; (80018c0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001894:	4313      	orrs	r3, r2
 8001896:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	e008      	b.n	80018ae <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018a2:	f043 0202 	orr.w	r2, r3, #2
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
  }
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	3fcfffff 	.word	0x3fcfffff
 80018c0:	4000a800 	.word	0x4000a800

080018c4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b096      	sub	sp, #88	; 0x58
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80018cc:	4b95      	ldr	r3, [pc, #596]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	079b      	lsls	r3, r3, #30
 80018d2:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80018d4:	4b93      	ldr	r3, [pc, #588]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	079b      	lsls	r3, r3, #30
 80018da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80018dc:	4013      	ands	r3, r2
 80018de:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80018ea:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80018f4:	4013      	ands	r3, r2
 80018f6:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800190c:	4013      	ands	r3, r2
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001924:	4013      	ands	r3, r2
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800193c:	4013      	ands	r3, r2
 800193e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001946:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800194a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001954:	4013      	ands	r3, r2
 8001956:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00f      	beq.n	8001992 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00a      	beq.n	8001992 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001984:	651a      	str	r2, [r3, #80]	; 0x50
 8001986:	4b67      	ldr	r3, [pc, #412]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fa44 	bl	8001e1a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01c      	beq.n	80019d6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800199c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800199e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d017      	beq.n	80019d6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80019b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ba:	4013      	ands	r3, r2
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c6:	651a      	str	r2, [r3, #80]	; 0x50
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80019ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f9f9 	bl	8001dc8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80019d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00d      	beq.n	80019f8 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019e2:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <HAL_FDCAN_IRQHandler+0x264>)
 80019e4:	400b      	ands	r3, r1
 80019e6:	6513      	str	r3, [r2, #80]	; 0x50
 80019e8:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 80019ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ec:	0f9b      	lsrs	r3, r3, #30
 80019ee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80019f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f9b2 	bl	8001d5c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80019f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00d      	beq.n	8001a1a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <HAL_FDCAN_IRQHandler+0x264>)
 8001a06:	400b      	ands	r3, r1
 8001a08:	6513      	str	r3, [r2, #80]	; 0x50
 8001a0a:	4a46      	ldr	r2, [pc, #280]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 8001a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0e:	0f9b      	lsrs	r3, r3, #30
 8001a10:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001a12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f9ac 	bl	8001d72 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00d      	beq.n	8001a3c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001a26:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_FDCAN_IRQHandler+0x264>)
 8001a28:	400b      	ands	r3, r1
 8001a2a:	6513      	str	r3, [r2, #80]	; 0x50
 8001a2c:	4a3d      	ldr	r2, [pc, #244]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 8001a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a30:	0f9b      	lsrs	r3, r3, #30
 8001a32:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001a34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fc4e 	bl	80002d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00d      	beq.n	8001a5e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001a48:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_FDCAN_IRQHandler+0x264>)
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	6513      	str	r3, [r2, #80]	; 0x50
 8001a4e:	4a35      	ldr	r2, [pc, #212]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 8001a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a52:	0f9b      	lsrs	r3, r3, #30
 8001a54:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001a56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f995 	bl	8001d88 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d00f      	beq.n	8001a88 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00a      	beq.n	8001a88 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a7a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f98b 	bl	8001d9e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01c      	beq.n	8001acc <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d017      	beq.n	8001acc <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f973 	bl	8001db2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ace:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00f      	beq.n	8001af6 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00a      	beq.n	8001af6 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ae8:	651a      	str	r2, [r3, #80]	; 0x50
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f974 	bl	8001dde <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d015      	beq.n	8001b2c <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d010      	beq.n	8001b2c <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b12:	651a      	str	r2, [r3, #80]	; 0x50
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_FDCAN_IRQHandler+0x260>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f969 	bl	8001df2 <HAL_FDCAN_TimestampWraparoundCallback>
 8001b20:	e004      	b.n	8001b2c <HAL_FDCAN_IRQHandler+0x268>
 8001b22:	bf00      	nop
 8001b24:	4000a800 	.word	0x4000a800
 8001b28:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00f      	beq.n	8001b56 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b48:	651a      	str	r2, [r3, #80]	; 0x50
 8001b4a:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_FDCAN_IRQHandler+0x48c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f958 	bl	8001e06 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d014      	beq.n	8001b8a <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00f      	beq.n	8001b8a <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b72:	651a      	str	r2, [r3, #80]	; 0x50
 8001b74:	4b76      	ldr	r3, [pc, #472]	; (8001d50 <HAL_FDCAN_IRQHandler+0x48c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b96:	4b6f      	ldr	r3, [pc, #444]	; (8001d54 <HAL_FDCAN_IRQHandler+0x490>)
 8001b98:	400b      	ands	r3, r1
 8001b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8001b9c:	4a6c      	ldr	r2, [pc, #432]	; (8001d50 <HAL_FDCAN_IRQHandler+0x48c>)
 8001b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba0:	0f9b      	lsrs	r3, r3, #30
 8001ba2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001ba4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f94b 	bl	8001e42 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d011      	beq.n	8001bd6 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001bb8:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_FDCAN_IRQHandler+0x490>)
 8001bba:	400b      	ands	r3, r1
 8001bbc:	6513      	str	r3, [r2, #80]	; 0x50
 8001bbe:	4a64      	ldr	r2, [pc, #400]	; (8001d50 <HAL_FDCAN_IRQHandler+0x48c>)
 8001bc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc2:	0f9b      	lsrs	r3, r3, #30
 8001bc4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a5f      	ldr	r2, [pc, #380]	; (8001d58 <HAL_FDCAN_IRQHandler+0x494>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f040 80aa 	bne.w	8001d36 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a2 	beq.w	8001d36 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c06:	4013      	ands	r3, r2
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c1e:	4013      	ands	r3, r2
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c36:	4013      	ands	r3, r2
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001c44:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	6a3a      	ldr	r2, [r7, #32]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001c5c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c86:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001c88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8e4 	bl	8001e58 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d007      	beq.n	8001ca6 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c9c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8e4 	bl	8001e6e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d019      	beq.n	8001ce4 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d014      	beq.n	8001ce4 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cd0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6939      	ldr	r1, [r7, #16]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f8d0 	bl	8001e84 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001cf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f8d1 	bl	8001e9c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d00b      	beq.n	8001d18 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	6a3a      	ldr	r2, [r7, #32]
 8001d06:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 f874 	bl	8001e2e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001d46:	bf00      	nop
 8001d48:	3758      	adds	r7, #88	; 0x58
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	4000a800 	.word	0x4000a800
 8001d54:	3fcfffff 	.word	0x3fcfffff
 8001d58:	4000a000 	.word	0x4000a000

08001d5c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
 8001dba:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001eca:	4ba7      	ldr	r3, [pc, #668]	; (8002168 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	0091      	lsls	r1, r2, #2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	430b      	orrs	r3, r1
 8001ed8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ee4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eec:	041a      	lsls	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	4413      	add	r3, r2
 8001f00:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f0a:	4b97      	ldr	r3, [pc, #604]	; (8002168 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	0091      	lsls	r1, r2, #2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	430b      	orrs	r3, r1
 8001f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001f4c:	4b86      	ldr	r3, [pc, #536]	; (8002168 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	0091      	lsls	r1, r2, #2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001f66:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	041a      	lsls	r2, r3, #16
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f82:	fb02 f303 	mul.w	r3, r2, r3
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	4413      	add	r3, r2
 8001f8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f94:	4b74      	ldr	r3, [pc, #464]	; (8002168 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	0091      	lsls	r1, r2, #2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	6812      	ldr	r2, [r2, #0]
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001fae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb6:	041a      	lsls	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001fdc:	4b62      	ldr	r3, [pc, #392]	; (8002168 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	0091      	lsls	r1, r2, #2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002008:	4b57      	ldr	r3, [pc, #348]	; (8002168 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800200a:	4013      	ands	r3, r2
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	0091      	lsls	r1, r2, #2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	430b      	orrs	r3, r1
 8002016:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002022:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	041a      	lsls	r2, r3, #16
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	4413      	add	r3, r2
 8002040:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800204a:	4b47      	ldr	r3, [pc, #284]	; (8002168 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800204c:	4013      	ands	r3, r2
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	0091      	lsls	r1, r2, #2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6812      	ldr	r2, [r2, #0]
 8002056:	430b      	orrs	r3, r1
 8002058:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002064:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002080:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002088:	061a      	lsls	r2, r3, #24
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002098:	4b34      	ldr	r3, [pc, #208]	; (800216c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800209a:	4413      	add	r3, r2
 800209c:	009a      	lsls	r2, r3, #2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	441a      	add	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	441a      	add	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80020ce:	fb01 f303 	mul.w	r3, r1, r3
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	441a      	add	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	441a      	add	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80020fe:	fb01 f303 	mul.w	r3, r1, r3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	441a      	add	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	441a      	add	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	441a      	add	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	441a      	add	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d915      	bls.n	8002190 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002164:	e006      	b.n	8002174 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002166:	bf00      	nop
 8002168:	ffff0003 	.word	0xffff0003
 800216c:	10002b00 	.word	0x10002b00
 8002170:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800217a:	f043 0220 	orr.w	r2, r3, #32
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2203      	movs	r2, #3
 8002188:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e010      	b.n	80021b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e005      	b.n	80021a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3f3      	bcc.n	8002198 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop

080021c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021ce:	4b89      	ldr	r3, [pc, #548]	; (80023f4 <HAL_GPIO_Init+0x234>)
 80021d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021d2:	e194      	b.n	80024fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8186 	beq.w	80024f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d005      	beq.n	8002204 <HAL_GPIO_Init+0x44>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d130      	bne.n	8002266 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	2203      	movs	r2, #3
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4313      	orrs	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800223a:	2201      	movs	r2, #1
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 0201 	and.w	r2, r3, #1
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b03      	cmp	r3, #3
 8002270:	d017      	beq.n	80022a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	2203      	movs	r2, #3
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d123      	bne.n	80022f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	220f      	movs	r2, #15
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	69b9      	ldr	r1, [r7, #24]
 80022f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0203 	and.w	r2, r3, #3
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80e0 	beq.w	80024f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002338:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_GPIO_Init+0x238>)
 800233a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800233e:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <HAL_GPIO_Init+0x238>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002348:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_GPIO_Init+0x238>)
 800234a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002356:	4a29      	ldr	r2, [pc, #164]	; (80023fc <HAL_GPIO_Init+0x23c>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_GPIO_Init+0x240>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d052      	beq.n	8002428 <HAL_GPIO_Init+0x268>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a1f      	ldr	r2, [pc, #124]	; (8002404 <HAL_GPIO_Init+0x244>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d031      	beq.n	80023ee <HAL_GPIO_Init+0x22e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_GPIO_Init+0x248>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <HAL_GPIO_Init+0x22a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_GPIO_Init+0x24c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x226>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_GPIO_Init+0x250>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x222>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1b      	ldr	r2, [pc, #108]	; (8002414 <HAL_GPIO_Init+0x254>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x21e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <HAL_GPIO_Init+0x258>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x21a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_GPIO_Init+0x25c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x216>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a18      	ldr	r2, [pc, #96]	; (8002420 <HAL_GPIO_Init+0x260>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x212>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a17      	ldr	r2, [pc, #92]	; (8002424 <HAL_GPIO_Init+0x264>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x20e>
 80023ca:	2309      	movs	r3, #9
 80023cc:	e02d      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023ce:	230a      	movs	r3, #10
 80023d0:	e02b      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023d2:	2308      	movs	r3, #8
 80023d4:	e029      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e027      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023da:	2306      	movs	r3, #6
 80023dc:	e025      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023de:	2305      	movs	r3, #5
 80023e0:	e023      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e021      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e01f      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e01d      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e01b      	b.n	800242a <HAL_GPIO_Init+0x26a>
 80023f2:	bf00      	nop
 80023f4:	58000080 	.word	0x58000080
 80023f8:	58024400 	.word	0x58024400
 80023fc:	58000400 	.word	0x58000400
 8002400:	58020000 	.word	0x58020000
 8002404:	58020400 	.word	0x58020400
 8002408:	58020800 	.word	0x58020800
 800240c:	58020c00 	.word	0x58020c00
 8002410:	58021000 	.word	0x58021000
 8002414:	58021400 	.word	0x58021400
 8002418:	58021800 	.word	0x58021800
 800241c:	58021c00 	.word	0x58021c00
 8002420:	58022000 	.word	0x58022000
 8002424:	58022400 	.word	0x58022400
 8002428:	2300      	movs	r3, #0
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	f002 0203 	and.w	r2, r2, #3
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	4093      	lsls	r3, r2
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800243a:	4938      	ldr	r1, [pc, #224]	; (800251c <HAL_GPIO_Init+0x35c>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3302      	adds	r3, #2
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800246e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800249c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	43db      	mvns	r3, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4013      	ands	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	3301      	adds	r3, #1
 80024fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	fa22 f303 	lsr.w	r3, r2, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	f47f ae63 	bne.w	80021d4 <HAL_GPIO_Init+0x14>
  }
}
 800250e:	bf00      	nop
 8002510:	bf00      	nop
 8002512:	3724      	adds	r7, #36	; 0x24
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	58000400 	.word	0x58000400

08002520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
 800252c:	4613      	mov	r3, r2
 800252e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002530:	787b      	ldrb	r3, [r7, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800253c:	e003      	b.n	8002546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	041a      	lsls	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	619a      	str	r2, [r3, #24]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	460b      	mov	r3, r1
 800255c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	041a      	lsls	r2, r3, #16
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43d9      	mvns	r1, r3
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	400b      	ands	r3, r1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_PWREx_ConfigSupply+0x70>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b04      	cmp	r3, #4
 800259a:	d00a      	beq.n	80025b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_PWREx_ConfigSupply+0x70>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d001      	beq.n	80025ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e01f      	b.n	80025ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e01d      	b.n	80025ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_PWREx_ConfigSupply+0x70>)
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	f023 0207 	bic.w	r2, r3, #7
 80025ba:	490f      	ldr	r1, [pc, #60]	; (80025f8 <HAL_PWREx_ConfigSupply+0x70>)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025c2:	f7fe fc65 	bl	8000e90 <HAL_GetTick>
 80025c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025c8:	e009      	b.n	80025de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025ca:	f7fe fc61 	bl	8000e90 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025d8:	d901      	bls.n	80025de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e007      	b.n	80025ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_PWREx_ConfigSupply+0x70>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ea:	d1ee      	bne.n	80025ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	58024800 	.word	0x58024800

080025fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08c      	sub	sp, #48	; 0x30
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d102      	bne.n	8002610 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f000 bc1d 	b.w	8002e4a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 8087 	beq.w	800272c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261e:	4b99      	ldr	r3, [pc, #612]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002628:	4b96      	ldr	r3, [pc, #600]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800262a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002630:	2b10      	cmp	r3, #16
 8002632:	d007      	beq.n	8002644 <HAL_RCC_OscConfig+0x48>
 8002634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002636:	2b18      	cmp	r3, #24
 8002638:	d110      	bne.n	800265c <HAL_RCC_OscConfig+0x60>
 800263a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d10b      	bne.n	800265c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d06c      	beq.n	800272a <HAL_RCC_OscConfig+0x12e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d168      	bne.n	800272a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e3f6      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002664:	d106      	bne.n	8002674 <HAL_RCC_OscConfig+0x78>
 8002666:	4b87      	ldr	r3, [pc, #540]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a86      	ldr	r2, [pc, #536]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e02e      	b.n	80026d2 <HAL_RCC_OscConfig+0xd6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10c      	bne.n	8002696 <HAL_RCC_OscConfig+0x9a>
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a80      	ldr	r2, [pc, #512]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b7e      	ldr	r3, [pc, #504]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a7d      	ldr	r2, [pc, #500]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	e01d      	b.n	80026d2 <HAL_RCC_OscConfig+0xd6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269e:	d10c      	bne.n	80026ba <HAL_RCC_OscConfig+0xbe>
 80026a0:	4b78      	ldr	r3, [pc, #480]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a77      	ldr	r2, [pc, #476]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	4b75      	ldr	r3, [pc, #468]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a74      	ldr	r2, [pc, #464]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e00b      	b.n	80026d2 <HAL_RCC_OscConfig+0xd6>
 80026ba:	4b72      	ldr	r3, [pc, #456]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a71      	ldr	r2, [pc, #452]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d013      	beq.n	8002702 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026da:	f7fe fbd9 	bl	8000e90 <HAL_GetTick>
 80026de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e2:	f7fe fbd5 	bl	8000e90 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b64      	cmp	r3, #100	; 0x64
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e3aa      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0xe6>
 8002700:	e014      	b.n	800272c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fbc5 	bl	8000e90 <HAL_GetTick>
 8002706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270a:	f7fe fbc1 	bl	8000e90 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b64      	cmp	r3, #100	; 0x64
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e396      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x10e>
 8002728:	e000      	b.n	800272c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80cb 	beq.w	80028d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273a:	4b52      	ldr	r3, [pc, #328]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002742:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002744:	4b4f      	ldr	r3, [pc, #316]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_RCC_OscConfig+0x164>
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	2b18      	cmp	r3, #24
 8002754:	d156      	bne.n	8002804 <HAL_RCC_OscConfig+0x208>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0303 	and.w	r3, r3, #3
 800275c:	2b00      	cmp	r3, #0
 800275e:	d151      	bne.n	8002804 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002760:	4b48      	ldr	r3, [pc, #288]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_OscConfig+0x17c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e368      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002778:	4b42      	ldr	r3, [pc, #264]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 0219 	bic.w	r2, r3, #25
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	493f      	ldr	r1, [pc, #252]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 8002786:	4313      	orrs	r3, r2
 8002788:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800278a:	f7fe fb81 	bl	8000e90 <HAL_GetTick>
 800278e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002792:	f7fe fb7d 	bl	8000e90 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e352      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a4:	4b37      	ldr	r3, [pc, #220]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	f7fe fb7a 	bl	8000ea8 <HAL_GetREVID>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d817      	bhi.n	80027ee <HAL_RCC_OscConfig+0x1f2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1dc>
 80027c6:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d6:	e07b      	b.n	80028d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	031b      	lsls	r3, r3, #12
 80027e6:	4927      	ldr	r1, [pc, #156]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ec:	e070      	b.n	80028d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ee:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	061b      	lsls	r3, r3, #24
 80027fc:	4921      	ldr	r1, [pc, #132]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002802:	e065      	b.n	80028d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d048      	beq.n	800289e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 0219 	bic.w	r2, r3, #25
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	491a      	ldr	r1, [pc, #104]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fb37 	bl	8000e90 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002826:	f7fe fb33 	bl	8000e90 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e308      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	f7fe fb30 	bl	8000ea8 <HAL_GetREVID>
 8002848:	4603      	mov	r3, r0
 800284a:	f241 0203 	movw	r2, #4099	; 0x1003
 800284e:	4293      	cmp	r3, r2
 8002850:	d81a      	bhi.n	8002888 <HAL_RCC_OscConfig+0x28c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b40      	cmp	r3, #64	; 0x40
 8002858:	d108      	bne.n	800286c <HAL_RCC_OscConfig+0x270>
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002862:	4a08      	ldr	r2, [pc, #32]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 8002864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002868:	6053      	str	r3, [r2, #4]
 800286a:	e031      	b.n	80028d0 <HAL_RCC_OscConfig+0x2d4>
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	031b      	lsls	r3, r3, #12
 800287a:	4902      	ldr	r1, [pc, #8]	; (8002884 <HAL_RCC_OscConfig+0x288>)
 800287c:	4313      	orrs	r3, r2
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	e026      	b.n	80028d0 <HAL_RCC_OscConfig+0x2d4>
 8002882:	bf00      	nop
 8002884:	58024400 	.word	0x58024400
 8002888:	4b9a      	ldr	r3, [pc, #616]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	4997      	ldr	r1, [pc, #604]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e018      	b.n	80028d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b95      	ldr	r3, [pc, #596]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a94      	ldr	r2, [pc, #592]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7fe faf1 	bl	8000e90 <HAL_GetTick>
 80028ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028b2:	f7fe faed 	bl	8000e90 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e2c2      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c4:	4b8b      	ldr	r3, [pc, #556]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80a9 	beq.w	8002a30 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028de:	4b85      	ldr	r3, [pc, #532]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028e8:	4b82      	ldr	r3, [pc, #520]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d007      	beq.n	8002904 <HAL_RCC_OscConfig+0x308>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b18      	cmp	r3, #24
 80028f8:	d13a      	bne.n	8002970 <HAL_RCC_OscConfig+0x374>
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f003 0303 	and.w	r3, r3, #3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d135      	bne.n	8002970 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002904:	4b7b      	ldr	r3, [pc, #492]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_OscConfig+0x320>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e296      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800291c:	f7fe fac4 	bl	8000ea8 <HAL_GetREVID>
 8002920:	4603      	mov	r3, r0
 8002922:	f241 0203 	movw	r2, #4099	; 0x1003
 8002926:	4293      	cmp	r3, r2
 8002928:	d817      	bhi.n	800295a <HAL_RCC_OscConfig+0x35e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	2b20      	cmp	r3, #32
 8002930:	d108      	bne.n	8002944 <HAL_RCC_OscConfig+0x348>
 8002932:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800293a:	4a6e      	ldr	r2, [pc, #440]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002940:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002942:	e075      	b.n	8002a30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002944:	4b6b      	ldr	r3, [pc, #428]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	069b      	lsls	r3, r3, #26
 8002952:	4968      	ldr	r1, [pc, #416]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002958:	e06a      	b.n	8002a30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800295a:	4b66      	ldr	r3, [pc, #408]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	061b      	lsls	r3, r3, #24
 8002968:	4962      	ldr	r1, [pc, #392]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	4313      	orrs	r3, r2
 800296c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800296e:	e05f      	b.n	8002a30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d042      	beq.n	80029fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002978:	4b5e      	ldr	r3, [pc, #376]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5d      	ldr	r2, [pc, #372]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 800297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fa84 	bl	8000e90 <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800298c:	f7fe fa80 	bl	8000e90 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e255      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800299e:	4b55      	ldr	r3, [pc, #340]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029aa:	f7fe fa7d 	bl	8000ea8 <HAL_GetREVID>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d817      	bhi.n	80029e8 <HAL_RCC_OscConfig+0x3ec>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d108      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3d6>
 80029c0:	4b4c      	ldr	r3, [pc, #304]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029c8:	4a4a      	ldr	r2, [pc, #296]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029ce:	6053      	str	r3, [r2, #4]
 80029d0:	e02e      	b.n	8002a30 <HAL_RCC_OscConfig+0x434>
 80029d2:	4b48      	ldr	r3, [pc, #288]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	069b      	lsls	r3, r3, #26
 80029e0:	4944      	ldr	r1, [pc, #272]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
 80029e6:	e023      	b.n	8002a30 <HAL_RCC_OscConfig+0x434>
 80029e8:	4b42      	ldr	r3, [pc, #264]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	493f      	ldr	r1, [pc, #252]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60cb      	str	r3, [r1, #12]
 80029fc:	e018      	b.n	8002a30 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80029fe:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3c      	ldr	r2, [pc, #240]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fa41 	bl	8000e90 <HAL_GetTick>
 8002a0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a12:	f7fe fa3d 	bl	8000e90 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e212      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a24:	4b33      	ldr	r3, [pc, #204]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d036      	beq.n	8002aaa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d019      	beq.n	8002a78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a44:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a50:	f7fe fa1e 	bl	8000e90 <HAL_GetTick>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fa1a 	bl	8000e90 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1ef      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a6a:	4b22      	ldr	r3, [pc, #136]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCC_OscConfig+0x45c>
 8002a76:	e018      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fe fa04 	bl	8000e90 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fe fa00 	bl	8000e90 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e1d5      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d039      	beq.n	8002b2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01c      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ac8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002aca:	f7fe f9e1 	bl	8000e90 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ad0:	e008      	b.n	8002ae4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ad2:	f7fe f9dd 	bl	8000e90 <HAL_GetTick>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d901      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e1b2      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0f0      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x4d6>
 8002af0:	e01b      	b.n	8002b2a <HAL_RCC_OscConfig+0x52e>
 8002af2:	bf00      	nop
 8002af4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002af8:	4b9b      	ldr	r3, [pc, #620]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a9a      	ldr	r2, [pc, #616]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b04:	f7fe f9c4 	bl	8000e90 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b0c:	f7fe f9c0 	bl	8000e90 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e195      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b1e:	4b92      	ldr	r3, [pc, #584]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8081 	beq.w	8002c3a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b38:	4b8c      	ldr	r3, [pc, #560]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a8b      	ldr	r2, [pc, #556]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b44:	f7fe f9a4 	bl	8000e90 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b4c:	f7fe f9a0 	bl	8000e90 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b64      	cmp	r3, #100	; 0x64
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e175      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b5e:	4b83      	ldr	r3, [pc, #524]	; (8002d6c <HAL_RCC_OscConfig+0x770>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x584>
 8002b72:	4b7d      	ldr	r3, [pc, #500]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	4a7c      	ldr	r2, [pc, #496]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7e:	e02d      	b.n	8002bdc <HAL_RCC_OscConfig+0x5e0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10c      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x5a6>
 8002b88:	4b77      	ldr	r3, [pc, #476]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	4a76      	ldr	r2, [pc, #472]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6713      	str	r3, [r2, #112]	; 0x70
 8002b94:	4b74      	ldr	r3, [pc, #464]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	4a73      	ldr	r2, [pc, #460]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002b9a:	f023 0304 	bic.w	r3, r3, #4
 8002b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba0:	e01c      	b.n	8002bdc <HAL_RCC_OscConfig+0x5e0>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b05      	cmp	r3, #5
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x5c8>
 8002baa:	4b6f      	ldr	r3, [pc, #444]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a6e      	ldr	r2, [pc, #440]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	f043 0304 	orr.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	4b6c      	ldr	r3, [pc, #432]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bba:	4a6b      	ldr	r2, [pc, #428]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0x5e0>
 8002bc4:	4b68      	ldr	r3, [pc, #416]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a67      	ldr	r2, [pc, #412]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd0:	4b65      	ldr	r3, [pc, #404]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd4:	4a64      	ldr	r2, [pc, #400]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	f023 0304 	bic.w	r3, r3, #4
 8002bda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe f954 	bl	8000e90 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bea:	e00a      	b.n	8002c02 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe f950 	bl	8000e90 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e123      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c02:	4b59      	ldr	r3, [pc, #356]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ee      	beq.n	8002bec <HAL_RCC_OscConfig+0x5f0>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fe f93e 	bl	8000e90 <HAL_GetTick>
 8002c14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7fe f93a 	bl	8000e90 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e10d      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c2e:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1ee      	bne.n	8002c18 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8102 	beq.w	8002e48 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c44:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c4c:	2b18      	cmp	r3, #24
 8002c4e:	f000 80bd 	beq.w	8002dcc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	f040 809e 	bne.w	8002d98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a41      	ldr	r2, [pc, #260]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe f912 	bl	8000e90 <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c70:	f7fe f90e 	bl	8000e90 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e0e3      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c82:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c8e:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c92:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <HAL_RCC_OscConfig+0x774>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	4931      	ldr	r1, [pc, #196]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	628b      	str	r3, [r1, #40]	; 0x28
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	3b01      	subs	r3, #1
 8002cae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	025b      	lsls	r3, r3, #9
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	061b      	lsls	r3, r3, #24
 8002cd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002cd8:	4923      	ldr	r1, [pc, #140]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002cde:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cea:	4b1f      	ldr	r3, [pc, #124]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cee:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x778>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002cf6:	00d2      	lsls	r2, r2, #3
 8002cf8:	491b      	ldr	r1, [pc, #108]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f023 020c 	bic.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4917      	ldr	r1, [pc, #92]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f023 0202 	bic.w	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1c:	4912      	ldr	r1, [pc, #72]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_RCC_OscConfig+0x76c>)
 8002d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5e:	f7fe f897 	bl	8000e90 <HAL_GetTick>
 8002d62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d64:	e011      	b.n	8002d8a <HAL_RCC_OscConfig+0x78e>
 8002d66:	bf00      	nop
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	58024800 	.word	0x58024800
 8002d70:	fffffc0c 	.word	0xfffffc0c
 8002d74:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe f88a 	bl	8000e90 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e05f      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d8a:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_RCC_OscConfig+0x858>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0f0      	beq.n	8002d78 <HAL_RCC_OscConfig+0x77c>
 8002d96:	e057      	b.n	8002e48 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d98:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <HAL_RCC_OscConfig+0x858>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <HAL_RCC_OscConfig+0x858>)
 8002d9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe f874 	bl	8000e90 <HAL_GetTick>
 8002da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe f870 	bl	8000e90 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e045      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dbe:	4b25      	ldr	r3, [pc, #148]	; (8002e54 <HAL_RCC_OscConfig+0x858>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x7b0>
 8002dca:	e03d      	b.n	8002e48 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002dcc:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <HAL_RCC_OscConfig+0x858>)
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <HAL_RCC_OscConfig+0x858>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d031      	beq.n	8002e44 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f003 0203 	and.w	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d12a      	bne.n	8002e44 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d122      	bne.n	8002e44 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d11a      	bne.n	8002e44 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	0a5b      	lsrs	r3, r3, #9
 8002e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d111      	bne.n	8002e44 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d108      	bne.n	8002e44 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	0e1b      	lsrs	r3, r3, #24
 8002e36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3730      	adds	r7, #48	; 0x30
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	58024400 	.word	0x58024400

08002e58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e19c      	b.n	80031a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b8a      	ldr	r3, [pc, #552]	; (8003098 <HAL_RCC_ClockConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d910      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b87      	ldr	r3, [pc, #540]	; (8003098 <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	4985      	ldr	r1, [pc, #532]	; (8003098 <HAL_RCC_ClockConfig+0x240>)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b83      	ldr	r3, [pc, #524]	; (8003098 <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e184      	b.n	80031a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d010      	beq.n	8002eca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	4b7b      	ldr	r3, [pc, #492]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d908      	bls.n	8002eca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eb8:	4b78      	ldr	r3, [pc, #480]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	4975      	ldr	r1, [pc, #468]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695a      	ldr	r2, [r3, #20]
 8002eda:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d908      	bls.n	8002ef8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	496a      	ldr	r1, [pc, #424]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d010      	beq.n	8002f26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699a      	ldr	r2, [r3, #24]
 8002f08:	4b64      	ldr	r3, [pc, #400]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d908      	bls.n	8002f26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f14:	4b61      	ldr	r3, [pc, #388]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	495e      	ldr	r1, [pc, #376]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d010      	beq.n	8002f54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69da      	ldr	r2, [r3, #28]
 8002f36:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d908      	bls.n	8002f54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f42:	4b56      	ldr	r3, [pc, #344]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4953      	ldr	r1, [pc, #332]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d010      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	4b4d      	ldr	r3, [pc, #308]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d908      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f023 020f 	bic.w	r2, r3, #15
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4947      	ldr	r1, [pc, #284]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d055      	beq.n	800303a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f8e:	4b43      	ldr	r3, [pc, #268]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	4940      	ldr	r1, [pc, #256]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fa8:	4b3c      	ldr	r3, [pc, #240]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d121      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0f6      	b.n	80031a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fc0:	4b36      	ldr	r3, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d115      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0ea      	b.n	80031a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fd8:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0de      	b.n	80031a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe8:	4b2c      	ldr	r3, [pc, #176]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e0d6      	b.n	80031a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f023 0207 	bic.w	r2, r3, #7
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4925      	ldr	r1, [pc, #148]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8003006:	4313      	orrs	r3, r2
 8003008:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300a:	f7fd ff41 	bl	8000e90 <HAL_GetTick>
 800300e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003010:	e00a      	b.n	8003028 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003012:	f7fd ff3d 	bl	8000e90 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003020:	4293      	cmp	r3, r2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0be      	b.n	80031a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003028:	4b1c      	ldr	r3, [pc, #112]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	429a      	cmp	r2, r3
 8003038:	d1eb      	bne.n	8003012 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	429a      	cmp	r2, r3
 8003054:	d208      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003056:	4b11      	ldr	r3, [pc, #68]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f023 020f 	bic.w	r2, r3, #15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	490e      	ldr	r1, [pc, #56]	; (800309c <HAL_RCC_ClockConfig+0x244>)
 8003064:	4313      	orrs	r3, r2
 8003066:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_ClockConfig+0x240>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d214      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HAL_RCC_ClockConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 020f 	bic.w	r2, r3, #15
 800307e:	4906      	ldr	r1, [pc, #24]	; (8003098 <HAL_RCC_ClockConfig+0x240>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <HAL_RCC_ClockConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e086      	b.n	80031a6 <HAL_RCC_ClockConfig+0x34e>
 8003098:	52002000 	.word	0x52002000
 800309c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d010      	beq.n	80030ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d208      	bcs.n	80030ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030bc:	4b3c      	ldr	r3, [pc, #240]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	4939      	ldr	r1, [pc, #228]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d010      	beq.n	80030fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695a      	ldr	r2, [r3, #20]
 80030de:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d208      	bcs.n	80030fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	492e      	ldr	r1, [pc, #184]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	4b28      	ldr	r3, [pc, #160]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003114:	429a      	cmp	r2, r3
 8003116:	d208      	bcs.n	800312a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003118:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	4922      	ldr	r1, [pc, #136]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 8003126:	4313      	orrs	r3, r2
 8003128:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69da      	ldr	r2, [r3, #28]
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003142:	429a      	cmp	r2, r3
 8003144:	d208      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4917      	ldr	r1, [pc, #92]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 8003154:	4313      	orrs	r3, r2
 8003156:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003158:	f000 f834 	bl	80031c4 <HAL_RCC_GetSysClockFreq>
 800315c:	4602      	mov	r2, r0
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	4912      	ldr	r1, [pc, #72]	; (80031b4 <HAL_RCC_ClockConfig+0x35c>)
 800316a:	5ccb      	ldrb	r3, [r1, r3]
 800316c:	f003 031f 	and.w	r3, r3, #31
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003176:	4b0e      	ldr	r3, [pc, #56]	; (80031b0 <HAL_RCC_ClockConfig+0x358>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <HAL_RCC_ClockConfig+0x35c>)
 8003180:	5cd3      	ldrb	r3, [r2, r3]
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <HAL_RCC_ClockConfig+0x360>)
 800318e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_RCC_ClockConfig+0x364>)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x368>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fe2e 	bl	8000dfc <HAL_InitTick>
 80031a0:	4603      	mov	r3, r0
 80031a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	58024400 	.word	0x58024400
 80031b4:	080046e4 	.word	0x080046e4
 80031b8:	24000008 	.word	0x24000008
 80031bc:	24000004 	.word	0x24000004
 80031c0:	2400000c 	.word	0x2400000c

080031c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b089      	sub	sp, #36	; 0x24
 80031c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ca:	4bb3      	ldr	r3, [pc, #716]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031d2:	2b18      	cmp	r3, #24
 80031d4:	f200 8155 	bhi.w	8003482 <HAL_RCC_GetSysClockFreq+0x2be>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	08003245 	.word	0x08003245
 80031e4:	08003483 	.word	0x08003483
 80031e8:	08003483 	.word	0x08003483
 80031ec:	08003483 	.word	0x08003483
 80031f0:	08003483 	.word	0x08003483
 80031f4:	08003483 	.word	0x08003483
 80031f8:	08003483 	.word	0x08003483
 80031fc:	08003483 	.word	0x08003483
 8003200:	0800326b 	.word	0x0800326b
 8003204:	08003483 	.word	0x08003483
 8003208:	08003483 	.word	0x08003483
 800320c:	08003483 	.word	0x08003483
 8003210:	08003483 	.word	0x08003483
 8003214:	08003483 	.word	0x08003483
 8003218:	08003483 	.word	0x08003483
 800321c:	08003483 	.word	0x08003483
 8003220:	08003271 	.word	0x08003271
 8003224:	08003483 	.word	0x08003483
 8003228:	08003483 	.word	0x08003483
 800322c:	08003483 	.word	0x08003483
 8003230:	08003483 	.word	0x08003483
 8003234:	08003483 	.word	0x08003483
 8003238:	08003483 	.word	0x08003483
 800323c:	08003483 	.word	0x08003483
 8003240:	08003277 	.word	0x08003277
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003244:	4b94      	ldr	r3, [pc, #592]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003250:	4b91      	ldr	r3, [pc, #580]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	4a90      	ldr	r2, [pc, #576]	; (800349c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003262:	e111      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003264:	4b8d      	ldr	r3, [pc, #564]	; (800349c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003266:	61bb      	str	r3, [r7, #24]
    break;
 8003268:	e10e      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800326a:	4b8d      	ldr	r3, [pc, #564]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800326c:	61bb      	str	r3, [r7, #24]
    break;
 800326e:	e10b      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003270:	4b8c      	ldr	r3, [pc, #560]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003272:	61bb      	str	r3, [r7, #24]
    break;
 8003274:	e108      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003280:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800328a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800328c:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003296:	4b80      	ldr	r3, [pc, #512]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329a:	08db      	lsrs	r3, r3, #3
 800329c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 80e1 	beq.w	800347c <HAL_RCC_GetSysClockFreq+0x2b8>
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	f000 8083 	beq.w	80033c8 <HAL_RCC_GetSysClockFreq+0x204>
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	f200 80a1 	bhi.w	800340c <HAL_RCC_GetSysClockFreq+0x248>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d003      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x114>
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d056      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x1c0>
 80032d6:	e099      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032d8:	4b6f      	ldr	r3, [pc, #444]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d02d      	beq.n	8003340 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032e4:	4b6c      	ldr	r3, [pc, #432]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	08db      	lsrs	r3, r3, #3
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	4a6b      	ldr	r2, [pc, #428]	; (800349c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800330a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800330e:	4b62      	ldr	r3, [pc, #392]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800331e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003322:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800332a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800332e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800333e:	e087      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800334a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800334e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800335a:	ee07 3a90 	vmov	s15, r3
 800335e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003362:	ed97 6a02 	vldr	s12, [r7, #8]
 8003366:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800336a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800337a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003382:	e065      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800338e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003396:	4b40      	ldr	r3, [pc, #256]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033c6:	e043      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80033d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033e2:	ee07 3a90 	vmov	s15, r3
 80033e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800340a:	e021      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003416:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800341a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800341e:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003432:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800343a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800343e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800344e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	0a5b      	lsrs	r3, r3, #9
 8003456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345a:	3301      	adds	r3, #1
 800345c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	ee07 3a90 	vmov	s15, r3
 8003464:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003468:	edd7 6a07 	vldr	s13, [r7, #28]
 800346c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003474:	ee17 3a90 	vmov	r3, s15
 8003478:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800347a:	e005      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
    break;
 8003480:	e002      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003482:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003484:	61bb      	str	r3, [r7, #24]
    break;
 8003486:	bf00      	nop
  }

  return sysclockfreq;
 8003488:	69bb      	ldr	r3, [r7, #24]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	58024400 	.word	0x58024400
 800349c:	03d09000 	.word	0x03d09000
 80034a0:	003d0900 	.word	0x003d0900
 80034a4:	007a1200 	.word	0x007a1200
 80034a8:	46000000 	.word	0x46000000
 80034ac:	4c742400 	.word	0x4c742400
 80034b0:	4a742400 	.word	0x4a742400
 80034b4:	4af42400 	.word	0x4af42400

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034c0:	2300      	movs	r3, #0
 80034c2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034c4:	2300      	movs	r3, #0
 80034c6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d03f      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034dc:	d02a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034e2:	d824      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e8:	d018      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ee:	d81e      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f8:	d007      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034fa:	e018      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034fc:	4ba3      	ldr	r3, [pc, #652]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80034fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003500:	4aa2      	ldr	r2, [pc, #648]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003508:	e015      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3304      	adds	r3, #4
 800350e:	2102      	movs	r1, #2
 8003510:	4618      	mov	r0, r3
 8003512:	f000 ff17 	bl	8004344 <RCCEx_PLL2_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800351a:	e00c      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3324      	adds	r3, #36	; 0x24
 8003520:	2102      	movs	r1, #2
 8003522:	4618      	mov	r0, r3
 8003524:	f000 ffc0 	bl	80044a8 <RCCEx_PLL3_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	75fb      	strb	r3, [r7, #23]
      break;
 8003532:	e000      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003534:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800353c:	4b93      	ldr	r3, [pc, #588]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800353e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003548:	4990      	ldr	r1, [pc, #576]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	650b      	str	r3, [r1, #80]	; 0x50
 800354e:	e001      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003550:	7dfb      	ldrb	r3, [r7, #23]
 8003552:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d03d      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	2b04      	cmp	r3, #4
 8003566:	d826      	bhi.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003585 	.word	0x08003585
 8003574:	08003593 	.word	0x08003593
 8003578:	080035a5 	.word	0x080035a5
 800357c:	080035bd 	.word	0x080035bd
 8003580:	080035bd 	.word	0x080035bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003584:	4b81      	ldr	r3, [pc, #516]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	4a80      	ldr	r2, [pc, #512]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003590:	e015      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fed3 	bl	8004344 <RCCEx_PLL2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035a2:	e00c      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3324      	adds	r3, #36	; 0x24
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 ff7c 	bl	80044a8 <RCCEx_PLL3_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035b4:	e003      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	75fb      	strb	r3, [r7, #23]
      break;
 80035ba:	e000      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80035bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c4:	4b71      	ldr	r3, [pc, #452]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c8:	f023 0207 	bic.w	r2, r3, #7
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	496e      	ldr	r1, [pc, #440]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	650b      	str	r3, [r1, #80]	; 0x50
 80035d6:	e001      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
 80035da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d042      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f0:	d02b      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80035f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f6:	d825      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80035f8:	2bc0      	cmp	r3, #192	; 0xc0
 80035fa:	d028      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035fc:	2bc0      	cmp	r3, #192	; 0xc0
 80035fe:	d821      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003600:	2b80      	cmp	r3, #128	; 0x80
 8003602:	d016      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d81d      	bhi.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d007      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003610:	e018      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003612:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	4a5d      	ldr	r2, [pc, #372]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800361e:	e017      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fe8c 	bl	8004344 <RCCEx_PLL2_Config>
 800362c:	4603      	mov	r3, r0
 800362e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003630:	e00e      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3324      	adds	r3, #36	; 0x24
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 ff35 	bl	80044a8 <RCCEx_PLL3_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003642:	e005      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	75fb      	strb	r3, [r7, #23]
      break;
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800364e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003656:	4b4d      	ldr	r3, [pc, #308]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	494a      	ldr	r1, [pc, #296]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003664:	4313      	orrs	r3, r2
 8003666:	650b      	str	r3, [r1, #80]	; 0x50
 8003668:	e001      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003676:	2b00      	cmp	r3, #0
 8003678:	d049      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003680:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003684:	d030      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003686:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800368a:	d82a      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800368c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003690:	d02c      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003692:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003696:	d824      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369c:	d018      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800369e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a2:	d81e      	bhi.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ac:	d007      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036ae:	e018      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a35      	ldr	r2, [pc, #212]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036bc:	e017      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fe3d 	bl	8004344 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036ce:	e00e      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3324      	adds	r3, #36	; 0x24
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fee6 	bl	80044a8 <RCCEx_PLL3_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036e0:	e005      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	75fb      	strb	r3, [r7, #23]
      break;
 80036e6:	e002      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80036ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ee:	7dfb      	ldrb	r3, [r7, #23]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003702:	4922      	ldr	r1, [pc, #136]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003704:	4313      	orrs	r3, r2
 8003706:	658b      	str	r3, [r1, #88]	; 0x58
 8003708:	e001      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003716:	2b00      	cmp	r3, #0
 8003718:	d04b      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003724:	d030      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800372a:	d82a      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800372c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003730:	d02e      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003732:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003736:	d824      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800373c:	d018      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800373e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003742:	d81e      	bhi.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800374c:	d007      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800374e:	e018      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4b0e      	ldr	r3, [pc, #56]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4a0d      	ldr	r2, [pc, #52]	; (800378c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800375c:	e019      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fded 	bl	8004344 <RCCEx_PLL2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800376e:	e010      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3324      	adds	r3, #36	; 0x24
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fe96 	bl	80044a8 <RCCEx_PLL3_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003780:	e007      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
      break;
 8003786:	e004      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003788:	bf00      	nop
 800378a:	e002      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800378c:	58024400 	.word	0x58024400
      break;
 8003790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003798:	4b99      	ldr	r3, [pc, #612]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037a6:	4996      	ldr	r1, [pc, #600]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	658b      	str	r3, [r1, #88]	; 0x58
 80037ac:	e001      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ae:	7dfb      	ldrb	r3, [r7, #23]
 80037b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d032      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c2:	2b30      	cmp	r3, #48	; 0x30
 80037c4:	d01c      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80037c6:	2b30      	cmp	r3, #48	; 0x30
 80037c8:	d817      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d00c      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d813      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x342>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80037d6:	2b10      	cmp	r3, #16
 80037d8:	d10f      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037da:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	4a88      	ldr	r2, [pc, #544]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037e6:	e00e      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3304      	adds	r3, #4
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fda8 	bl	8004344 <RCCEx_PLL2_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80037f8:	e005      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
      break;
 80037fe:	e002      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800380c:	4b7c      	ldr	r3, [pc, #496]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800380e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003810:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003818:	4979      	ldr	r1, [pc, #484]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800381a:	4313      	orrs	r3, r2
 800381c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800381e:	e001      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d047      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003838:	d030      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800383a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800383e:	d82a      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003840:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003844:	d02c      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003846:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800384a:	d824      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800384c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003850:	d018      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003856:	d81e      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800385c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003860:	d007      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003862:	e018      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003864:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a65      	ldr	r2, [pc, #404]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800386a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003870:	e017      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3304      	adds	r3, #4
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f000 fd63 	bl	8004344 <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003882:	e00e      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3324      	adds	r3, #36	; 0x24
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f000 fe0c 	bl	80044a8 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003894:	e005      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	75fb      	strb	r3, [r7, #23]
      break;
 800389a:	e002      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800389c:	bf00      	nop
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d109      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038a8:	4b55      	ldr	r3, [pc, #340]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b4:	4952      	ldr	r1, [pc, #328]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	650b      	str	r3, [r1, #80]	; 0x50
 80038ba:	e001      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d049      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d4:	d02e      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038da:	d828      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038e0:	d02a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80038e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038e6:	d822      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ec:	d026      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80038ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038f2:	d81c      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80038f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f8:	d010      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x464>
 80038fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038fe:	d816      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01d      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003908:	d111      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	2101      	movs	r1, #1
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fd17 	bl	8004344 <RCCEx_PLL2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800391a:	e012      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3324      	adds	r3, #36	; 0x24
 8003920:	2101      	movs	r1, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fdc0 	bl	80044a8 <RCCEx_PLL3_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800392c:	e009      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
      break;
 8003932:	e006      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003934:	bf00      	nop
 8003936:	e004      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003938:	bf00      	nop
 800393a:	e002      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800394a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800394c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003954:	492a      	ldr	r1, [pc, #168]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003956:	4313      	orrs	r3, r2
 8003958:	650b      	str	r3, [r1, #80]	; 0x50
 800395a:	e001      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d04d      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003972:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003976:	d02e      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003978:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800397c:	d828      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800397e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003982:	d02a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003988:	d822      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800398a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800398e:	d026      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003990:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003994:	d81c      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800399a:	d010      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x506>
 800399c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a0:	d816      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01d      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039aa:	d111      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fcc6 	bl	8004344 <RCCEx_PLL2_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039bc:	e012      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3324      	adds	r3, #36	; 0x24
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fd6f 	bl	80044a8 <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80039ce:	e009      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
      break;
 80039d4:	e006      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039d6:	bf00      	nop
 80039d8:	e004      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80039e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039f8:	4901      	ldr	r1, [pc, #4]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	658b      	str	r3, [r1, #88]	; 0x58
 80039fe:	e003      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
 8003a06:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02f      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a1c:	d00e      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a22:	d814      	bhi.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d015      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a2c:	d10f      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2e:	4baf      	ldr	r3, [pc, #700]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	4aae      	ldr	r2, [pc, #696]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a3a:	e00c      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	2101      	movs	r1, #1
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fc7e 	bl	8004344 <RCCEx_PLL2_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a4c:	e003      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
      break;
 8003a52:	e000      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a5c:	4ba3      	ldr	r3, [pc, #652]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a68:	49a0      	ldr	r1, [pc, #640]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8003a6e:	e001      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d032      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d81b      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ac7 	.word	0x08003ac7
 8003a94:	08003aa1 	.word	0x08003aa1
 8003a98:	08003aaf 	.word	0x08003aaf
 8003a9c:	08003ac7 	.word	0x08003ac7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa0:	4b92      	ldr	r3, [pc, #584]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	4a91      	ldr	r2, [pc, #580]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003aac:	e00c      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fc45 	bl	8004344 <RCCEx_PLL2_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ace:	4b87      	ldr	r3, [pc, #540]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad2:	f023 0203 	bic.w	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	4984      	ldr	r1, [pc, #528]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ae0:	e001      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 8086 	beq.w	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af4:	4b7e      	ldr	r3, [pc, #504]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a7d      	ldr	r2, [pc, #500]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b00:	f7fd f9c6 	bl	8000e90 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b06:	e009      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fd f9c2 	bl	8000e90 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d902      	bls.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	75fb      	strb	r3, [r7, #23]
        break;
 8003b1a:	e005      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b1c:	4b74      	ldr	r3, [pc, #464]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ef      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d166      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b2e:	4b6f      	ldr	r3, [pc, #444]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b30:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b38:	4053      	eors	r3, r2
 8003b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d013      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b42:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b4c:	4b67      	ldr	r3, [pc, #412]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	4a66      	ldr	r2, [pc, #408]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b56:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b64      	ldr	r3, [pc, #400]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b5c:	4a63      	ldr	r2, [pc, #396]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b64:	4a61      	ldr	r2, [pc, #388]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b74:	d115      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b76:	f7fd f98b 	bl	8000e90 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b7c:	e00b      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd f987 	bl	8000e90 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d902      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	75fb      	strb	r3, [r7, #23]
            break;
 8003b94:	e005      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b96:	4b55      	ldr	r3, [pc, #340]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0ed      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d126      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003bb8:	4b4c      	ldr	r3, [pc, #304]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bc6:	0919      	lsrs	r1, r3, #4
 8003bc8:	4b4a      	ldr	r3, [pc, #296]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003bca:	400b      	ands	r3, r1
 8003bcc:	4947      	ldr	r1, [pc, #284]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]
 8003bd2:	e005      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003bd4:	4b45      	ldr	r3, [pc, #276]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	4a44      	ldr	r2, [pc, #272]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bde:	6113      	str	r3, [r2, #16]
 8003be0:	4b42      	ldr	r3, [pc, #264]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bee:	493f      	ldr	r1, [pc, #252]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	670b      	str	r3, [r1, #112]	; 0x70
 8003bf4:	e004      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	75bb      	strb	r3, [r7, #22]
 8003bfa:	e001      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7dfb      	ldrb	r3, [r7, #23]
 8003bfe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8085 	beq.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c12:	2b28      	cmp	r3, #40	; 0x28
 8003c14:	d866      	bhi.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003cf9 	.word	0x08003cf9
 8003c20:	08003ce5 	.word	0x08003ce5
 8003c24:	08003ce5 	.word	0x08003ce5
 8003c28:	08003ce5 	.word	0x08003ce5
 8003c2c:	08003ce5 	.word	0x08003ce5
 8003c30:	08003ce5 	.word	0x08003ce5
 8003c34:	08003ce5 	.word	0x08003ce5
 8003c38:	08003ce5 	.word	0x08003ce5
 8003c3c:	08003cc1 	.word	0x08003cc1
 8003c40:	08003ce5 	.word	0x08003ce5
 8003c44:	08003ce5 	.word	0x08003ce5
 8003c48:	08003ce5 	.word	0x08003ce5
 8003c4c:	08003ce5 	.word	0x08003ce5
 8003c50:	08003ce5 	.word	0x08003ce5
 8003c54:	08003ce5 	.word	0x08003ce5
 8003c58:	08003ce5 	.word	0x08003ce5
 8003c5c:	08003cd3 	.word	0x08003cd3
 8003c60:	08003ce5 	.word	0x08003ce5
 8003c64:	08003ce5 	.word	0x08003ce5
 8003c68:	08003ce5 	.word	0x08003ce5
 8003c6c:	08003ce5 	.word	0x08003ce5
 8003c70:	08003ce5 	.word	0x08003ce5
 8003c74:	08003ce5 	.word	0x08003ce5
 8003c78:	08003ce5 	.word	0x08003ce5
 8003c7c:	08003cf9 	.word	0x08003cf9
 8003c80:	08003ce5 	.word	0x08003ce5
 8003c84:	08003ce5 	.word	0x08003ce5
 8003c88:	08003ce5 	.word	0x08003ce5
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	08003ce5 	.word	0x08003ce5
 8003c94:	08003ce5 	.word	0x08003ce5
 8003c98:	08003ce5 	.word	0x08003ce5
 8003c9c:	08003cf9 	.word	0x08003cf9
 8003ca0:	08003ce5 	.word	0x08003ce5
 8003ca4:	08003ce5 	.word	0x08003ce5
 8003ca8:	08003ce5 	.word	0x08003ce5
 8003cac:	08003ce5 	.word	0x08003ce5
 8003cb0:	08003ce5 	.word	0x08003ce5
 8003cb4:	08003ce5 	.word	0x08003ce5
 8003cb8:	08003ce5 	.word	0x08003ce5
 8003cbc:	08003cf9 	.word	0x08003cf9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 fb3c 	bl	8004344 <RCCEx_PLL2_Config>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003cd0:	e013      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3324      	adds	r3, #36	; 0x24
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fbe5 	bl	80044a8 <RCCEx_PLL3_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce8:	e007      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003cea:	bf00      	nop
 8003cec:	58024400 	.word	0x58024400
 8003cf0:	58024800 	.word	0x58024800
 8003cf4:	00ffffcf 	.word	0x00ffffcf
      break;
 8003cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d00:	4b96      	ldr	r3, [pc, #600]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d0c:	4993      	ldr	r1, [pc, #588]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	654b      	str	r3, [r1, #84]	; 0x54
 8003d12:	e001      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d038      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d821      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d77 	.word	0x08003d77
 8003d38:	08003d4d 	.word	0x08003d4d
 8003d3c:	08003d5f 	.word	0x08003d5f
 8003d40:	08003d77 	.word	0x08003d77
 8003d44:	08003d77 	.word	0x08003d77
 8003d48:	08003d77 	.word	0x08003d77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 faf6 	bl	8004344 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d5c:	e00c      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3324      	adds	r3, #36	; 0x24
 8003d62:	2101      	movs	r1, #1
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fb9f 	bl	80044a8 <RCCEx_PLL3_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
      break;
 8003d74:	e000      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d109      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d7e:	4b77      	ldr	r3, [pc, #476]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d82:	f023 0207 	bic.w	r2, r3, #7
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8a:	4974      	ldr	r1, [pc, #464]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d90:	e001      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d92:	7dfb      	ldrb	r3, [r7, #23]
 8003d94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d03a      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d821      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003df7 	.word	0x08003df7
 8003db8:	08003dcd 	.word	0x08003dcd
 8003dbc:	08003ddf 	.word	0x08003ddf
 8003dc0:	08003df7 	.word	0x08003df7
 8003dc4:	08003df7 	.word	0x08003df7
 8003dc8:	08003df7 	.word	0x08003df7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fab6 	bl	8004344 <RCCEx_PLL2_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ddc:	e00c      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3324      	adds	r3, #36	; 0x24
 8003de2:	2101      	movs	r1, #1
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fb5f 	bl	80044a8 <RCCEx_PLL3_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003dee:	e003      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
      break;
 8003df4:	e000      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dfe:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e02:	f023 0207 	bic.w	r2, r3, #7
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	4953      	ldr	r1, [pc, #332]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	658b      	str	r3, [r1, #88]	; 0x58
 8003e12:	e001      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	7dfb      	ldrb	r3, [r7, #23]
 8003e16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d04b      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e2e:	d02e      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e34:	d828      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d02a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e40:	d822      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e46:	d026      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e4c:	d81c      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e52:	d010      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e58:	d816      	bhi.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d01d      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e62:	d111      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3304      	adds	r3, #4
 8003e68:	2100      	movs	r1, #0
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fa6a 	bl	8004344 <RCCEx_PLL2_Config>
 8003e70:	4603      	mov	r3, r0
 8003e72:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e74:	e012      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3324      	adds	r3, #36	; 0x24
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fb13 	bl	80044a8 <RCCEx_PLL3_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003e86:	e009      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8c:	e006      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e004      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003e9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ea2:	4b2e      	ldr	r3, [pc, #184]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb0:	492a      	ldr	r1, [pc, #168]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	654b      	str	r3, [r1, #84]	; 0x54
 8003eb6:	e001      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
 8003eba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d04d      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ece:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ed2:	d02e      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ed4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ed8:	d828      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ede:	d02a      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee4:	d822      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ee6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eea:	d026      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ef0:	d81c      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ef6:	d010      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003efc:	d816      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d01d      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f06:	d111      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fa18 	bl	8004344 <RCCEx_PLL2_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f18:	e012      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3324      	adds	r3, #36	; 0x24
 8003f1e:	2102      	movs	r1, #2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fac1 	bl	80044a8 <RCCEx_PLL3_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f2a:	e009      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f30:	e006      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f32:	bf00      	nop
 8003f34:	e004      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f54:	4901      	ldr	r1, [pc, #4]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	658b      	str	r3, [r1, #88]	; 0x58
 8003f5a:	e003      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003f5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d04b      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f7a:	d02e      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003f7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f80:	d828      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f86:	d02a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8c:	d822      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f92:	d026      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003f94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f98:	d81c      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa4:	d816      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f9c4 	bl	8004344 <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fc0:	e012      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3324      	adds	r3, #36	; 0x24
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa6d 	bl	80044a8 <RCCEx_PLL3_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003fd2:	e009      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e004      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fde:	bf00      	nop
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003fe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fee:	4b9d      	ldr	r3, [pc, #628]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ffc:	4999      	ldr	r1, [pc, #612]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	658b      	str	r3, [r1, #88]	; 0x58
 8004002:	e001      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	7dfb      	ldrb	r3, [r7, #23]
 8004006:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0308 	and.w	r3, r3, #8
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	d10a      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3324      	adds	r3, #36	; 0x24
 8004024:	2102      	movs	r1, #2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fa3e 	bl	80044a8 <RCCEx_PLL3_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004036:	4b8b      	ldr	r3, [pc, #556]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004044:	4987      	ldr	r1, [pc, #540]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004046:	4313      	orrs	r3, r2
 8004048:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004060:	d10a      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3324      	adds	r3, #36	; 0x24
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fa1d 	bl	80044a8 <RCCEx_PLL3_Config>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004078:	4b7a      	ldr	r3, [pc, #488]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004086:	4977      	ldr	r1, [pc, #476]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004088:	4313      	orrs	r3, r2
 800408a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d034      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800409e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a2:	d01d      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a8:	d817      	bhi.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b2:	d009      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80040b4:	e011      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3304      	adds	r3, #4
 80040ba:	2100      	movs	r1, #0
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 f941 	bl	8004344 <RCCEx_PLL2_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040c6:	e00c      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3324      	adds	r3, #36	; 0x24
 80040cc:	2102      	movs	r1, #2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f9ea 	bl	80044a8 <RCCEx_PLL3_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
      break;
 80040de:	e000      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80040e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040e8:	4b5e      	ldr	r3, [pc, #376]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040f6:	495b      	ldr	r1, [pc, #364]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	658b      	str	r3, [r1, #88]	; 0x58
 80040fc:	e001      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d033      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004114:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004118:	d01c      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800411a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800411e:	d816      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004124:	d003      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800412a:	d007      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800412e:	4b4d      	ldr	r3, [pc, #308]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	4a4c      	ldr	r2, [pc, #304]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004138:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800413a:	e00c      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3324      	adds	r3, #36	; 0x24
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f9b0 	bl	80044a8 <RCCEx_PLL3_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
      break;
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004156:	7dfb      	ldrb	r3, [r7, #23]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800415c:	4b41      	ldr	r3, [pc, #260]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800416a:	493e      	ldr	r1, [pc, #248]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800416c:	4313      	orrs	r3, r2
 800416e:	654b      	str	r3, [r1, #84]	; 0x54
 8004170:	e001      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d029      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d007      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004190:	e00f      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004192:	4b34      	ldr	r3, [pc, #208]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	4a33      	ldr	r2, [pc, #204]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800419e:	e00b      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	2102      	movs	r1, #2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f8cc 	bl	8004344 <RCCEx_PLL2_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	75fb      	strb	r3, [r7, #23]
      break;
 80041b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b8:	7dfb      	ldrb	r3, [r7, #23]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	4926      	ldr	r1, [pc, #152]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80041d0:	e001      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00a      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3324      	adds	r3, #36	; 0x24
 80041e6:	2102      	movs	r1, #2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f95d 	bl	80044a8 <RCCEx_PLL3_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d033      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800420c:	d017      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800420e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004212:	d811      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004218:	d013      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800421a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800421e:	d80b      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d010      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004228:	d106      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800422a:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004234:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004236:	e007      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	e004      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004246:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004248:	7dfb      	ldrb	r3, [r7, #23]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800424e:	4b05      	ldr	r3, [pc, #20]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425a:	4902      	ldr	r1, [pc, #8]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800425c:	4313      	orrs	r3, r2
 800425e:	654b      	str	r3, [r1, #84]	; 0x54
 8004260:	e004      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004262:	bf00      	nop
 8004264:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	492e      	ldr	r1, [pc, #184]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004286:	4313      	orrs	r3, r2
 8004288:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042a4:	4926      	ldr	r1, [pc, #152]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d008      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042b6:	4b22      	ldr	r3, [pc, #136]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042c2:	491f      	ldr	r1, [pc, #124]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	4a19      	ldr	r2, [pc, #100]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042de:	6113      	str	r3, [r2, #16]
 80042e0:	4b17      	ldr	r3, [pc, #92]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042ea:	4915      	ldr	r1, [pc, #84]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	da08      	bge.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004304:	490e      	ldr	r1, [pc, #56]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004306:	4313      	orrs	r3, r2
 8004308:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	4906      	ldr	r1, [pc, #24]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004326:	4313      	orrs	r3, r2
 8004328:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800432a:	7dbb      	ldrb	r3, [r7, #22]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e000      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400

08004344 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004352:	4b53      	ldr	r3, [pc, #332]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d101      	bne.n	8004362 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e099      	b.n	8004496 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004362:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a4e      	ldr	r2, [pc, #312]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800436c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436e:	f7fc fd8f 	bl	8000e90 <HAL_GetTick>
 8004372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004374:	e008      	b.n	8004388 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004376:	f7fc fd8b 	bl	8000e90 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e086      	b.n	8004496 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004388:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004394:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	031b      	lsls	r3, r3, #12
 80043a2:	493f      	ldr	r1, [pc, #252]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	628b      	str	r3, [r1, #40]	; 0x28
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	025b      	lsls	r3, r3, #9
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043d8:	4931      	ldr	r1, [pc, #196]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043de:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	492d      	ldr	r1, [pc, #180]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	f023 0220 	bic.w	r2, r3, #32
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4928      	ldr	r1, [pc, #160]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004402:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004408:	f023 0310 	bic.w	r3, r3, #16
 800440c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004412:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <RCCEx_PLL2_Config+0x160>)
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	69d2      	ldr	r2, [r2, #28]
 800441a:	00d2      	lsls	r2, r2, #3
 800441c:	4920      	ldr	r1, [pc, #128]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004422:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004428:	f043 0310 	orr.w	r3, r3, #16
 800442c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800443a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800443e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004440:	e00f      	b.n	8004462 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d106      	bne.n	8004456 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800444e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004454:	e005      	b.n	8004462 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800445c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004460:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a0e      	ldr	r2, [pc, #56]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800446c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446e:	f7fc fd0f 	bl	8000e90 <HAL_GetTick>
 8004472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004474:	e008      	b.n	8004488 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004476:	f7fc fd0b 	bl	8000e90 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e006      	b.n	8004496 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	58024400 	.word	0x58024400
 80044a4:	ffff0007 	.word	0xffff0007

080044a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044b6:	4b53      	ldr	r3, [pc, #332]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d101      	bne.n	80044c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e099      	b.n	80045fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044c6:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a4e      	ldr	r2, [pc, #312]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d2:	f7fc fcdd 	bl	8000e90 <HAL_GetTick>
 80044d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044d8:	e008      	b.n	80044ec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80044da:	f7fc fcd9 	bl	8000e90 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e086      	b.n	80045fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044ec:	4b45      	ldr	r3, [pc, #276]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044f8:	4b42      	ldr	r3, [pc, #264]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	051b      	lsls	r3, r3, #20
 8004506:	493f      	ldr	r1, [pc, #252]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	628b      	str	r3, [r1, #40]	; 0x28
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	3b01      	subs	r3, #1
 8004512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	3b01      	subs	r3, #1
 800451c:	025b      	lsls	r3, r3, #9
 800451e:	b29b      	uxth	r3, r3
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	3b01      	subs	r3, #1
 8004528:	041b      	lsls	r3, r3, #16
 800452a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	3b01      	subs	r3, #1
 8004536:	061b      	lsls	r3, r3, #24
 8004538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800453c:	4931      	ldr	r1, [pc, #196]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004542:	4b30      	ldr	r3, [pc, #192]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	492d      	ldr	r1, [pc, #180]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004550:	4313      	orrs	r3, r2
 8004552:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004554:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	4928      	ldr	r1, [pc, #160]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	4a26      	ldr	r2, [pc, #152]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <RCCEx_PLL3_Config+0x160>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	69d2      	ldr	r2, [r2, #28]
 800457e:	00d2      	lsls	r2, r2, #3
 8004580:	4920      	ldr	r1, [pc, #128]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004586:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800459e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045a4:	e00f      	b.n	80045c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d106      	bne.n	80045ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045ac:	4b15      	ldr	r3, [pc, #84]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045b8:	e005      	b.n	80045c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	4a11      	ldr	r2, [pc, #68]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a0e      	ldr	r2, [pc, #56]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d2:	f7fc fc5d 	bl	8000e90 <HAL_GetTick>
 80045d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045d8:	e008      	b.n	80045ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045da:	f7fc fc59 	bl	8000e90 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e006      	b.n	80045fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	ffff0007 	.word	0xffff0007

0800460c <memset>:
 800460c:	4402      	add	r2, r0
 800460e:	4603      	mov	r3, r0
 8004610:	4293      	cmp	r3, r2
 8004612:	d100      	bne.n	8004616 <memset+0xa>
 8004614:	4770      	bx	lr
 8004616:	f803 1b01 	strb.w	r1, [r3], #1
 800461a:	e7f9      	b.n	8004610 <memset+0x4>

0800461c <__libc_init_array>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4d0d      	ldr	r5, [pc, #52]	; (8004654 <__libc_init_array+0x38>)
 8004620:	4c0d      	ldr	r4, [pc, #52]	; (8004658 <__libc_init_array+0x3c>)
 8004622:	1b64      	subs	r4, r4, r5
 8004624:	10a4      	asrs	r4, r4, #2
 8004626:	2600      	movs	r6, #0
 8004628:	42a6      	cmp	r6, r4
 800462a:	d109      	bne.n	8004640 <__libc_init_array+0x24>
 800462c:	4d0b      	ldr	r5, [pc, #44]	; (800465c <__libc_init_array+0x40>)
 800462e:	4c0c      	ldr	r4, [pc, #48]	; (8004660 <__libc_init_array+0x44>)
 8004630:	f000 f826 	bl	8004680 <_init>
 8004634:	1b64      	subs	r4, r4, r5
 8004636:	10a4      	asrs	r4, r4, #2
 8004638:	2600      	movs	r6, #0
 800463a:	42a6      	cmp	r6, r4
 800463c:	d105      	bne.n	800464a <__libc_init_array+0x2e>
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	f855 3b04 	ldr.w	r3, [r5], #4
 8004644:	4798      	blx	r3
 8004646:	3601      	adds	r6, #1
 8004648:	e7ee      	b.n	8004628 <__libc_init_array+0xc>
 800464a:	f855 3b04 	ldr.w	r3, [r5], #4
 800464e:	4798      	blx	r3
 8004650:	3601      	adds	r6, #1
 8004652:	e7f2      	b.n	800463a <__libc_init_array+0x1e>
 8004654:	08004704 	.word	0x08004704
 8004658:	08004704 	.word	0x08004704
 800465c:	08004704 	.word	0x08004704
 8004660:	08004708 	.word	0x08004708

08004664 <memcpy>:
 8004664:	440a      	add	r2, r1
 8004666:	4291      	cmp	r1, r2
 8004668:	f100 33ff 	add.w	r3, r0, #4294967295
 800466c:	d100      	bne.n	8004670 <memcpy+0xc>
 800466e:	4770      	bx	lr
 8004670:	b510      	push	{r4, lr}
 8004672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800467a:	4291      	cmp	r1, r2
 800467c:	d1f9      	bne.n	8004672 <memcpy+0xe>
 800467e:	bd10      	pop	{r4, pc}

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
