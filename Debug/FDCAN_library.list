
FDCAN_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  24000000  08004b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a90  24000078  08004b84  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000b08  08004b84  00020b08  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e81d  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c55  00000000  00000000  0002e8bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ac8  00000000  00000000  00030518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009f0  00000000  00000000  00030fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035d53  00000000  00000000  000319d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000bfda  00000000  00000000  00067723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00158cf2  00000000  00000000  000736fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001cc3ef  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e98  00000000  00000000  001cc440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004a84 	.word	0x08004a84

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	08004a84 	.word	0x08004a84

080002d8 <HAL_FDCAN_RxFifo0Callback>:
 * @brief  Função chamada quando detectado uma mensagem no barramento da CAN
 * @param  hfdcan: Handle da CAN || normalmente "hfdcan1"
 * @param  RxFifo0ITs: FIFO de interrupção utilizado
 * @retval ***NONE***
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
	/* Pisca o  LED 2 caso tenha algo para receber pela CAN */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80002e2:	2101      	movs	r1, #1
 80002e4:	480d      	ldr	r0, [pc, #52]	; (800031c <HAL_FDCAN_RxFifo0Callback+0x44>)
 80002e6:	f002 fa22 	bl	800272e <HAL_GPIO_TogglePin>

	/* Pega as informações e dados da CAN, e armazena respectivamente em RxHeader e RxData */
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80002ee:	2140      	movs	r1, #64	; 0x40
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <HAL_FDCAN_RxFifo0Callback+0x50>)
 80002f2:	f001 f95d 	bl	80015b0 <HAL_FDCAN_GetRxMessage>

	/* Chama a função de tratamento de dados */
	canMessageReceived(&RxHeader, RxData);
 80002f6:	490a      	ldr	r1, [pc, #40]	; (8000320 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80002f8:	480a      	ldr	r0, [pc, #40]	; (8000324 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80002fa:	f000 f879 	bl	80003f0 <canMessageReceived>

	/* Ativa novamente a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80002fe:	2200      	movs	r2, #0
 8000300:	2101      	movs	r1, #1
 8000302:	4809      	ldr	r0, [pc, #36]	; (8000328 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000304:	f001 fac2 	bl	800188c <HAL_FDCAN_ActivateNotification>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <HAL_FDCAN_RxFifo0Callback+0x3a>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 800030e:	f000 fb61 	bl	80009d4 <Error_Handler>
	}
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	58020400 	.word	0x58020400
 8000320:	24000a40 	.word	0x24000a40
 8000324:	24000a18 	.word	0x24000a18
 8000328:	24000a48 	.word	0x24000a48

0800032c <CAN_stream_Init>:
/**
 * @brief  Inicialização do vetor de dados da CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_stream_Init(void) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	/* Zera cada posição do vetor de dados - Redundância */
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000332:	2300      	movs	r3, #0
 8000334:	80fb      	strh	r3, [r7, #6]
 8000336:	e01a      	b.n	800036e <CAN_stream_Init+0x42>
		free(CAN_stream.Data_buf[i]);
 8000338:	88fb      	ldrh	r3, [r7, #6]
 800033a:	4a11      	ldr	r2, [pc, #68]	; (8000380 <CAN_stream_Init+0x54>)
 800033c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000340:	4618      	mov	r0, r3
 8000342:	f004 fa83 	bl	800484c <free>
		CAN_stream.Data_buf[i] = NULL;
 8000346:	88fb      	ldrh	r3, [r7, #6]
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <CAN_stream_Init+0x54>)
 800034a:	2100      	movs	r1, #0
 800034c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		*CAN_stream.Data_buf[i] = 0;
 8000350:	88fb      	ldrh	r3, [r7, #6]
 8000352:	4a0b      	ldr	r2, [pc, #44]	; (8000380 <CAN_stream_Init+0x54>)
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
		CAN_stream.Size_buf[i] = 0;
 800035c:	88fb      	ldrh	r3, [r7, #6]
 800035e:	4a08      	ldr	r2, [pc, #32]	; (8000380 <CAN_stream_Init+0x54>)
 8000360:	4413      	add	r3, r2
 8000362:	2200      	movs	r2, #0
 8000364:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000368:	88fb      	ldrh	r3, [r7, #6]
 800036a:	3301      	adds	r3, #1
 800036c:	80fb      	strh	r3, [r7, #6]
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000374:	d3e0      	bcc.n	8000338 <CAN_stream_Init+0xc>
	}
}
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	24000094 	.word	0x24000094

08000384 <CAN_Init>:
/**
 * @brief  Inicialização da comunicação via CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Init() {
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	/* Chama a função de configuração dos parâmetros da CAN */
	//	CAN_Configure_Init();
	/* Chama a função de limpeza do vetor de armazenamento de dados */
	CAN_stream_Init();
 8000388:	f7ff ffd0 	bl	800032c <CAN_stream_Init>

	/* Começa a comunicação via CAN */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800038c:	4816      	ldr	r0, [pc, #88]	; (80003e8 <CAN_Init+0x64>)
 800038e:	f001 f889 	bl	80014a4 <HAL_FDCAN_Start>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <CAN_Init+0x18>
		// Caso de errado, chama a função de erro
		Error_Handler();
 8000398:	f000 fb1c 	bl	80009d4 <Error_Handler>
	}

	/* Ativa a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 800039c:	2200      	movs	r2, #0
 800039e:	2101      	movs	r1, #1
 80003a0:	4811      	ldr	r0, [pc, #68]	; (80003e8 <CAN_Init+0x64>)
 80003a2:	f001 fa73 	bl	800188c <HAL_FDCAN_ActivateNotification>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <CAN_Init+0x2c>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 80003ac:	f000 fb12 	bl	80009d4 <Error_Handler>
	}

	/* Configura os parametros para envio de mensagem */
	TxHeader.IdType = FDCAN_STANDARD_ID; // TIPO DE IDENTIFICADOR - STANDARD OU EXTENDED
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <CAN_Init+0x68>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // TIPO DE FLAME - DATA OU REMOTE
 80003b6:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <CAN_Init+0x68>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8; // TAMANHO DOS DADOS - 0 A 64 WORDS - CONVERTIDO PRA 4
 80003bc:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <CAN_Init+0x68>)
 80003be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80003c2:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // INDICADOR DE ERRO - ATIVO OU PASSIVO
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <CAN_Init+0x68>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;	// BIT DE INTERRUPÇÃO - ON OU OFF
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <CAN_Init+0x68>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;		// TIPO DE CAN - NORMAL OU FDCAN
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <CAN_Init+0x68>)
 80003d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003d6:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // ARMAZENAMENTO DE EVENTOS DE ENVIO - ON OU OFF
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <CAN_Init+0x68>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;				// MASCARA DA MENSAGEM - 0 A 0xFF
 80003de:	4b03      	ldr	r3, [pc, #12]	; (80003ec <CAN_Init+0x68>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	621a      	str	r2, [r3, #32]
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	24000a48 	.word	0x24000a48
 80003ec:	240009f4 	.word	0x240009f4

080003f0 <canMessageReceived>:
 * @brief  Função de tratamento das mensagens recebidas
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void canMessageReceived(FDCAN_RxHeaderTypeDef *hRxFDCAN, uint8_t *DATA) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
	/* Caso o ID passe do maior valor, a função quebra */

	/* Variavel para armazenamento do tamanho de dados */
	uint8_t SIZE_DATA = hRxFDCAN->DataLength >> 16U;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	0c1b      	lsrs	r3, r3, #16
 8000400:	73fb      	strb	r3, [r7, #15]

	/* Variavel para armazenamento do identificador */
	uint16_t IDENTIFIER = hRxFDCAN->Identifier;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	81bb      	strh	r3, [r7, #12]

	uint8_t TYPE_DATA = DATA[0] & 0x03;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	f003 0303 	and.w	r3, r3, #3
 8000410:	72fb      	strb	r3, [r7, #11]

	/* Caso o indentificador não faça parte dos ID's utilizados a função quebra */
	if (IDENTIFIER > CAN_IDS_NUMBER)
 8000412:	89bb      	ldrh	r3, [r7, #12]
 8000414:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000418:	d815      	bhi.n	8000446 <canMessageReceived+0x56>
		return;

	switch (TYPE_DATA) {
 800041a:	7afb      	ldrb	r3, [r7, #11]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d002      	beq.n	8000426 <canMessageReceived+0x36>
 8000420:	2b01      	cmp	r3, #1
 8000422:	d008      	beq.n	8000436 <canMessageReceived+0x46>
		break;
	case 0x01:
		CAN_Storage_NEGATIVE(IDENTIFIER, SIZE_DATA, DATA);
		break;
	default:
		break;
 8000424:	e010      	b.n	8000448 <canMessageReceived+0x58>
		CAN_Storage_POSITIVE(IDENTIFIER, SIZE_DATA, DATA);
 8000426:	89bb      	ldrh	r3, [r7, #12]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	7bf9      	ldrb	r1, [r7, #15]
 800042c:	683a      	ldr	r2, [r7, #0]
 800042e:	4618      	mov	r0, r3
 8000430:	f000 f80e 	bl	8000450 <CAN_Storage_POSITIVE>
		break;
 8000434:	e008      	b.n	8000448 <canMessageReceived+0x58>
		CAN_Storage_NEGATIVE(IDENTIFIER, SIZE_DATA, DATA);
 8000436:	89bb      	ldrh	r3, [r7, #12]
 8000438:	b2db      	uxtb	r3, r3
 800043a:	7bf9      	ldrb	r1, [r7, #15]
 800043c:	683a      	ldr	r2, [r7, #0]
 800043e:	4618      	mov	r0, r3
 8000440:	f000 f868 	bl	8000514 <CAN_Storage_NEGATIVE>
		break;
 8000444:	e000      	b.n	8000448 <canMessageReceived+0x58>
		return;
 8000446:	bf00      	nop
	}
}
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <CAN_Storage_POSITIVE>:

void CAN_Storage_POSITIVE(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 8000450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000454:	b087      	sub	sp, #28
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	603a      	str	r2, [r7, #0]
 800045c:	71fb      	strb	r3, [r7, #7]
 800045e:	460b      	mov	r3, r1
 8000460:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 8000462:	f04f 0200 	mov.w	r2, #0
 8000466:	f04f 0300 	mov.w	r3, #0
 800046a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4a27      	ldr	r2, [pc, #156]	; (8000510 <CAN_Storage_POSITIVE+0xc0>)
 8000472:	4413      	add	r3, r2
 8000474:	79ba      	ldrb	r2, [r7, #6]
 8000476:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_POSITIVE;
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	4a24      	ldr	r2, [pc, #144]	; (8000510 <CAN_Storage_POSITIVE+0xc0>)
 800047e:	4413      	add	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	4a21      	ldr	r2, [pc, #132]	; (8000510 <CAN_Storage_POSITIVE+0xc0>)
 800048a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800048e:	4618      	mov	r0, r3
 8000490:	f004 f9dc 	bl	800484c <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	79fe      	ldrb	r6, [r7, #7]
 8000498:	4618      	mov	r0, r3
 800049a:	f004 f9cf 	bl	800483c <malloc>
 800049e:	4603      	mov	r3, r0
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <CAN_Storage_POSITIVE+0xc0>)
 80004a4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]

	for (int i = 0; i < Size; i++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	60fb      	str	r3, [r7, #12]
 80004ac:	e016      	b.n	80004dc <CAN_Storage_POSITIVE+0x8c>
		value += Data[i] << 8 * i;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	683a      	ldr	r2, [r7, #0]
 80004b2:	4413      	add	r3, r2
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	461a      	mov	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	00db      	lsls	r3, r3, #3
 80004bc:	fa02 f303 	lsl.w	r3, r2, r3
 80004c0:	17da      	asrs	r2, r3, #31
 80004c2:	461c      	mov	r4, r3
 80004c4:	4615      	mov	r5, r2
 80004c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80004ca:	eb12 0804 	adds.w	r8, r2, r4
 80004ce:	eb43 0905 	adc.w	r9, r3, r5
 80004d2:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (int i = 0; i < Size; i++)
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	3301      	adds	r3, #1
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	79bb      	ldrb	r3, [r7, #6]
 80004de:	68fa      	ldr	r2, [r7, #12]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbe4      	blt.n	80004ae <CAN_Storage_POSITIVE+0x5e>

	/* Armazena o valor na memória alocada*/
	*CAN_stream.Data_buf[Identifier] = value >> 2U;
 80004e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80004e8:	f04f 0200 	mov.w	r2, #0
 80004ec:	f04f 0300 	mov.w	r3, #0
 80004f0:	0882      	lsrs	r2, r0, #2
 80004f2:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
 80004f6:	088b      	lsrs	r3, r1, #2
 80004f8:	79f9      	ldrb	r1, [r7, #7]
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <CAN_Storage_POSITIVE+0xc0>)
 80004fc:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8000500:	b2d3      	uxtb	r3, r2
 8000502:	700b      	strb	r3, [r1, #0]
}
 8000504:	bf00      	nop
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800050e:	bf00      	nop
 8000510:	24000094 	.word	0x24000094

08000514 <CAN_Storage_NEGATIVE>:

void CAN_Storage_NEGATIVE(uint8_t Identifier, uint8_t Size, uint8_t *Data) {
 8000514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000518:	b087      	sub	sp, #28
 800051a:	af00      	add	r7, sp, #0
 800051c:	4603      	mov	r3, r0
 800051e:	603a      	str	r2, [r7, #0]
 8000520:	71fb      	strb	r3, [r7, #7]
 8000522:	460b      	mov	r3, r1
 8000524:	71bb      	strb	r3, [r7, #6]
	uint64_t value = 0;
 8000526:	f04f 0200 	mov.w	r2, #0
 800052a:	f04f 0300 	mov.w	r3, #0
 800052e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[Identifier] = Size;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <CAN_Storage_NEGATIVE+0xc0>)
 8000536:	4413      	add	r3, r2
 8000538:	79ba      	ldrb	r2, [r7, #6]
 800053a:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	CAN_stream.Type_buf[Identifier] = CAN_NEGATIVE;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4a24      	ldr	r2, [pc, #144]	; (80005d4 <CAN_Storage_NEGATIVE+0xc0>)
 8000542:	4413      	add	r3, r2
 8000544:	2201      	movs	r2, #1
 8000546:	f883 27d0 	strb.w	r2, [r3, #2000]	; 0x7d0

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[Identifier]);
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <CAN_Storage_NEGATIVE+0xc0>)
 800054e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000552:	4618      	mov	r0, r3
 8000554:	f004 f97a 	bl	800484c <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[Identifier] = malloc(Size * sizeof(uint8_t));
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	79fe      	ldrb	r6, [r7, #7]
 800055c:	4618      	mov	r0, r3
 800055e:	f004 f96d 	bl	800483c <malloc>
 8000562:	4603      	mov	r3, r0
 8000564:	461a      	mov	r2, r3
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <CAN_Storage_NEGATIVE+0xc0>)
 8000568:	f843 2026 	str.w	r2, [r3, r6, lsl #2]

	for (int i = 0; i < Size; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	e016      	b.n	80005a0 <CAN_Storage_NEGATIVE+0x8c>
		value += Data[i] << 8 * i;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	4413      	add	r3, r2
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	17da      	asrs	r2, r3, #31
 8000586:	461c      	mov	r4, r3
 8000588:	4615      	mov	r5, r2
 800058a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800058e:	eb12 0804 	adds.w	r8, r2, r4
 8000592:	eb43 0905 	adc.w	r9, r3, r5
 8000596:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (int i = 0; i < Size; i++)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	79bb      	ldrb	r3, [r7, #6]
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	dbe4      	blt.n	8000572 <CAN_Storage_NEGATIVE+0x5e>

	/* Armazena o valor na memória alocada*/
	*CAN_stream.Data_buf[Identifier] = value >> 1;
 80005a8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005ac:	f04f 0200 	mov.w	r2, #0
 80005b0:	f04f 0300 	mov.w	r3, #0
 80005b4:	0842      	lsrs	r2, r0, #1
 80005b6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80005ba:	084b      	lsrs	r3, r1, #1
 80005bc:	79f9      	ldrb	r1, [r7, #7]
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <CAN_Storage_NEGATIVE+0xc0>)
 80005c0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 80005c4:	b2d3      	uxtb	r3, r2
 80005c6:	700b      	strb	r3, [r1, #0]
}
 80005c8:	bf00      	nop
 80005ca:	371c      	adds	r7, #28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80005d2:	bf00      	nop
 80005d4:	24000094 	.word	0x24000094

080005d8 <CAN_TxData>:
 * @brief  Envio de mensagem pelo barramento CAN
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_TxData(uint16_t Identifier, uint64_t Data) {
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	b089      	sub	sp, #36	; 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4601      	mov	r1, r0
 80005e0:	e9c7 2300 	strd	r2, r3, [r7]
 80005e4:	460b      	mov	r3, r1
 80005e6:	81fb      	strh	r3, [r7, #14]
	uint64_t *pData = &Data;
 80005e8:	463b      	mov	r3, r7
 80005ea:	617b      	str	r3, [r7, #20]
	uint32_t Size_data = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < 8; i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
 80005f4:	e01b      	b.n	800062e <CAN_TxData+0x56>
		if (Data >> 8 * i == 0) {
 80005f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005fa:	69b9      	ldr	r1, [r7, #24]
 80005fc:	00c9      	lsls	r1, r1, #3
 80005fe:	f1c1 0620 	rsb	r6, r1, #32
 8000602:	f1a1 0020 	sub.w	r0, r1, #32
 8000606:	fa22 f401 	lsr.w	r4, r2, r1
 800060a:	fa03 f606 	lsl.w	r6, r3, r6
 800060e:	4334      	orrs	r4, r6
 8000610:	fa23 f000 	lsr.w	r0, r3, r0
 8000614:	4304      	orrs	r4, r0
 8000616:	fa23 f501 	lsr.w	r5, r3, r1
 800061a:	ea54 0305 	orrs.w	r3, r4, r5
 800061e:	d103      	bne.n	8000628 <CAN_TxData+0x50>
			Size_data = i << 16U;
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	041b      	lsls	r3, r3, #16
 8000624:	61fb      	str	r3, [r7, #28]
			break;
 8000626:	e005      	b.n	8000634 <CAN_TxData+0x5c>
	for (int i = 0; i < 8; i++)
 8000628:	69bb      	ldr	r3, [r7, #24]
 800062a:	3301      	adds	r3, #1
 800062c:	61bb      	str	r3, [r7, #24]
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	2b07      	cmp	r3, #7
 8000632:	dde0      	ble.n	80005f6 <CAN_TxData+0x1e>
		}

	/* Armazena o identificador da mensagem no struct de informação (TxHeader) */
	TxHeader.Identifier = Identifier;
 8000634:	89fb      	ldrh	r3, [r7, #14]
 8000636:	4a09      	ldr	r2, [pc, #36]	; (800065c <CAN_TxData+0x84>)
 8000638:	6013      	str	r3, [r2, #0]

	TxHeader.DataLength = Size_data;
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <CAN_TxData+0x84>)
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	60d3      	str	r3, [r2, #12]

	/* Envia os dados recebidos na chamada (data) pela CAN, de acordo com as informações de TxHeader */
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, (uint8_t*) pData)
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	4906      	ldr	r1, [pc, #24]	; (800065c <CAN_TxData+0x84>)
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <CAN_TxData+0x88>)
 8000646:	f000 ff58 	bl	80014fa <HAL_FDCAN_AddMessageToTxFifoQ>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <CAN_TxData+0x7c>
			!= HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000650:	f000 f9c0 	bl	80009d4 <Error_Handler>
	}
}
 8000654:	bf00      	nop
 8000656:	3724      	adds	r7, #36	; 0x24
 8000658:	46bd      	mov	sp, r7
 800065a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065c:	240009f4 	.word	0x240009f4
 8000660:	24000a48 	.word	0x24000a48

08000664 <CAN_Send>:
 * @brief  Envio de mensagem pelo barramento CAN
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_Send(uint16_t Identifier, int64_t Data) {
 8000664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000668:	b084      	sub	sp, #16
 800066a:	af00      	add	r7, sp, #0
 800066c:	4601      	mov	r1, r0
 800066e:	e9c7 2300 	strd	r2, r3, [r7]
 8000672:	460b      	mov	r3, r1
 8000674:	81fb      	strh	r3, [r7, #14]

	if (Data > 0)
 8000676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800067a:	2a01      	cmp	r2, #1
 800067c:	f173 0300 	sbcs.w	r3, r3, #0
 8000680:	db0c      	blt.n	800069c <CAN_Send+0x38>

		Data = (Data << 2) | 0x00;
 8000682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	008b      	lsls	r3, r1, #2
 8000690:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8000694:	0082      	lsls	r2, r0, #2
 8000696:	e9c7 2300 	strd	r2, r3, [r7]
 800069a:	e012      	b.n	80006c2 <CAN_Send+0x5e>
	else
		Data = ((-Data) << 2) | 0x01;
 800069c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006a0:	2100      	movs	r1, #0
 80006a2:	4254      	negs	r4, r2
 80006a4:	eb61 0503 	sbc.w	r5, r1, r3
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	00ab      	lsls	r3, r5, #2
 80006b2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80006b6:	00a2      	lsls	r2, r4, #2
 80006b8:	f042 0801 	orr.w	r8, r2, #1
 80006bc:	4699      	mov	r9, r3
 80006be:	e9c7 8900 	strd	r8, r9, [r7]

	CAN_TxData(Identifier, Data);
 80006c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80006c6:	89f9      	ldrh	r1, [r7, #14]
 80006c8:	4608      	mov	r0, r1
 80006ca:	f7ff ff85 	bl	80005d8 <CAN_TxData>
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080006d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006dc:	f000 fb32 	bl	8000d44 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006e0:	f000 f81a 	bl	8000718 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006e4:	f000 f8fc 	bl	80008e0 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 80006e8:	f000 f894 	bl	8000814 <MX_FDCAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_Init();
 80006ec:	f7ff fe4a 	bl	8000384 <CAN_Init>

	TxData1 = -2562;
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <main+0x38>)
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <main+0x3c>)
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295
 80006f8:	e9c1 2300 	strd	r2, r3, [r1]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		CAN_Send(100, TxData1);
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <main+0x38>)
 80006fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f7ff ffae 	bl	8000664 <CAN_Send>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(70);
 8000708:	2046      	movs	r0, #70	; 0x46
 800070a:	f000 fbad 	bl	8000e68 <HAL_Delay>
	while (1) {
 800070e:	e7f5      	b.n	80006fc <main+0x24>
 8000710:	24000ae8 	.word	0x24000ae8
 8000714:	fffff5fe 	.word	0xfffff5fe

08000718 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b09c      	sub	sp, #112	; 0x70
 800071c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	224c      	movs	r2, #76	; 0x4c
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f004 f8a6 	bl	8004878 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2220      	movs	r2, #32
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 f8a0 	bl	8004878 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000738:	2002      	movs	r0, #2
 800073a:	f002 f813 	bl	8002764 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073e:	2300      	movs	r3, #0
 8000740:	603b      	str	r3, [r7, #0]
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <SystemClock_Config+0xf4>)
 8000744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000746:	4a31      	ldr	r2, [pc, #196]	; (800080c <SystemClock_Config+0xf4>)
 8000748:	f023 0301 	bic.w	r3, r3, #1
 800074c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <SystemClock_Config+0xf4>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <SystemClock_Config+0xf8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000760:	4a2b      	ldr	r2, [pc, #172]	; (8000810 <SystemClock_Config+0xf8>)
 8000762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xf8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000774:	bf00      	nop
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xf8>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800077e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000782:	d1f8      	bne.n	8000776 <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000788:	2301      	movs	r3, #1
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2340      	movs	r3, #64	; 0x40
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 800079c:	230c      	movs	r3, #12
 800079e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ac:	230c      	movs	r3, #12
 80007ae:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 f80a 	bl	80027d8 <HAL_RCC_OscConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xb6>
		Error_Handler();
 80007ca:	f000 f903 	bl	80009d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ce:	233f      	movs	r3, #63	; 0x3f
 80007d0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d2:	2303      	movs	r3, #3
 80007d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2102      	movs	r1, #2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f002 fc1e 	bl	8003034 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xea>
		Error_Handler();
 80007fe:	f000 f8e9 	bl	80009d4 <Error_Handler>
	}
}
 8000802:	bf00      	nop
 8000804:	3770      	adds	r7, #112	; 0x70
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	58000400 	.word	0x58000400
 8000810:	58024800 	.word	0x58024800

08000814 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8000818:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800081a:	4a30      	ldr	r2, [pc, #192]	; (80008dc <MX_FDCAN1_Init+0xc8>)
 800081c:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800081e:	4b2e      	ldr	r3, [pc, #184]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000824:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000828:	2203      	movs	r2, #3
 800082a:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800082e:	2200      	movs	r2, #0
 8000830:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000834:	2200      	movs	r2, #0
 8000836:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800083a:	2200      	movs	r2, #0
 800083c:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 1;
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000840:	2201      	movs	r2, #1
 8000842:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 7;
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000846:	2207      	movs	r2, #7
 8000848:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 42;
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800084c:	222a      	movs	r2, #42	; 0x2a
 800084e:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 27;
 8000850:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000852:	221b      	movs	r2, #27
 8000854:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 2;
 8000856:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000858:	2202      	movs	r2, #2
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 12;
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800085e:	220c      	movs	r2, #12
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 12;
 8000862:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000864:	220c      	movs	r2, #12
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 12;
 8000868:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800086a:	220c      	movs	r2, #12
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 800086e:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000870:	2200      	movs	r2, #0
 8000872:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000876:	2200      	movs	r2, #0
 8000878:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800087c:	2200      	movs	r2, #0
 800087e:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000882:	2201      	movs	r2, #1
 8000884:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000888:	2204      	movs	r2, #4
 800088a:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800088e:	2200      	movs	r2, #0
 8000890:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 8000894:	2204      	movs	r2, #4
 8000896:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 800089a:	2200      	movs	r2, #0
 800089c:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 80008a0:	2204      	movs	r2, #4
 80008a2:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 80008be:	2204      	movs	r2, #4
 80008c0:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_FDCAN1_Init+0xc4>)
 80008c4:	f000 fc10 	bl	80010e8 <HAL_FDCAN_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_FDCAN1_Init+0xbe>
		Error_Handler();
 80008ce:	f000 f881 	bl	80009d4 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	24000a48 	.word	0x24000a48
 80008dc:	4000a000 	.word	0x4000a000

080008e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0xe8>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a32      	ldr	r2, [pc, #200]	; (80009c8 <MX_GPIO_Init+0xe8>)
 80008fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	4a2b      	ldr	r2, [pc, #172]	; (80009c8 <MX_GPIO_Init+0xe8>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000924:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000938:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_GPIO_Init+0xe8>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000958:	f043 0310 	orr.w	r3, r3, #16
 800095c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_GPIO_Init+0xe8>)
 8000962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f244 0101 	movw	r1, #16385	; 0x4001
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <MX_GPIO_Init+0xec>)
 8000976:	f001 fec1 	bl	80026fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	4814      	ldr	r0, [pc, #80]	; (80009d0 <MX_GPIO_Init+0xf0>)
 8000980:	f001 febc 	bl	80026fc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14;
 8000984:	f244 0301 	movw	r3, #16385	; 0x4001
 8000988:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0xec>)
 800099e:	f001 fcfd 	bl	800239c <HAL_GPIO_Init>

	/*Configure GPIO pin : PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a2:	2302      	movs	r3, #2
 80009a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_GPIO_Init+0xf0>)
 80009ba:	f001 fcef 	bl	800239c <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	58024400 	.word	0x58024400
 80009cc:	58020400 	.word	0x58020400
 80009d0:	58021000 	.word	0x58021000

080009d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80009dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e0:	4801      	ldr	r0, [pc, #4]	; (80009e8 <Error_Handler+0x14>)
 80009e2:	f001 fea4 	bl	800272e <HAL_GPIO_TogglePin>
 80009e6:	e7f9      	b.n	80009dc <Error_Handler+0x8>
 80009e8:	58020400 	.word	0x58020400

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_MspInit+0x30>)
 80009f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x30>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x30>)
 8000a04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a08:	f003 0302 	and.w	r3, r3, #2
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	58024400 	.word	0x58024400

08000a20 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b0b8      	sub	sp, #224	; 0xe0
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a38:	f107 0310 	add.w	r3, r7, #16
 8000a3c:	22bc      	movs	r2, #188	; 0xbc
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 ff19 	bl	8004878 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a29      	ldr	r2, [pc, #164]	; (8000af0 <HAL_FDCAN_MspInit+0xd0>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d14b      	bne.n	8000ae8 <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a54:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000a56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fe17 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a6c:	f7ff ffb2 	bl	80009d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a70:	4b20      	ldr	r3, [pc, #128]	; (8000af4 <HAL_FDCAN_MspInit+0xd4>)
 8000a72:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a76:	4a1f      	ldr	r2, [pc, #124]	; (8000af4 <HAL_FDCAN_MspInit+0xd4>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <HAL_FDCAN_MspInit+0xd4>)
 8000a82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <HAL_FDCAN_MspInit+0xd4>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <HAL_FDCAN_MspInit+0xd4>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_FDCAN_MspInit+0xd4>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000aac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ab0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ac6:	2309      	movs	r3, #9
 8000ac8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4809      	ldr	r0, [pc, #36]	; (8000af8 <HAL_FDCAN_MspInit+0xd8>)
 8000ad4:	f001 fc62 	bl	800239c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2013      	movs	r0, #19
 8000ade:	f000 face 	bl	800107e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000ae2:	2013      	movs	r0, #19
 8000ae4:	f000 fae5 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	37e0      	adds	r7, #224	; 0xe0
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	4000a000 	.word	0x4000a000
 8000af4:	58024400 	.word	0x58024400
 8000af8:	58020000 	.word	0x58020000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>
	...

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000b08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b0c:	4801      	ldr	r0, [pc, #4]	; (8000b14 <HardFault_Handler+0x10>)
 8000b0e:	f001 fe0e 	bl	800272e <HAL_GPIO_TogglePin>
 8000b12:	e7f9      	b.n	8000b08 <HardFault_Handler+0x4>
 8000b14:	58020400 	.word	0x58020400

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <MemManage_Handler+0x4>

08000b1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <BusFault_Handler+0x4>

08000b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>

08000b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b58:	f000 f966 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <FDCAN1_IT0_IRQHandler+0x10>)
 8000b66:	f000 ff0b 	bl	8001980 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	24000a48 	.word	0x24000a48

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f003 fe20 	bl	80047e8 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	24080000 	.word	0x24080000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	24000af0 	.word	0x24000af0
 8000bdc:	24000b08 	.word	0x24000b08

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be4:	4b37      	ldr	r3, [pc, #220]	; (8000cc4 <SystemInit+0xe4>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a36      	ldr	r2, [pc, #216]	; (8000cc4 <SystemInit+0xe4>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf4:	4b34      	ldr	r3, [pc, #208]	; (8000cc8 <SystemInit+0xe8>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 030f 	and.w	r3, r3, #15
 8000bfc:	2b06      	cmp	r3, #6
 8000bfe:	d807      	bhi.n	8000c10 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c00:	4b31      	ldr	r3, [pc, #196]	; (8000cc8 <SystemInit+0xe8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f023 030f 	bic.w	r3, r3, #15
 8000c08:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <SystemInit+0xe8>)
 8000c0a:	f043 0307 	orr.w	r3, r3, #7
 8000c0e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c10:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <SystemInit+0xec>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a2d      	ldr	r2, [pc, #180]	; (8000ccc <SystemInit+0xec>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <SystemInit+0xec>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <SystemInit+0xec>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	4929      	ldr	r1, [pc, #164]	; (8000ccc <SystemInit+0xec>)
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <SystemInit+0xf0>)
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c2e:	4b26      	ldr	r3, [pc, #152]	; (8000cc8 <SystemInit+0xe8>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d007      	beq.n	8000c4a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <SystemInit+0xe8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f023 030f 	bic.w	r3, r3, #15
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <SystemInit+0xe8>)
 8000c44:	f043 0307 	orr.w	r3, r3, #7
 8000c48:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <SystemInit+0xec>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <SystemInit+0xec>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c56:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <SystemInit+0xec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <SystemInit+0xec>)
 8000c5e:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <SystemInit+0xf4>)
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <SystemInit+0xec>)
 8000c64:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <SystemInit+0xf8>)
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c68:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <SystemInit+0xec>)
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <SystemInit+0xfc>)
 8000c6c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <SystemInit+0xec>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <SystemInit+0xec>)
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <SystemInit+0xfc>)
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <SystemInit+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <SystemInit+0xec>)
 8000c82:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <SystemInit+0xfc>)
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <SystemInit+0xec>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <SystemInit+0xec>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <SystemInit+0xec>)
 8000c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <SystemInit+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <SystemInit+0x100>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <SystemInit+0x104>)
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000caa:	d202      	bcs.n	8000cb2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <SystemInit+0x108>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <SystemInit+0x10c>)
 8000cb4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cb8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	52002000 	.word	0x52002000
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cd4:	02020200 	.word	0x02020200
 8000cd8:	01ff0000 	.word	0x01ff0000
 8000cdc:	01010280 	.word	0x01010280
 8000ce0:	5c001000 	.word	0x5c001000
 8000ce4:	ffff0000 	.word	0xffff0000
 8000ce8:	51008108 	.word	0x51008108
 8000cec:	52004000 	.word	0x52004000

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf4:	f7ff ff74 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d10:	4c0a      	ldr	r4, [pc, #40]	; (8000d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f003 fd69 	bl	80047f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fcd9 	bl	80006d8 <main>
  bx  lr
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d30:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000d34:	08004b10 	.word	0x08004b10
  ldr r2, =_sbss
 8000d38:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000d3c:	24000b08 	.word	0x24000b08

08000d40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC3_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4a:	2003      	movs	r0, #3
 8000d4c:	f000 f98c 	bl	8001068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d50:	f002 fb26 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 8000d54:	4602      	mov	r2, r0
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_Init+0x68>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	4913      	ldr	r1, [pc, #76]	; (8000db0 <HAL_Init+0x6c>)
 8000d62:	5ccb      	ldrb	r3, [r1, r3]
 8000d64:	f003 031f 	and.w	r3, r3, #31
 8000d68:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_Init+0x68>)
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_Init+0x6c>)
 8000d78:	5cd3      	ldrb	r3, [r2, r3]
 8000d7a:	f003 031f 	and.w	r3, r3, #31
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	4a0b      	ldr	r2, [pc, #44]	; (8000db4 <HAL_Init+0x70>)
 8000d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_Init+0x74>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f814 	bl	8000dbc <HAL_InitTick>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e002      	b.n	8000da4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9e:	f7ff fe25 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	58024400 	.word	0x58024400
 8000db0:	08004ae8 	.word	0x08004ae8
 8000db4:	24000004 	.word	0x24000004
 8000db8:	24000000 	.word	0x24000000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_InitTick+0x60>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d101      	bne.n	8000dd0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e021      	b.n	8000e14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_InitTick+0x64>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_InitTick+0x60>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f971 	bl	80010ce <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f93b 	bl	800107e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	; (8000e24 <HAL_InitTick+0x68>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2400000c 	.word	0x2400000c
 8000e20:	24000000 	.word	0x24000000
 8000e24:	24000008 	.word	0x24000008

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	2400000c 	.word	0x2400000c
 8000e4c:	24000af4 	.word	0x24000af4

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	24000af4 	.word	0x24000af4

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2400000c 	.word	0x2400000c

08000eb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000eb4:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <HAL_GetREVID+0x14>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	0c1b      	lsrs	r3, r3, #16
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	5c001000 	.word	0x5c001000

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <__NVIC_SetPriorityGrouping+0x40>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	05fa0000 	.word	0x05fa0000

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4907      	ldr	r1, [pc, #28]	; (8000f64 <__NVIC_EnableIRQ+0x38>)
 8000f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000e100 	.word	0xe000e100

08000f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	db0a      	blt.n	8000f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	490c      	ldr	r1, [pc, #48]	; (8000fb4 <__NVIC_SetPriority+0x4c>)
 8000f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f86:	0112      	lsls	r2, r2, #4
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f90:	e00a      	b.n	8000fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	b2da      	uxtb	r2, r3
 8000f96:	4908      	ldr	r1, [pc, #32]	; (8000fb8 <__NVIC_SetPriority+0x50>)
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	f003 030f 	and.w	r3, r3, #15
 8000f9e:	3b04      	subs	r3, #4
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	440b      	add	r3, r1
 8000fa6:	761a      	strb	r2, [r3, #24]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f1c3 0307 	rsb	r3, r3, #7
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2304      	movcs	r3, #4
 8000fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	2b06      	cmp	r3, #6
 8000fe4:	d902      	bls.n	8000fec <NVIC_EncodePriority+0x30>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3b03      	subs	r3, #3
 8000fea:	e000      	b.n	8000fee <NVIC_EncodePriority+0x32>
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001004:	f04f 31ff 	mov.w	r1, #4294967295
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43d9      	mvns	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	4313      	orrs	r3, r2
         );
}
 8001016:	4618      	mov	r0, r3
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3b01      	subs	r3, #1
 8001030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001034:	d301      	bcc.n	800103a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001036:	2301      	movs	r3, #1
 8001038:	e00f      	b.n	800105a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <SysTick_Config+0x40>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001042:	210f      	movs	r1, #15
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f7ff ff8e 	bl	8000f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <SysTick_Config+0x40>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001052:	4b04      	ldr	r3, [pc, #16]	; (8001064 <SysTick_Config+0x40>)
 8001054:	2207      	movs	r2, #7
 8001056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010

08001068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff29 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b086      	sub	sp, #24
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
 800108a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff40 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff90 	bl	8000fbc <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5f 	bl	8000f68 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff33 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffa4 	bl	8001024 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b098      	sub	sp, #96	; 0x60
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80010f0:	4a84      	ldr	r2, [pc, #528]	; (8001304 <HAL_FDCAN_Init+0x21c>)
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4611      	mov	r1, r2
 80010f8:	224c      	movs	r2, #76	; 0x4c
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fbae 	bl	800485c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e1c6      	b.n	8001498 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a7e      	ldr	r2, [pc, #504]	; (8001308 <HAL_FDCAN_Init+0x220>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d106      	bne.n	8001122 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800111c:	461a      	mov	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fc72 	bl	8000a20 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	699a      	ldr	r2, [r3, #24]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 0210 	bic.w	r2, r2, #16
 800114a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800114c:	f7ff fe80 	bl	8000e50 <HAL_GetTick>
 8001150:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001152:	e014      	b.n	800117e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001154:	f7ff fe7c 	bl	8000e50 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b0a      	cmp	r3, #10
 8001160:	d90d      	bls.n	800117e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2203      	movs	r2, #3
 8001176:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e18c      	b.n	8001498 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b08      	cmp	r3, #8
 800118a:	d0e3      	beq.n	8001154 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	699a      	ldr	r2, [r3, #24]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119c:	f7ff fe58 	bl	8000e50 <HAL_GetTick>
 80011a0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011a2:	e014      	b.n	80011ce <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011a4:	f7ff fe54 	bl	8000e50 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b0a      	cmp	r3, #10
 80011b0:	d90d      	bls.n	80011ce <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011b8:	f043 0201 	orr.w	r2, r3, #1
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2203      	movs	r2, #3
 80011c6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e164      	b.n	8001498 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0e3      	beq.n	80011a4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	699a      	ldr	r2, [r3, #24]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0202 	orr.w	r2, r2, #2
 80011ea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7c1b      	ldrb	r3, [r3, #16]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	699a      	ldr	r2, [r3, #24]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001202:	619a      	str	r2, [r3, #24]
 8001204:	e007      	b.n	8001216 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	699a      	ldr	r2, [r3, #24]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001214:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7c5b      	ldrb	r3, [r3, #17]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	e007      	b.n	8001240 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800123e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7c9b      	ldrb	r3, [r3, #18]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d108      	bne.n	800125a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	e007      	b.n	800126a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	699a      	ldr	r2, [r3, #24]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001268:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699a      	ldr	r2, [r3, #24]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800128e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691a      	ldr	r2, [r3, #16]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 0210 	bic.w	r2, r2, #16
 800129e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d108      	bne.n	80012ba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699a      	ldr	r2, [r3, #24]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0204 	orr.w	r2, r2, #4
 80012b6:	619a      	str	r2, [r3, #24]
 80012b8:	e030      	b.n	800131c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d02c      	beq.n	800131c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d020      	beq.n	800130c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	699a      	ldr	r2, [r3, #24]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012d8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f042 0210 	orr.w	r2, r2, #16
 80012e8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d114      	bne.n	800131c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	699a      	ldr	r2, [r3, #24]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f042 0220 	orr.w	r2, r2, #32
 8001300:	619a      	str	r2, [r3, #24]
 8001302:	e00b      	b.n	800131c <HAL_FDCAN_Init+0x234>
 8001304:	08004a9c 	.word	0x08004a9c
 8001308:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0220 	orr.w	r2, r2, #32
 800131a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	3b01      	subs	r3, #1
 8001322:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	3b01      	subs	r3, #1
 800132a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800132c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001334:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	3b01      	subs	r3, #1
 800133e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001344:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001346:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001350:	d115      	bne.n	800137e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001356:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	3b01      	subs	r3, #1
 800135e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001360:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	3b01      	subs	r3, #1
 8001368:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800136a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	3b01      	subs	r3, #1
 8001374:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800137a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800137c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00a      	beq.n	800139c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a4:	4413      	add	r3, r2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d011      	beq.n	80013ce <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80013b2:	f023 0107 	bic.w	r1, r3, #7
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	3360      	adds	r3, #96	; 0x60
 80013be:	443b      	add	r3, r7
 80013c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d011      	beq.n	80013fa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80013de:	f023 0107 	bic.w	r1, r3, #7
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	3360      	adds	r3, #96	; 0x60
 80013ea:	443b      	add	r3, r7
 80013ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d012      	beq.n	8001428 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800140a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	3360      	adds	r3, #96	; 0x60
 8001416:	443b      	add	r3, r7
 8001418:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800141c:	011a      	lsls	r2, r3, #4
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142c:	2b00      	cmp	r3, #0
 800142e:	d012      	beq.n	8001456 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001438:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	3360      	adds	r3, #96	; 0x60
 8001444:	443b      	add	r3, r7
 8001446:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800144a:	021a      	lsls	r2, r3, #8
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <HAL_FDCAN_Init+0x3b8>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d107      	bne.n	8001470 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f022 0203 	bic.w	r2, r2, #3
 800146e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fd83 	bl	8001f94 <FDCAN_CalcultateRamBlockAddresses>
 800148e:	4603      	mov	r3, r0
 8001490:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001494:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001498:	4618      	mov	r0, r3
 800149a:	3760      	adds	r7, #96	; 0x60
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	4000a000 	.word	0x4000a000

080014a4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d111      	bne.n	80014dc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699a      	ldr	r2, [r3, #24]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 0201 	bic.w	r2, r2, #1
 80014ce:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e008      	b.n	80014ee <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014e2:	f043 0204 	orr.w	r2, r3, #4
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
  }
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d141      	bne.n	8001596 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800151a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e038      	b.n	80015a8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800153e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d009      	beq.n	800155a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800154c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e026      	b.n	80015a8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001562:	0c1b      	lsrs	r3, r3, #16
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 fe95 	bl	80022a0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2101      	movs	r1, #1
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001586:	2201      	movs	r2, #1
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001592:	2300      	movs	r3, #0
 8001594:	e008      	b.n	80015a8 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800159c:	f043 0208 	orr.w	r2, r3, #8
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
  }
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b08b      	sub	sp, #44	; 0x2c
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
 80015bc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015c8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80015ca:	7efb      	ldrb	r3, [r7, #27]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	f040 814b 	bne.w	8001868 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b40      	cmp	r3, #64	; 0x40
 80015d6:	d14d      	bne.n	8001674 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80015e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ee:	f043 0220 	orr.w	r2, r3, #32
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e13e      	b.n	800187a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001608:	2b00      	cmp	r3, #0
 800160a:	d109      	bne.n	8001620 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001612:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e12c      	b.n	800187a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001628:	0e1b      	lsrs	r3, r3, #24
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b01      	cmp	r3, #1
 8001630:	d10b      	bne.n	800164a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800163a:	0fdb      	lsrs	r3, r3, #31
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001644:	d101      	bne.n	800164a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001646:	2301      	movs	r3, #1
 8001648:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	69f9      	ldr	r1, [r7, #28]
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
 8001672:	e069      	b.n	8001748 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b41      	cmp	r3, #65	; 0x41
 8001678:	d14d      	bne.n	8001716 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001682:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001690:	f043 0220 	orr.w	r2, r3, #32
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0ed      	b.n	800187a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80016a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e0db      	b.n	800187a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80016ca:	0e1b      	lsrs	r3, r3, #24
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d10b      	bne.n	80016ec <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80016dc:	0fdb      	lsrs	r3, r3, #31
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016e6:	d101      	bne.n	80016ec <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80016e8:	2301      	movs	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	69f9      	ldr	r1, [r7, #28]
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
 8001714:	e018      	b.n	8001748 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	429a      	cmp	r2, r3
 800171e:	d309      	bcc.n	8001734 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001726:	f043 0220 	orr.w	r2, r3, #32
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0a2      	b.n	800187a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	fb01 f303 	mul.w	r3, r1, r3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0c9b      	lsrs	r3, r3, #18
 8001762:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e005      	b.n	8001778 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	3304      	adds	r3, #4
 8001794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29a      	uxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	0e1b      	lsrs	r3, r3, #24
 80017ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	0fda      	lsrs	r2, r3, #31
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	3304      	adds	r3, #4
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	e00a      	b.n	8001802 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	441a      	add	r2, r3
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	440b      	add	r3, r1
 80017f8:	7812      	ldrb	r2, [r2, #0]
 80017fa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	3301      	adds	r3, #1
 8001800:	623b      	str	r3, [r7, #32]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	0c1b      	lsrs	r3, r3, #16
 8001808:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	461a      	mov	r2, r3
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	4293      	cmp	r3, r2
 8001812:	d3eb      	bcc.n	80017ec <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	d105      	bne.n	8001826 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001824:	e01e      	b.n	8001864 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b41      	cmp	r3, #65	; 0x41
 800182a:	d105      	bne.n	8001838 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001836:	e015      	b.n	8001864 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	2b1f      	cmp	r3, #31
 800183c:	d808      	bhi.n	8001850 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2101      	movs	r1, #1
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	fa01 f202 	lsl.w	r2, r1, r2
 800184a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800184e:	e009      	b.n	8001864 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	f003 021f 	and.w	r2, r3, #31
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2101      	movs	r1, #1
 800185c:	fa01 f202 	lsl.w	r2, r1, r2
 8001860:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001864:	2300      	movs	r3, #0
 8001866:	e008      	b.n	800187a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800186e:	f043 0208 	orr.w	r2, r3, #8
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
  }
}
 800187a:	4618      	mov	r0, r3
 800187c:	372c      	adds	r7, #44	; 0x2c
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	08004af8 	.word	0x08004af8

0800188c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800189e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d002      	beq.n	80018ac <HAL_FDCAN_ActivateNotification+0x20>
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d155      	bne.n	8001958 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d108      	bne.n	80018cc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f042 0201 	orr.w	r2, r2, #1
 80018c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ca:	e014      	b.n	80018f6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	4013      	ands	r3, r2
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d108      	bne.n	80018ee <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0202 	orr.w	r2, r2, #2
 80018ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ec:	e003      	b.n	80018f6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2203      	movs	r2, #3
 80018f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	430a      	orrs	r2, r1
 8001910:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	430a      	orrs	r2, r1
 800192e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_FDCAN_ActivateNotification+0xec>)
 800193c:	4013      	ands	r3, r2
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	430b      	orrs	r3, r1
 8001944:	6553      	str	r3, [r2, #84]	; 0x54
 8001946:	4b0d      	ldr	r3, [pc, #52]	; (800197c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001948:	695a      	ldr	r2, [r3, #20]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	0f9b      	lsrs	r3, r3, #30
 800194e:	490b      	ldr	r1, [pc, #44]	; (800197c <HAL_FDCAN_ActivateNotification+0xf0>)
 8001950:	4313      	orrs	r3, r2
 8001952:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e008      	b.n	800196a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800195e:	f043 0202 	orr.w	r2, r3, #2
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	3fcfffff 	.word	0x3fcfffff
 800197c:	4000a800 	.word	0x4000a800

08001980 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b096      	sub	sp, #88	; 0x58
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001988:	4b9a      	ldr	r3, [pc, #616]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	079b      	lsls	r3, r3, #30
 800198e:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001990:	4b98      	ldr	r3, [pc, #608]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	079b      	lsls	r3, r3, #30
 8001996:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001998:	4013      	ands	r3, r2
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80019a6:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019b0:	4013      	ands	r3, r2
 80019b2:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019c8:	4013      	ands	r3, r2
 80019ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019e0:	4013      	ands	r3, r2
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ea:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80019ee:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019f8:	4013      	ands	r3, r2
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a02:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001a06:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a10:	4013      	ands	r3, r2
 8001a12:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a32:	0a1b      	lsrs	r3, r3, #8
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00a      	beq.n	8001a52 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a44:	651a      	str	r2, [r3, #80]	; 0x50
 8001a46:	4b6b      	ldr	r3, [pc, #428]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fa54 	bl	8001efa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a54:	0a9b      	lsrs	r3, r3, #10
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d01d      	beq.n	8001a9a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a60:	0a9b      	lsrs	r3, r3, #10
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d017      	beq.n	8001a9a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a7e:	4013      	ands	r3, r2
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a8c:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001a92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fa07 	bl	8001ea8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00d      	beq.n	8001abc <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001aa6:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <HAL_FDCAN_IRQHandler+0x278>)
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	6513      	str	r3, [r2, #80]	; 0x50
 8001aac:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ab0:	0f9b      	lsrs	r3, r3, #30
 8001ab2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001ab4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f9c0 	bl	8001e3c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00d      	beq.n	8001ade <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ac8:	4b4b      	ldr	r3, [pc, #300]	; (8001bf8 <HAL_FDCAN_IRQHandler+0x278>)
 8001aca:	400b      	ands	r3, r1
 8001acc:	6513      	str	r3, [r2, #80]	; 0x50
 8001ace:	4a49      	ldr	r2, [pc, #292]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ad2:	0f9b      	lsrs	r3, r3, #30
 8001ad4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001ad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f9ba 	bl	8001e52 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00d      	beq.n	8001b00 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001aea:	4b43      	ldr	r3, [pc, #268]	; (8001bf8 <HAL_FDCAN_IRQHandler+0x278>)
 8001aec:	400b      	ands	r3, r1
 8001aee:	6513      	str	r3, [r2, #80]	; 0x50
 8001af0:	4a40      	ldr	r2, [pc, #256]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af4:	0f9b      	lsrs	r3, r3, #30
 8001af6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001af8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7fe fbec 	bl	80002d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00d      	beq.n	8001b22 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_FDCAN_IRQHandler+0x278>)
 8001b0e:	400b      	ands	r3, r1
 8001b10:	6513      	str	r3, [r2, #80]	; 0x50
 8001b12:	4a38      	ldr	r2, [pc, #224]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001b14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b16:	0f9b      	lsrs	r3, r3, #30
 8001b18:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001b1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f9a3 	bl	8001e68 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b24:	0adb      	lsrs	r3, r3, #11
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d010      	beq.n	8001b50 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b30:	0adb      	lsrs	r3, r3, #11
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b42:	651a      	str	r2, [r3, #80]	; 0x50
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f997 	bl	8001e7e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b52:	0a5b      	lsrs	r3, r3, #9
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01d      	beq.n	8001b98 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5e:	0a5b      	lsrs	r3, r3, #9
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d017      	beq.n	8001b98 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	651a      	str	r2, [r3, #80]	; 0x50
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f97d 	bl	8001e92 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9a:	0cdb      	lsrs	r3, r3, #19
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba6:	0cdb      	lsrs	r3, r3, #19
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00a      	beq.n	8001bc6 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001bb8:	651a      	str	r2, [r3, #80]	; 0x50
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f97c 	bl	8001ebe <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d016      	beq.n	8001c00 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d010      	beq.n	8001c00 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001be6:	651a      	str	r2, [r3, #80]	; 0x50
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <HAL_FDCAN_IRQHandler+0x274>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	e004      	b.n	8001bfc <HAL_FDCAN_IRQHandler+0x27c>
 8001bf2:	bf00      	nop
 8001bf4:	4000a800 	.word	0x4000a800
 8001bf8:	3fcfffff 	.word	0x3fcfffff
 8001bfc:	f000 f969 	bl	8001ed2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c0e:	0c9b      	lsrs	r3, r3, #18
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00a      	beq.n	8001c2e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001c20:	651a      	str	r2, [r3, #80]	; 0x50
 8001c22:	4b83      	ldr	r3, [pc, #524]	; (8001e30 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f95c 	bl	8001ee6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c30:	0c5b      	lsrs	r3, r3, #17
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d015      	beq.n	8001c66 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c3c:	0c5b      	lsrs	r3, r3, #17
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00f      	beq.n	8001c66 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c50:	4b77      	ldr	r3, [pc, #476]	; (8001e30 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c72:	4b70      	ldr	r3, [pc, #448]	; (8001e34 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001c74:	400b      	ands	r3, r1
 8001c76:	6513      	str	r3, [r2, #80]	; 0x50
 8001c78:	4a6d      	ldr	r2, [pc, #436]	; (8001e30 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7c:	0f9b      	lsrs	r3, r3, #30
 8001c7e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001c80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f94d 	bl	8001f22 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d011      	beq.n	8001cb2 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001c94:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001c96:	400b      	ands	r3, r1
 8001c98:	6513      	str	r3, [r2, #80]	; 0x50
 8001c9a:	4a65      	ldr	r2, [pc, #404]	; (8001e30 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c9e:	0f9b      	lsrs	r3, r3, #30
 8001ca0:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a60      	ldr	r2, [pc, #384]	; (8001e38 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	f040 80ac 	bne.w	8001e16 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a4 	beq.w	8001e16 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d12:	4013      	ands	r3, r2
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001d20:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d28:	6a3a      	ldr	r2, [r7, #32]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001d38:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d62:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8e6 	bl	8001f38 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d78:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8e6 	bl	8001f4e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d014      	beq.n	8001dc4 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2240      	movs	r2, #64	; 0x40
 8001db8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	6939      	ldr	r1, [r7, #16]
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8d0 	bl	8001f64 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d007      	beq.n	8001dda <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001dd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f8d1 	bl	8001f7c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00b      	beq.n	8001df8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f874 	bl	8001f0e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001e26:	bf00      	nop
 8001e28:	3758      	adds	r7, #88	; 0x58
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	4000a800 	.word	0x4000a800
 8001e34:	3fcfffff 	.word	0x3fcfffff
 8001e38:	4000a000 	.word	0x4000a000

08001e3c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001faa:	4ba7      	ldr	r3, [pc, #668]	; (8002248 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	0091      	lsls	r1, r2, #2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	430b      	orrs	r3, r1
 8001fb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fea:	4b97      	ldr	r3, [pc, #604]	; (8002248 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	0091      	lsls	r1, r2, #2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002004:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	041a      	lsls	r2, r3, #16
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	4413      	add	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800202c:	4b86      	ldr	r3, [pc, #536]	; (8002248 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800202e:	4013      	ands	r3, r2
 8002030:	68ba      	ldr	r2, [r7, #8]
 8002032:	0091      	lsls	r1, r2, #2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	430b      	orrs	r3, r1
 800203a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002046:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	041a      	lsls	r2, r3, #16
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002062:	fb02 f303 	mul.w	r3, r2, r3
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	4413      	add	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002074:	4b74      	ldr	r3, [pc, #464]	; (8002248 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002076:	4013      	ands	r3, r2
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	0091      	lsls	r1, r2, #2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	430b      	orrs	r3, r1
 8002082:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800208e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4413      	add	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80020bc:	4b62      	ldr	r3, [pc, #392]	; (8002248 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80020be:	4013      	ands	r3, r2
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	0091      	lsls	r1, r2, #2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80020e8:	4b57      	ldr	r3, [pc, #348]	; (8002248 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	0091      	lsls	r1, r2, #2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	430b      	orrs	r3, r1
 80020f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002102:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	4413      	add	r3, r2
 8002120:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800212c:	4013      	ands	r3, r2
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	0091      	lsls	r1, r2, #2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	430b      	orrs	r3, r1
 8002138:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002144:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214c:	041a      	lsls	r2, r3, #16
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002160:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002168:	061a      	lsls	r2, r3, #24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800217a:	4413      	add	r3, r2
 800217c:	009a      	lsls	r2, r3, #2
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	441a      	add	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80021ae:	fb01 f303 	mul.w	r3, r1, r3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	441a      	add	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80021c6:	fb01 f303 	mul.w	r3, r1, r3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	441a      	add	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	441a      	add	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d915      	bls.n	8002270 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002244:	e006      	b.n	8002254 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002246:	bf00      	nop
 8002248:	ffff0003 	.word	0xffff0003
 800224c:	10002b00 	.word	0x10002b00
 8002250:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800225a:	f043 0220 	orr.w	r2, r3, #32
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2203      	movs	r2, #3
 8002268:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e010      	b.n	8002292 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e005      	b.n	8002284 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3304      	adds	r3, #4
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d3f3      	bcc.n	8002278 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop

080022a0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	; 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80022be:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e00a      	b.n	80022e2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80022d4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80022da:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80022dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022e0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80022ec:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80022f2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80022f8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800230c:	6839      	ldr	r1, [r7, #0]
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	3304      	adds	r3, #4
 8002322:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	3304      	adds	r3, #4
 800232e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e020      	b.n	8002378 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3303      	adds	r3, #3
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3302      	adds	r3, #2
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	440b      	add	r3, r1
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800234e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	3301      	adds	r3, #1
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	440b      	add	r3, r1
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800235c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	440a      	add	r2, r1
 8002364:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002366:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	3304      	adds	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3304      	adds	r3, #4
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0c1b      	lsrs	r3, r3, #16
 800237e:	4a06      	ldr	r2, [pc, #24]	; (8002398 <FDCAN_CopyMessageToRAM+0xf8>)
 8002380:	5cd3      	ldrb	r3, [r2, r3]
 8002382:	461a      	mov	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	4293      	cmp	r3, r2
 8002388:	d3d5      	bcc.n	8002336 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	3724      	adds	r7, #36	; 0x24
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	08004af8 	.word	0x08004af8

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023aa:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <HAL_GPIO_Init+0x234>)
 80023ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023ae:	e194      	b.n	80026da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2101      	movs	r1, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 8186 	beq.w	80026d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d005      	beq.n	80023e0 <HAL_GPIO_Init+0x44>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d130      	bne.n	8002442 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002416:	2201      	movs	r2, #1
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4013      	ands	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 0201 	and.w	r2, r3, #1
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b03      	cmp	r3, #3
 800244c:	d017      	beq.n	800247e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d123      	bne.n	80024d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	08da      	lsrs	r2, r3, #3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3208      	adds	r2, #8
 80024cc:	69b9      	ldr	r1, [r7, #24]
 80024ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	2203      	movs	r2, #3
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0203 	and.w	r2, r3, #3
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80e0 	beq.w	80026d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x238>)
 8002516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800251a:	4a2e      	ldr	r2, [pc, #184]	; (80025d4 <HAL_GPIO_Init+0x238>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_GPIO_Init+0x238>)
 8002526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002532:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_GPIO_Init+0x23c>)
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	220f      	movs	r2, #15
 800254a:	fa02 f303 	lsl.w	r3, r2, r3
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a20      	ldr	r2, [pc, #128]	; (80025dc <HAL_GPIO_Init+0x240>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d052      	beq.n	8002604 <HAL_GPIO_Init+0x268>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a1f      	ldr	r2, [pc, #124]	; (80025e0 <HAL_GPIO_Init+0x244>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d031      	beq.n	80025ca <HAL_GPIO_Init+0x22e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_GPIO_Init+0x248>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d02b      	beq.n	80025c6 <HAL_GPIO_Init+0x22a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a1d      	ldr	r2, [pc, #116]	; (80025e8 <HAL_GPIO_Init+0x24c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d025      	beq.n	80025c2 <HAL_GPIO_Init+0x226>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_GPIO_Init+0x250>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01f      	beq.n	80025be <HAL_GPIO_Init+0x222>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <HAL_GPIO_Init+0x254>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d019      	beq.n	80025ba <HAL_GPIO_Init+0x21e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <HAL_GPIO_Init+0x258>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0x21a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_GPIO_Init+0x25c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00d      	beq.n	80025b2 <HAL_GPIO_Init+0x216>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a18      	ldr	r2, [pc, #96]	; (80025fc <HAL_GPIO_Init+0x260>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <HAL_GPIO_Init+0x212>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_GPIO_Init+0x264>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d101      	bne.n	80025aa <HAL_GPIO_Init+0x20e>
 80025a6:	2309      	movs	r3, #9
 80025a8:	e02d      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025aa:	230a      	movs	r3, #10
 80025ac:	e02b      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025ae:	2308      	movs	r3, #8
 80025b0:	e029      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e027      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025b6:	2306      	movs	r3, #6
 80025b8:	e025      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025ba:	2305      	movs	r3, #5
 80025bc:	e023      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025be:	2304      	movs	r3, #4
 80025c0:	e021      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e01f      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e01d      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e01b      	b.n	8002606 <HAL_GPIO_Init+0x26a>
 80025ce:	bf00      	nop
 80025d0:	58000080 	.word	0x58000080
 80025d4:	58024400 	.word	0x58024400
 80025d8:	58000400 	.word	0x58000400
 80025dc:	58020000 	.word	0x58020000
 80025e0:	58020400 	.word	0x58020400
 80025e4:	58020800 	.word	0x58020800
 80025e8:	58020c00 	.word	0x58020c00
 80025ec:	58021000 	.word	0x58021000
 80025f0:	58021400 	.word	0x58021400
 80025f4:	58021800 	.word	0x58021800
 80025f8:	58021c00 	.word	0x58021c00
 80025fc:	58022000 	.word	0x58022000
 8002600:	58022400 	.word	0x58022400
 8002604:	2300      	movs	r3, #0
 8002606:	69fa      	ldr	r2, [r7, #28]
 8002608:	f002 0203 	and.w	r2, r2, #3
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	4093      	lsls	r3, r2
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002616:	4938      	ldr	r1, [pc, #224]	; (80026f8 <HAL_GPIO_Init+0x35c>)
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800264a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa22 f303 	lsr.w	r3, r2, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f ae63 	bne.w	80023b0 <HAL_GPIO_Init+0x14>
  }
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	3724      	adds	r7, #36	; 0x24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	58000400 	.word	0x58000400

080026fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
 8002708:	4613      	mov	r3, r2
 800270a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800270c:	787b      	ldrb	r3, [r7, #1]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002718:	e003      	b.n	8002722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800271a:	887b      	ldrh	r3, [r7, #2]
 800271c:	041a      	lsls	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	619a      	str	r2, [r3, #24]
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002740:	887a      	ldrh	r2, [r7, #2]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4013      	ands	r3, r2
 8002746:	041a      	lsls	r2, r3, #16
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	43d9      	mvns	r1, r3
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	400b      	ands	r3, r1
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b04      	cmp	r3, #4
 8002776:	d00a      	beq.n	800278e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	429a      	cmp	r2, r3
 8002784:	d001      	beq.n	800278a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e01f      	b.n	80027ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e01d      	b.n	80027ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f023 0207 	bic.w	r2, r3, #7
 8002796:	490f      	ldr	r1, [pc, #60]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4313      	orrs	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800279e:	f7fe fb57 	bl	8000e50 <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027a4:	e009      	b.n	80027ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027a6:	f7fe fb53 	bl	8000e50 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b4:	d901      	bls.n	80027ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_PWREx_ConfigSupply+0x70>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c6:	d1ee      	bne.n	80027a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	58024800 	.word	0x58024800

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f000 bc1d 	b.w	8003026 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8087 	beq.w	8002908 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027fa:	4b99      	ldr	r3, [pc, #612]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002804:	4b96      	ldr	r3, [pc, #600]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	2b10      	cmp	r3, #16
 800280e:	d007      	beq.n	8002820 <HAL_RCC_OscConfig+0x48>
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	2b18      	cmp	r3, #24
 8002814:	d110      	bne.n	8002838 <HAL_RCC_OscConfig+0x60>
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d10b      	bne.n	8002838 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	4b8f      	ldr	r3, [pc, #572]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d06c      	beq.n	8002906 <HAL_RCC_OscConfig+0x12e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d168      	bne.n	8002906 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e3f6      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d106      	bne.n	8002850 <HAL_RCC_OscConfig+0x78>
 8002842:	4b87      	ldr	r3, [pc, #540]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a86      	ldr	r2, [pc, #536]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e02e      	b.n	80028ae <HAL_RCC_OscConfig+0xd6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_OscConfig+0x9a>
 8002858:	4b81      	ldr	r3, [pc, #516]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a80      	ldr	r2, [pc, #512]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 800285e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	4b7e      	ldr	r3, [pc, #504]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a7d      	ldr	r2, [pc, #500]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 800286a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e01d      	b.n	80028ae <HAL_RCC_OscConfig+0xd6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800287a:	d10c      	bne.n	8002896 <HAL_RCC_OscConfig+0xbe>
 800287c:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a77      	ldr	r2, [pc, #476]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b75      	ldr	r3, [pc, #468]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a74      	ldr	r2, [pc, #464]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 800288e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0xd6>
 8002896:	4b72      	ldr	r3, [pc, #456]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a71      	ldr	r2, [pc, #452]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 800289c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a6e      	ldr	r2, [pc, #440]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80028a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d013      	beq.n	80028de <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe facb 	bl	8000e50 <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028be:	f7fe fac7 	bl	8000e50 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e3aa      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028d0:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCC_OscConfig+0xe6>
 80028dc:	e014      	b.n	8002908 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fab7 	bl	8000e50 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e6:	f7fe fab3 	bl	8000e50 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b64      	cmp	r3, #100	; 0x64
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e396      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x10e>
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002906:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80cb 	beq.w	8002aac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002916:	4b52      	ldr	r3, [pc, #328]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800291e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002920:	4b4f      	ldr	r3, [pc, #316]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_RCC_OscConfig+0x164>
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	2b18      	cmp	r3, #24
 8002930:	d156      	bne.n	80029e0 <HAL_RCC_OscConfig+0x208>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d151      	bne.n	80029e0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293c:	4b48      	ldr	r3, [pc, #288]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_OscConfig+0x17c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e368      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002954:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 0219 	bic.w	r2, r3, #25
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	493f      	ldr	r1, [pc, #252]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002962:	4313      	orrs	r3, r2
 8002964:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002966:	f7fe fa73 	bl	8000e50 <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296e:	f7fe fa6f 	bl	8000e50 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e352      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	f7fe fa90 	bl	8000eb0 <HAL_GetREVID>
 8002990:	4603      	mov	r3, r0
 8002992:	f241 0203 	movw	r2, #4099	; 0x1003
 8002996:	4293      	cmp	r3, r2
 8002998:	d817      	bhi.n	80029ca <HAL_RCC_OscConfig+0x1f2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b40      	cmp	r3, #64	; 0x40
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1dc>
 80029a2:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029aa:	4a2d      	ldr	r2, [pc, #180]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b2:	e07b      	b.n	8002aac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b2a      	ldr	r3, [pc, #168]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	031b      	lsls	r3, r3, #12
 80029c2:	4927      	ldr	r1, [pc, #156]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c8:	e070      	b.n	8002aac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b25      	ldr	r3, [pc, #148]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	061b      	lsls	r3, r3, #24
 80029d8:	4921      	ldr	r1, [pc, #132]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029de:	e065      	b.n	8002aac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d048      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 0219 	bic.w	r2, r3, #25
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	491a      	ldr	r1, [pc, #104]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fa:	f7fe fa29 	bl	8000e50 <HAL_GetTick>
 80029fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a02:	f7fe fa25 	bl	8000e50 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e308      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a14:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0f0      	beq.n	8002a02 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a20:	f7fe fa46 	bl	8000eb0 <HAL_GetREVID>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d81a      	bhi.n	8002a64 <HAL_RCC_OscConfig+0x28c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d108      	bne.n	8002a48 <HAL_RCC_OscConfig+0x270>
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a3e:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a44:	6053      	str	r3, [r2, #4]
 8002a46:	e031      	b.n	8002aac <HAL_RCC_OscConfig+0x2d4>
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	4902      	ldr	r1, [pc, #8]	; (8002a60 <HAL_RCC_OscConfig+0x288>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e026      	b.n	8002aac <HAL_RCC_OscConfig+0x2d4>
 8002a5e:	bf00      	nop
 8002a60:	58024400 	.word	0x58024400
 8002a64:	4b9a      	ldr	r3, [pc, #616]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	061b      	lsls	r3, r3, #24
 8002a72:	4997      	ldr	r1, [pc, #604]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
 8002a78:	e018      	b.n	8002aac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7a:	4b95      	ldr	r3, [pc, #596]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a94      	ldr	r2, [pc, #592]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a86:	f7fe f9e3 	bl	8000e50 <HAL_GetTick>
 8002a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8e:	f7fe f9df 	bl	8000e50 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e2c2      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002aa0:	4b8b      	ldr	r3, [pc, #556]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a9 	beq.w	8002c0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aba:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac4:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d007      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x308>
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b18      	cmp	r3, #24
 8002ad4:	d13a      	bne.n	8002b4c <HAL_RCC_OscConfig+0x374>
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d135      	bne.n	8002b4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ae0:	4b7b      	ldr	r3, [pc, #492]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_OscConfig+0x320>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e296      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af8:	f7fe f9da 	bl	8000eb0 <HAL_GetREVID>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d817      	bhi.n	8002b36 <HAL_RCC_OscConfig+0x35e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d108      	bne.n	8002b20 <HAL_RCC_OscConfig+0x348>
 8002b0e:	4b70      	ldr	r3, [pc, #448]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b16:	4a6e      	ldr	r2, [pc, #440]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b1c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b1e:	e075      	b.n	8002c0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b20:	4b6b      	ldr	r3, [pc, #428]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	069b      	lsls	r3, r3, #26
 8002b2e:	4968      	ldr	r1, [pc, #416]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b34:	e06a      	b.n	8002c0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b36:	4b66      	ldr	r3, [pc, #408]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	061b      	lsls	r3, r3, #24
 8002b44:	4962      	ldr	r1, [pc, #392]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b4a:	e05f      	b.n	8002c0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d042      	beq.n	8002bda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a5d      	ldr	r2, [pc, #372]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe f976 	bl	8000e50 <HAL_GetTick>
 8002b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b68:	f7fe f972 	bl	8000e50 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e255      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b7a:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0f0      	beq.n	8002b68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b86:	f7fe f993 	bl	8000eb0 <HAL_GetREVID>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d817      	bhi.n	8002bc4 <HAL_RCC_OscConfig+0x3ec>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d108      	bne.n	8002bae <HAL_RCC_OscConfig+0x3d6>
 8002b9c:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ba4:	4a4a      	ldr	r2, [pc, #296]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ba6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002baa:	6053      	str	r3, [r2, #4]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0x434>
 8002bae:	4b48      	ldr	r3, [pc, #288]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	069b      	lsls	r3, r3, #26
 8002bbc:	4944      	ldr	r1, [pc, #272]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	604b      	str	r3, [r1, #4]
 8002bc2:	e023      	b.n	8002c0c <HAL_RCC_OscConfig+0x434>
 8002bc4:	4b42      	ldr	r3, [pc, #264]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	493f      	ldr	r1, [pc, #252]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	e018      	b.n	8002c0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bda:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a3c      	ldr	r2, [pc, #240]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe f933 	bl	8000e50 <HAL_GetTick>
 8002bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bee:	f7fe f92f 	bl	8000e50 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e212      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c00:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d036      	beq.n	8002c86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c20:	4b2b      	ldr	r3, [pc, #172]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe f910 	bl	8000e50 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fe f90c 	bl	8000e50 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e1ef      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x45c>
 8002c52:	e018      	b.n	8002c86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b1e      	ldr	r3, [pc, #120]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe f8f6 	bl	8000e50 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe f8f2 	bl	8000e50 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1d5      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d039      	beq.n	8002d06 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01c      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002ca0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe f8d3 	bl	8000e50 <HAL_GetTick>
 8002caa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002cae:	f7fe f8cf 	bl	8000e50 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1b2      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCC_OscConfig+0x4f8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x4d6>
 8002ccc:	e01b      	b.n	8002d06 <HAL_RCC_OscConfig+0x52e>
 8002cce:	bf00      	nop
 8002cd0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd4:	4b9b      	ldr	r3, [pc, #620]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a9a      	ldr	r2, [pc, #616]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ce0:	f7fe f8b6 	bl	8000e50 <HAL_GetTick>
 8002ce4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ce8:	f7fe f8b2 	bl	8000e50 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e195      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cfa:	4b92      	ldr	r3, [pc, #584]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8081 	beq.w	8002e16 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d14:	4b8c      	ldr	r3, [pc, #560]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a8b      	ldr	r2, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d20:	f7fe f896 	bl	8000e50 <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d28:	f7fe f892 	bl	8000e50 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e175      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d3a:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <HAL_RCC_OscConfig+0x770>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCC_OscConfig+0x584>
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a7c      	ldr	r2, [pc, #496]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e02d      	b.n	8002db8 <HAL_RCC_OscConfig+0x5e0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10c      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5a6>
 8002d64:	4b77      	ldr	r3, [pc, #476]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d68:	4a76      	ldr	r2, [pc, #472]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d6a:	f023 0301 	bic.w	r3, r3, #1
 8002d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d70:	4b74      	ldr	r3, [pc, #464]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a73      	ldr	r2, [pc, #460]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d76:	f023 0304 	bic.w	r3, r3, #4
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	e01c      	b.n	8002db8 <HAL_RCC_OscConfig+0x5e0>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0x5c8>
 8002d86:	4b6f      	ldr	r3, [pc, #444]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8a:	4a6e      	ldr	r2, [pc, #440]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
 8002d92:	4b6c      	ldr	r3, [pc, #432]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a6b      	ldr	r2, [pc, #428]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0x5e0>
 8002da0:	4b68      	ldr	r3, [pc, #416]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4a67      	ldr	r2, [pc, #412]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002da6:	f023 0301 	bic.w	r3, r3, #1
 8002daa:	6713      	str	r3, [r2, #112]	; 0x70
 8002dac:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	4a64      	ldr	r2, [pc, #400]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002db2:	f023 0304 	bic.w	r3, r3, #4
 8002db6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7fe f846 	bl	8000e50 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe f842 	bl	8000e50 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e123      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dde:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ee      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x5f0>
 8002dea:	e014      	b.n	8002e16 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe f830 	bl	8000e50 <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df4:	f7fe f82c 	bl	8000e50 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e10d      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e0a:	4b4e      	ldr	r3, [pc, #312]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1ee      	bne.n	8002df4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8102 	beq.w	8003024 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e20:	4b48      	ldr	r3, [pc, #288]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e28:	2b18      	cmp	r3, #24
 8002e2a:	f000 80bd 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	f040 809e 	bne.w	8002f74 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b42      	ldr	r3, [pc, #264]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a41      	ldr	r2, [pc, #260]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f804 	bl	8000e50 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe f800 	bl	8000e50 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0e3      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5e:	4b39      	ldr	r3, [pc, #228]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e6a:	4b36      	ldr	r3, [pc, #216]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <HAL_RCC_OscConfig+0x774>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	4931      	ldr	r1, [pc, #196]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	628b      	str	r3, [r1, #40]	; 0x28
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e92:	3b01      	subs	r3, #1
 8002e94:	025b      	lsls	r3, r3, #9
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	3b01      	subs	r3, #1
 8002eae:	061b      	lsls	r3, r3, #24
 8002eb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002eb4:	4923      	ldr	r1, [pc, #140]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002eba:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	4a21      	ldr	r2, [pc, #132]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eca:	4b21      	ldr	r3, [pc, #132]	; (8002f50 <HAL_RCC_OscConfig+0x778>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ed2:	00d2      	lsls	r2, r2, #3
 8002ed4:	491b      	ldr	r1, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	f023 020c 	bic.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4917      	ldr	r1, [pc, #92]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002eec:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f023 0202 	bic.w	r2, r3, #2
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef8:	4912      	ldr	r1, [pc, #72]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f0a:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f22:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a04      	ldr	r2, [pc, #16]	; (8002f44 <HAL_RCC_OscConfig+0x76c>)
 8002f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fd ff89 	bl	8000e50 <HAL_GetTick>
 8002f3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f40:	e011      	b.n	8002f66 <HAL_RCC_OscConfig+0x78e>
 8002f42:	bf00      	nop
 8002f44:	58024400 	.word	0x58024400
 8002f48:	58024800 	.word	0x58024800
 8002f4c:	fffffc0c 	.word	0xfffffc0c
 8002f50:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fd ff7c 	bl	8000e50 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e05f      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f66:	4b32      	ldr	r3, [pc, #200]	; (8003030 <HAL_RCC_OscConfig+0x858>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0x77c>
 8002f72:	e057      	b.n	8003024 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f74:	4b2e      	ldr	r3, [pc, #184]	; (8003030 <HAL_RCC_OscConfig+0x858>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2d      	ldr	r2, [pc, #180]	; (8003030 <HAL_RCC_OscConfig+0x858>)
 8002f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fd ff66 	bl	8000e50 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fd ff62 	bl	8000e50 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e045      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f9a:	4b25      	ldr	r3, [pc, #148]	; (8003030 <HAL_RCC_OscConfig+0x858>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x7b0>
 8002fa6:	e03d      	b.n	8003024 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_RCC_OscConfig+0x858>)
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002fae:	4b20      	ldr	r3, [pc, #128]	; (8003030 <HAL_RCC_OscConfig+0x858>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d031      	beq.n	8003020 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0203 	and.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d12a      	bne.n	8003020 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d122      	bne.n	8003020 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d11a      	bne.n	8003020 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	0a5b      	lsrs	r3, r3, #9
 8002fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d111      	bne.n	8003020 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800300a:	429a      	cmp	r2, r3
 800300c:	d108      	bne.n	8003020 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	0e1b      	lsrs	r3, r3, #24
 8003012:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3730      	adds	r7, #48	; 0x30
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	58024400 	.word	0x58024400

08003034 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e19c      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003048:	4b8a      	ldr	r3, [pc, #552]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d910      	bls.n	8003078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b87      	ldr	r3, [pc, #540]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 020f 	bic.w	r2, r3, #15
 800305e:	4985      	ldr	r1, [pc, #532]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b83      	ldr	r3, [pc, #524]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e184      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003090:	429a      	cmp	r2, r3
 8003092:	d908      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003094:	4b78      	ldr	r3, [pc, #480]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	4975      	ldr	r1, [pc, #468]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695a      	ldr	r2, [r3, #20]
 80030b6:	4b70      	ldr	r3, [pc, #448]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030be:	429a      	cmp	r2, r3
 80030c0:	d908      	bls.n	80030d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030c2:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	496a      	ldr	r1, [pc, #424]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d010      	beq.n	8003102 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	4b64      	ldr	r3, [pc, #400]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d908      	bls.n	8003102 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030f0:	4b61      	ldr	r3, [pc, #388]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	495e      	ldr	r1, [pc, #376]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d010      	beq.n	8003130 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69da      	ldr	r2, [r3, #28]
 8003112:	4b59      	ldr	r3, [pc, #356]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800311a:	429a      	cmp	r2, r3
 800311c:	d908      	bls.n	8003130 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800311e:	4b56      	ldr	r3, [pc, #344]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	4953      	ldr	r1, [pc, #332]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800312c:	4313      	orrs	r3, r2
 800312e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d010      	beq.n	800315e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	4b4d      	ldr	r3, [pc, #308]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	429a      	cmp	r2, r3
 800314a:	d908      	bls.n	800315e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b4a      	ldr	r3, [pc, #296]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f023 020f 	bic.w	r2, r3, #15
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4947      	ldr	r1, [pc, #284]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800315a:	4313      	orrs	r3, r2
 800315c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d055      	beq.n	8003216 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800316a:	4b43      	ldr	r3, [pc, #268]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	4940      	ldr	r1, [pc, #256]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003178:	4313      	orrs	r3, r2
 800317a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d107      	bne.n	8003194 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003184:	4b3c      	ldr	r3, [pc, #240]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d121      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0f6      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d107      	bne.n	80031ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800319c:	4b36      	ldr	r3, [pc, #216]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d115      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e0ea      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031b4:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0de      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e0d6      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d4:	4b28      	ldr	r3, [pc, #160]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f023 0207 	bic.w	r2, r3, #7
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4925      	ldr	r1, [pc, #148]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e6:	f7fd fe33 	bl	8000e50 <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ee:	f7fd fe2f 	bl	8000e50 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0be      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003204:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	429a      	cmp	r2, r3
 8003214:	d1eb      	bne.n	80031ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d010      	beq.n	8003244 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	429a      	cmp	r2, r3
 8003230:	d208      	bcs.n	8003244 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f023 020f 	bic.w	r2, r3, #15
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	490e      	ldr	r1, [pc, #56]	; (8003278 <HAL_RCC_ClockConfig+0x244>)
 8003240:	4313      	orrs	r3, r2
 8003242:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d214      	bcs.n	800327c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 020f 	bic.w	r2, r3, #15
 800325a:	4906      	ldr	r1, [pc, #24]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <HAL_RCC_ClockConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e086      	b.n	8003382 <HAL_RCC_ClockConfig+0x34e>
 8003274:	52002000 	.word	0x52002000
 8003278:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	4b3f      	ldr	r3, [pc, #252]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003294:	429a      	cmp	r2, r3
 8003296:	d208      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003298:	4b3c      	ldr	r3, [pc, #240]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	4939      	ldr	r1, [pc, #228]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d010      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695a      	ldr	r2, [r3, #20]
 80032ba:	4b34      	ldr	r3, [pc, #208]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d208      	bcs.n	80032d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032c6:	4b31      	ldr	r3, [pc, #196]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	492e      	ldr	r1, [pc, #184]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d010      	beq.n	8003306 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d208      	bcs.n	8003306 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032f4:	4b25      	ldr	r3, [pc, #148]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	4922      	ldr	r1, [pc, #136]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003302:	4313      	orrs	r3, r2
 8003304:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b00      	cmp	r3, #0
 8003310:	d010      	beq.n	8003334 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800331e:	429a      	cmp	r2, r3
 8003320:	d208      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003322:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003330:	4313      	orrs	r3, r2
 8003332:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003334:	f000 f834 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b14      	ldr	r3, [pc, #80]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	4912      	ldr	r1, [pc, #72]	; (8003390 <HAL_RCC_ClockConfig+0x35c>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
 8003350:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003352:	4b0e      	ldr	r3, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x358>)
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <HAL_RCC_ClockConfig+0x35c>)
 800335c:	5cd3      	ldrb	r3, [r2, r3]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x360>)
 800336a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <HAL_RCC_ClockConfig+0x364>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x368>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fd20 	bl	8000dbc <HAL_InitTick>
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003380:	7bfb      	ldrb	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	58024400 	.word	0x58024400
 8003390:	08004ae8 	.word	0x08004ae8
 8003394:	24000004 	.word	0x24000004
 8003398:	24000000 	.word	0x24000000
 800339c:	24000008 	.word	0x24000008

080033a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	; 0x24
 80033a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a6:	4bb3      	ldr	r3, [pc, #716]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ae:	2b18      	cmp	r3, #24
 80033b0:	f200 8155 	bhi.w	800365e <HAL_RCC_GetSysClockFreq+0x2be>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	08003421 	.word	0x08003421
 80033c0:	0800365f 	.word	0x0800365f
 80033c4:	0800365f 	.word	0x0800365f
 80033c8:	0800365f 	.word	0x0800365f
 80033cc:	0800365f 	.word	0x0800365f
 80033d0:	0800365f 	.word	0x0800365f
 80033d4:	0800365f 	.word	0x0800365f
 80033d8:	0800365f 	.word	0x0800365f
 80033dc:	08003447 	.word	0x08003447
 80033e0:	0800365f 	.word	0x0800365f
 80033e4:	0800365f 	.word	0x0800365f
 80033e8:	0800365f 	.word	0x0800365f
 80033ec:	0800365f 	.word	0x0800365f
 80033f0:	0800365f 	.word	0x0800365f
 80033f4:	0800365f 	.word	0x0800365f
 80033f8:	0800365f 	.word	0x0800365f
 80033fc:	0800344d 	.word	0x0800344d
 8003400:	0800365f 	.word	0x0800365f
 8003404:	0800365f 	.word	0x0800365f
 8003408:	0800365f 	.word	0x0800365f
 800340c:	0800365f 	.word	0x0800365f
 8003410:	0800365f 	.word	0x0800365f
 8003414:	0800365f 	.word	0x0800365f
 8003418:	0800365f 	.word	0x0800365f
 800341c:	08003453 	.word	0x08003453
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003420:	4b94      	ldr	r3, [pc, #592]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800342c:	4b91      	ldr	r3, [pc, #580]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	08db      	lsrs	r3, r3, #3
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	4a90      	ldr	r2, [pc, #576]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800343e:	e111      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003440:	4b8d      	ldr	r3, [pc, #564]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003442:	61bb      	str	r3, [r7, #24]
    break;
 8003444:	e10e      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003446:	4b8d      	ldr	r3, [pc, #564]	; (800367c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003448:	61bb      	str	r3, [r7, #24]
    break;
 800344a:	e10b      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800344c:	4b8c      	ldr	r3, [pc, #560]	; (8003680 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800344e:	61bb      	str	r3, [r7, #24]
    break;
 8003450:	e108      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003452:	4b88      	ldr	r3, [pc, #544]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800345c:	4b85      	ldr	r3, [pc, #532]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	091b      	lsrs	r3, r3, #4
 8003462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003466:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003468:	4b82      	ldr	r3, [pc, #520]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003472:	4b80      	ldr	r3, [pc, #512]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	08db      	lsrs	r3, r3, #3
 8003478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80e1 	beq.w	8003658 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b02      	cmp	r3, #2
 800349a:	f000 8083 	beq.w	80035a4 <HAL_RCC_GetSysClockFreq+0x204>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	f200 80a1 	bhi.w	80035e8 <HAL_RCC_GetSysClockFreq+0x248>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x114>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d056      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x1c0>
 80034b2:	e099      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02d      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034c0:	4b6c      	ldr	r3, [pc, #432]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	08db      	lsrs	r3, r3, #3
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	4a6b      	ldr	r2, [pc, #428]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	ee07 3a90 	vmov	s15, r3
 80034d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034ea:	4b62      	ldr	r3, [pc, #392]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80034fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800350a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003516:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800351a:	e087      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003526:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003688 <HAL_RCC_GetSysClockFreq+0x2e8>
 800352a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352e:	4b51      	ldr	r3, [pc, #324]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003536:	ee07 3a90 	vmov	s15, r3
 800353a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003542:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800354a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800355e:	e065      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800368c <HAL_RCC_GetSysClockFreq+0x2ec>
 800356e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003572:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003582:	ed97 6a02 	vldr	s12, [r7, #8]
 8003586:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 800358a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800359a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035a2:	e043      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	ee07 3a90 	vmov	s15, r3
 80035aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003690 <HAL_RCC_GetSysClockFreq+0x2f0>
 80035b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e6:	e021      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	ee07 3a90 	vmov	s15, r3
 80035ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800368c <HAL_RCC_GetSysClockFreq+0x2ec>
 80035f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360a:	ed97 6a02 	vldr	s12, [r7, #8]
 800360e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800361a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800361e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800362a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003630:	0a5b      	lsrs	r3, r3, #9
 8003632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003636:	3301      	adds	r3, #1
 8003638:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003644:	edd7 6a07 	vldr	s13, [r7, #28]
 8003648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003650:	ee17 3a90 	vmov	r3, s15
 8003654:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003656:	e005      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
    break;
 800365c:	e002      	b.n	8003664 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800365e:	4b07      	ldr	r3, [pc, #28]	; (800367c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003660:	61bb      	str	r3, [r7, #24]
    break;
 8003662:	bf00      	nop
  }

  return sysclockfreq;
 8003664:	69bb      	ldr	r3, [r7, #24]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	58024400 	.word	0x58024400
 8003678:	03d09000 	.word	0x03d09000
 800367c:	003d0900 	.word	0x003d0900
 8003680:	017d7840 	.word	0x017d7840
 8003684:	46000000 	.word	0x46000000
 8003688:	4c742400 	.word	0x4c742400
 800368c:	4a742400 	.word	0x4a742400
 8003690:	4bbebc20 	.word	0x4bbebc20

08003694 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800369c:	2300      	movs	r3, #0
 800369e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d03f      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036b8:	d02a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036be:	d824      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c4:	d018      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ca:	d81e      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d4:	d007      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036d6:	e018      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4ba3      	ldr	r3, [pc, #652]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	4aa2      	ldr	r2, [pc, #648]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036e4:	e015      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 ff17 	bl	8004520 <RCCEx_PLL2_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80036f6:	e00c      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3324      	adds	r3, #36	; 0x24
 80036fc:	2102      	movs	r1, #2
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 ffc0 	bl	8004684 <RCCEx_PLL3_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
      break;
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003718:	4b93      	ldr	r3, [pc, #588]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003724:	4990      	ldr	r1, [pc, #576]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	650b      	str	r3, [r1, #80]	; 0x50
 800372a:	e001      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	7dfb      	ldrb	r3, [r7, #23]
 800372e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d03d      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	2b04      	cmp	r3, #4
 8003742:	d826      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003761 	.word	0x08003761
 8003750:	0800376f 	.word	0x0800376f
 8003754:	08003781 	.word	0x08003781
 8003758:	08003799 	.word	0x08003799
 800375c:	08003799 	.word	0x08003799
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003760:	4b81      	ldr	r3, [pc, #516]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	4a80      	ldr	r2, [pc, #512]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800376c:	e015      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3304      	adds	r3, #4
 8003772:	2100      	movs	r1, #0
 8003774:	4618      	mov	r0, r3
 8003776:	f000 fed3 	bl	8004520 <RCCEx_PLL2_Config>
 800377a:	4603      	mov	r3, r0
 800377c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800377e:	e00c      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3324      	adds	r3, #36	; 0x24
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 ff7c 	bl	8004684 <RCCEx_PLL3_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003790:	e003      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	75fb      	strb	r3, [r7, #23]
      break;
 8003796:	e000      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d109      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a0:	4b71      	ldr	r3, [pc, #452]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a4:	f023 0207 	bic.w	r2, r3, #7
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	496e      	ldr	r1, [pc, #440]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	650b      	str	r3, [r1, #80]	; 0x50
 80037b2:	e001      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d042      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037cc:	d02b      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80037ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d2:	d825      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037d4:	2bc0      	cmp	r3, #192	; 0xc0
 80037d6:	d028      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80037d8:	2bc0      	cmp	r3, #192	; 0xc0
 80037da:	d821      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d016      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80037e0:	2b80      	cmp	r3, #128	; 0x80
 80037e2:	d81d      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d007      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80037ec:	e018      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ee:	4b5e      	ldr	r3, [pc, #376]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	4a5d      	ldr	r2, [pc, #372]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80037fa:	e017      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fe8c 	bl	8004520 <RCCEx_PLL2_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800380c:	e00e      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3324      	adds	r3, #36	; 0x24
 8003812:	2100      	movs	r1, #0
 8003814:	4618      	mov	r0, r3
 8003816:	f000 ff35 	bl	8004684 <RCCEx_PLL3_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800381e:	e005      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	75fb      	strb	r3, [r7, #23]
      break;
 8003824:	e002      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800382a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d109      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003832:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	494a      	ldr	r1, [pc, #296]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003840:	4313      	orrs	r3, r2
 8003842:	650b      	str	r3, [r1, #80]	; 0x50
 8003844:	e001      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003852:	2b00      	cmp	r3, #0
 8003854:	d049      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800385c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003860:	d030      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003862:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003866:	d82a      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003868:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800386c:	d02c      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800386e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003872:	d824      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003878:	d018      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800387a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800387e:	d81e      	bhi.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003884:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003888:	d007      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800388a:	e018      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4a35      	ldr	r2, [pc, #212]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003896:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003898:	e017      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fe3d 	bl	8004520 <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80038aa:	e00e      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3324      	adds	r3, #36	; 0x24
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fee6 	bl	8004684 <RCCEx_PLL3_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038bc:	e005      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	75fb      	strb	r3, [r7, #23]
      break;
 80038c2:	e002      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80038c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038d0:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80038de:	4922      	ldr	r1, [pc, #136]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	658b      	str	r3, [r1, #88]	; 0x58
 80038e4:	e001      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
 80038e8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d04b      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80038fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003900:	d030      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003902:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003906:	d82a      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003908:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800390c:	d02e      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800390e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003912:	d824      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003918:	d018      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800391a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800391e:	d81e      	bhi.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003928:	d007      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800392a:	e018      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003938:	e019      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fded 	bl	8004520 <RCCEx_PLL2_Config>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800394a:	e010      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3324      	adds	r3, #36	; 0x24
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fe96 	bl	8004684 <RCCEx_PLL3_Config>
 8003958:	4603      	mov	r3, r0
 800395a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800395c:	e007      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
      break;
 8003962:	e004      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003964:	bf00      	nop
 8003966:	e002      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003968:	58024400 	.word	0x58024400
      break;
 800396c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10a      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003974:	4b99      	ldr	r3, [pc, #612]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003978:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003982:	4996      	ldr	r1, [pc, #600]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003984:	4313      	orrs	r3, r2
 8003986:	658b      	str	r3, [r1, #88]	; 0x58
 8003988:	e001      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d032      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	2b30      	cmp	r3, #48	; 0x30
 80039a0:	d01c      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x348>
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d817      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d00c      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d813      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d016      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d10f      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b6:	4b89      	ldr	r3, [pc, #548]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	4a88      	ldr	r2, [pc, #544]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039c2:	e00e      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3304      	adds	r3, #4
 80039c8:	2102      	movs	r1, #2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fda8 	bl	8004520 <RCCEx_PLL2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80039d4:	e005      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	75fb      	strb	r3, [r7, #23]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80039e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d109      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039e8:	4b7c      	ldr	r3, [pc, #496]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f4:	4979      	ldr	r1, [pc, #484]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
 80039fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d047      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a14:	d030      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1a:	d82a      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a20:	d02c      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003a22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a26:	d824      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2c:	d018      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a32:	d81e      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3c:	d007      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003a3e:	e018      	b.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a40:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a4c:	e017      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2100      	movs	r1, #0
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fd63 	bl	8004520 <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a5e:	e00e      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3324      	adds	r3, #36	; 0x24
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f000 fe0c 	bl	8004684 <RCCEx_PLL3_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003a70:	e005      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
      break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a84:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a88:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a90:	4952      	ldr	r1, [pc, #328]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	650b      	str	r3, [r1, #80]	; 0x50
 8003a96:	e001      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d049      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab0:	d02e      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ab2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ab6:	d828      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ab8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003abc:	d02a      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003abe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ac2:	d822      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ac4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ac8:	d026      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003aca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ace:	d81c      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ad4:	d010      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ada:	d816      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01d      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d111      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fd17 	bl	8004520 <RCCEx_PLL2_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003af6:	e012      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3324      	adds	r3, #36	; 0x24
 8003afc:	2101      	movs	r1, #1
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fdc0 	bl	8004684 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003b08:	e009      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0e:	e006      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003b10:	bf00      	nop
 8003b12:	e004      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003b14:	bf00      	nop
 8003b16:	e002      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003b1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1e:	7dfb      	ldrb	r3, [r7, #23]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b24:	4b2d      	ldr	r3, [pc, #180]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b28:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b30:	492a      	ldr	r1, [pc, #168]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	650b      	str	r3, [r1, #80]	; 0x50
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d04d      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b52:	d02e      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b58:	d828      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5e:	d02a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b64:	d822      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b6a:	d026      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003b6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b70:	d81c      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b76:	d010      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b7c:	d816      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01d      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b86:	d111      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fcc6 	bl	8004520 <RCCEx_PLL2_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003b98:	e012      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3324      	adds	r3, #36	; 0x24
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fd6f 	bl	8004684 <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003baa:	e009      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb0:	e006      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10c      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bd4:	4901      	ldr	r1, [pc, #4]	; (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bda:	e003      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003bdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be0:	7dfb      	ldrb	r3, [r7, #23]
 8003be2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d02f      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf8:	d00e      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bfe:	d814      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d015      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c08:	d10f      	bne.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0a:	4baf      	ldr	r3, [pc, #700]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	4aae      	ldr	r2, [pc, #696]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c16:	e00c      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fc7e 	bl	8004520 <RCCEx_PLL2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003c28:	e003      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c32:	7dfb      	ldrb	r3, [r7, #23]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d109      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c38:	4ba3      	ldr	r3, [pc, #652]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c44:	49a0      	ldr	r1, [pc, #640]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	650b      	str	r3, [r1, #80]	; 0x50
 8003c4a:	e001      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d032      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d81b      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003c64:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6a:	bf00      	nop
 8003c6c:	08003ca3 	.word	0x08003ca3
 8003c70:	08003c7d 	.word	0x08003c7d
 8003c74:	08003c8b 	.word	0x08003c8b
 8003c78:	08003ca3 	.word	0x08003ca3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c7c:	4b92      	ldr	r3, [pc, #584]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4a91      	ldr	r2, [pc, #580]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2102      	movs	r1, #2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 fc45 	bl	8004520 <RCCEx_PLL2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca0:	e000      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003ca2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003caa:	4b87      	ldr	r3, [pc, #540]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	4984      	ldr	r1, [pc, #528]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cbc:	e001      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f000 8086 	beq.w	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd0:	4b7e      	ldr	r3, [pc, #504]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a7d      	ldr	r2, [pc, #500]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cdc:	f7fd f8b8 	bl	8000e50 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ce2:	e009      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce4:	f7fd f8b4 	bl	8000e50 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d902      	bls.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	75fb      	strb	r3, [r7, #23]
        break;
 8003cf6:	e005      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf8:	4b74      	ldr	r3, [pc, #464]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0ef      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d166      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d0a:	4b6f      	ldr	r3, [pc, #444]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d14:	4053      	eors	r3, r2
 8003d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d013      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d26:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d28:	4b67      	ldr	r3, [pc, #412]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	4a66      	ldr	r2, [pc, #408]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d32:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d34:	4b64      	ldr	r3, [pc, #400]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d38:	4a63      	ldr	r2, [pc, #396]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d40:	4a61      	ldr	r2, [pc, #388]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d50:	d115      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fd f87d 	bl	8000e50 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d58:	e00b      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fd f879 	bl	8000e50 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d902      	bls.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	75fb      	strb	r3, [r7, #23]
            break;
 8003d70:	e005      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d72:	4b55      	ldr	r3, [pc, #340]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0ed      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d126      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d92:	d10d      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003d94:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da2:	0919      	lsrs	r1, r3, #4
 8003da4:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003da6:	400b      	ands	r3, r1
 8003da8:	4947      	ldr	r1, [pc, #284]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	610b      	str	r3, [r1, #16]
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003db0:	4b45      	ldr	r3, [pc, #276]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	4a44      	ldr	r2, [pc, #272]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dba:	6113      	str	r3, [r2, #16]
 8003dbc:	4b42      	ldr	r3, [pc, #264]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dca:	493f      	ldr	r1, [pc, #252]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	670b      	str	r3, [r1, #112]	; 0x70
 8003dd0:	e004      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	75bb      	strb	r3, [r7, #22]
 8003dd6:	e001      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
 8003dda:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8085 	beq.w	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dee:	2b28      	cmp	r3, #40	; 0x28
 8003df0:	d866      	bhi.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003ed5 	.word	0x08003ed5
 8003dfc:	08003ec1 	.word	0x08003ec1
 8003e00:	08003ec1 	.word	0x08003ec1
 8003e04:	08003ec1 	.word	0x08003ec1
 8003e08:	08003ec1 	.word	0x08003ec1
 8003e0c:	08003ec1 	.word	0x08003ec1
 8003e10:	08003ec1 	.word	0x08003ec1
 8003e14:	08003ec1 	.word	0x08003ec1
 8003e18:	08003e9d 	.word	0x08003e9d
 8003e1c:	08003ec1 	.word	0x08003ec1
 8003e20:	08003ec1 	.word	0x08003ec1
 8003e24:	08003ec1 	.word	0x08003ec1
 8003e28:	08003ec1 	.word	0x08003ec1
 8003e2c:	08003ec1 	.word	0x08003ec1
 8003e30:	08003ec1 	.word	0x08003ec1
 8003e34:	08003ec1 	.word	0x08003ec1
 8003e38:	08003eaf 	.word	0x08003eaf
 8003e3c:	08003ec1 	.word	0x08003ec1
 8003e40:	08003ec1 	.word	0x08003ec1
 8003e44:	08003ec1 	.word	0x08003ec1
 8003e48:	08003ec1 	.word	0x08003ec1
 8003e4c:	08003ec1 	.word	0x08003ec1
 8003e50:	08003ec1 	.word	0x08003ec1
 8003e54:	08003ec1 	.word	0x08003ec1
 8003e58:	08003ed5 	.word	0x08003ed5
 8003e5c:	08003ec1 	.word	0x08003ec1
 8003e60:	08003ec1 	.word	0x08003ec1
 8003e64:	08003ec1 	.word	0x08003ec1
 8003e68:	08003ec1 	.word	0x08003ec1
 8003e6c:	08003ec1 	.word	0x08003ec1
 8003e70:	08003ec1 	.word	0x08003ec1
 8003e74:	08003ec1 	.word	0x08003ec1
 8003e78:	08003ed5 	.word	0x08003ed5
 8003e7c:	08003ec1 	.word	0x08003ec1
 8003e80:	08003ec1 	.word	0x08003ec1
 8003e84:	08003ec1 	.word	0x08003ec1
 8003e88:	08003ec1 	.word	0x08003ec1
 8003e8c:	08003ec1 	.word	0x08003ec1
 8003e90:	08003ec1 	.word	0x08003ec1
 8003e94:	08003ec1 	.word	0x08003ec1
 8003e98:	08003ed5 	.word	0x08003ed5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fb3c 	bl	8004520 <RCCEx_PLL2_Config>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003eac:	e013      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3324      	adds	r3, #36	; 0x24
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fbe5 	bl	8004684 <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec4:	e007      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ec6:	bf00      	nop
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	58024800 	.word	0x58024800
 8003ed0:	00ffffcf 	.word	0x00ffffcf
      break;
 8003ed4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003edc:	4b96      	ldr	r3, [pc, #600]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ee8:	4993      	ldr	r1, [pc, #588]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	654b      	str	r3, [r1, #84]	; 0x54
 8003eee:	e001      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d038      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	2b05      	cmp	r3, #5
 8003f06:	d821      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f53 	.word	0x08003f53
 8003f14:	08003f29 	.word	0x08003f29
 8003f18:	08003f3b 	.word	0x08003f3b
 8003f1c:	08003f53 	.word	0x08003f53
 8003f20:	08003f53 	.word	0x08003f53
 8003f24:	08003f53 	.word	0x08003f53
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 faf6 	bl	8004520 <RCCEx_PLL2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f38:	e00c      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3324      	adds	r3, #36	; 0x24
 8003f3e:	2101      	movs	r1, #1
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fb9f 	bl	8004684 <RCCEx_PLL3_Config>
 8003f46:	4603      	mov	r3, r0
 8003f48:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003f4a:	e003      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f5a:	4b77      	ldr	r3, [pc, #476]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5e:	f023 0207 	bic.w	r2, r3, #7
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	4974      	ldr	r1, [pc, #464]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8003f6c:	e001      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
 8003f70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d03a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d821      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fd3 	.word	0x08003fd3
 8003f94:	08003fa9 	.word	0x08003fa9
 8003f98:	08003fbb 	.word	0x08003fbb
 8003f9c:	08003fd3 	.word	0x08003fd3
 8003fa0:	08003fd3 	.word	0x08003fd3
 8003fa4:	08003fd3 	.word	0x08003fd3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fab6 	bl	8004520 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fb8:	e00c      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3324      	adds	r3, #36	; 0x24
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fb5f 	bl	8004684 <RCCEx_PLL3_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003fca:	e003      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fda:	4b57      	ldr	r3, [pc, #348]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	f023 0207 	bic.w	r2, r3, #7
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	4953      	ldr	r1, [pc, #332]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	658b      	str	r3, [r1, #88]	; 0x58
 8003fee:	e001      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d04b      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800400a:	d02e      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800400c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004010:	d828      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004016:	d02a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401c:	d822      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800401e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004022:	d026      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004024:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004028:	d81c      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800402a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402e:	d010      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004034:	d816      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d01d      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800403a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403e:	d111      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3304      	adds	r3, #4
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fa6a 	bl	8004520 <RCCEx_PLL2_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004050:	e012      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	; 0x24
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fb13 	bl	8004684 <RCCEx_PLL3_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004062:	e009      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	75fb      	strb	r3, [r7, #23]
      break;
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800406a:	bf00      	nop
 800406c:	e004      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800406e:	bf00      	nop
 8004070:	e002      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004072:	bf00      	nop
 8004074:	e000      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004078:	7dfb      	ldrb	r3, [r7, #23]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800407e:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408c:	492a      	ldr	r1, [pc, #168]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	654b      	str	r3, [r1, #84]	; 0x54
 8004092:	e001      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
 8004096:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d04d      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ae:	d02e      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80040b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040b4:	d828      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	d02a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80040bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c0:	d822      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80040c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040c6:	d026      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80040c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040cc:	d81c      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d010      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d816      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01d      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d111      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fa18 	bl	8004520 <RCCEx_PLL2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80040f4:	e012      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3324      	adds	r3, #36	; 0x24
 80040fa:	2102      	movs	r1, #2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fac1 	bl	8004684 <RCCEx_PLL3_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004106:	e009      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	75fb      	strb	r3, [r7, #23]
      break;
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800410e:	bf00      	nop
 8004110:	e004      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800411a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004126:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004130:	4901      	ldr	r1, [pc, #4]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	658b      	str	r3, [r1, #88]	; 0x58
 8004136:	e003      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004138:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	7dfb      	ldrb	r3, [r7, #23]
 800413e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d04b      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004152:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004156:	d02e      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004158:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800415c:	d828      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800415e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004162:	d02a      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	d822      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800416a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800416e:	d026      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004170:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004174:	d81c      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800417a:	d010      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800417c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004180:	d816      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d01d      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418a:	d111      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f9c4 	bl	8004520 <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800419c:	e012      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3324      	adds	r3, #36	; 0x24
 80041a2:	2102      	movs	r1, #2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fa6d 	bl	8004684 <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80041ae:	e009      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
      break;
 80041b4:	e006      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80041b6:	bf00      	nop
 80041b8:	e004      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80041ba:	bf00      	nop
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80041c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80041ca:	4b9d      	ldr	r3, [pc, #628]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d8:	4999      	ldr	r1, [pc, #612]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	658b      	str	r3, [r1, #88]	; 0x58
 80041de:	e001      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
 80041e2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	d10a      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3324      	adds	r3, #36	; 0x24
 8004200:	2102      	movs	r1, #2
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fa3e 	bl	8004684 <RCCEx_PLL3_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004212:	4b8b      	ldr	r3, [pc, #556]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004220:	4987      	ldr	r1, [pc, #540]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004222:	4313      	orrs	r3, r2
 8004224:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d01a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423c:	d10a      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3324      	adds	r3, #36	; 0x24
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fa1d 	bl	8004684 <RCCEx_PLL3_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004254:	4b7a      	ldr	r3, [pc, #488]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004262:	4977      	ldr	r1, [pc, #476]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004264:	4313      	orrs	r3, r2
 8004266:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d034      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800427a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800427e:	d01d      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004284:	d817      	bhi.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800428a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428e:	d009      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004290:	e011      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3304      	adds	r3, #4
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f000 f941 	bl	8004520 <RCCEx_PLL2_Config>
 800429e:	4603      	mov	r3, r0
 80042a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042a2:	e00c      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3324      	adds	r3, #36	; 0x24
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f9ea 	bl	8004684 <RCCEx_PLL3_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80042b4:	e003      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ba:	e000      	b.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80042bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042be:	7dfb      	ldrb	r3, [r7, #23]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042c4:	4b5e      	ldr	r3, [pc, #376]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042d2:	495b      	ldr	r1, [pc, #364]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	658b      	str	r3, [r1, #88]	; 0x58
 80042d8:	e001      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d033      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042f4:	d01c      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80042f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042fa:	d816      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80042fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004300:	d003      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004306:	d007      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004308:	e00f      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430a:	4b4d      	ldr	r3, [pc, #308]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	4a4c      	ldr	r2, [pc, #304]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004316:	e00c      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	2101      	movs	r1, #1
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f9b0 	bl	8004684 <RCCEx_PLL3_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
      break;
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004332:	7dfb      	ldrb	r3, [r7, #23]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004338:	4b41      	ldr	r3, [pc, #260]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004346:	493e      	ldr	r1, [pc, #248]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004348:	4313      	orrs	r3, r2
 800434a:	654b      	str	r3, [r1, #84]	; 0x54
 800434c:	e001      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
 8004350:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d029      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d007      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800436c:	e00f      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800436e:	4b34      	ldr	r3, [pc, #208]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	4a33      	ldr	r2, [pc, #204]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800437a:	e00b      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	2102      	movs	r1, #2
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f8cc 	bl	8004520 <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800438c:	e002      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	75fb      	strb	r3, [r7, #23]
      break;
 8004392:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800439a:	4b29      	ldr	r3, [pc, #164]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800439c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	4926      	ldr	r1, [pc, #152]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80043ac:	e001      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3324      	adds	r3, #36	; 0x24
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 f95d 	bl	8004684 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d033      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e8:	d017      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80043ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ee:	d811      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f4:	d013      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80043f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fa:	d80b      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d010      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004404:	d106      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004406:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440a:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800440c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004412:	e007      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	75fb      	strb	r3, [r7, #23]
      break;
 8004418:	e004      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004422:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10c      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800442c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004436:	4902      	ldr	r1, [pc, #8]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004438:	4313      	orrs	r3, r2
 800443a:	654b      	str	r3, [r1, #84]	; 0x54
 800443c:	e004      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800443e:	bf00      	nop
 8004440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004454:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	492e      	ldr	r1, [pc, #184]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004462:	4313      	orrs	r3, r2
 8004464:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004480:	4926      	ldr	r1, [pc, #152]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004482:	4313      	orrs	r3, r2
 8004484:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d008      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004492:	4b22      	ldr	r3, [pc, #136]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004496:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800449e:	491f      	ldr	r1, [pc, #124]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00d      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044b0:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	4a19      	ldr	r2, [pc, #100]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044ba:	6113      	str	r3, [r2, #16]
 80044bc:	4b17      	ldr	r3, [pc, #92]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80044c6:	4915      	ldr	r1, [pc, #84]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	da08      	bge.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044d4:	4b11      	ldr	r3, [pc, #68]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	490e      	ldr	r1, [pc, #56]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	4906      	ldr	r1, [pc, #24]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004502:	4313      	orrs	r3, r2
 8004504:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004506:	7dbb      	ldrb	r3, [r7, #22]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400

08004520 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800452e:	4b53      	ldr	r3, [pc, #332]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	2b03      	cmp	r3, #3
 8004538:	d101      	bne.n	800453e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e099      	b.n	8004672 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800453e:	4b4f      	ldr	r3, [pc, #316]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a4e      	ldr	r2, [pc, #312]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004544:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004548:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454a:	f7fc fc81 	bl	8000e50 <HAL_GetTick>
 800454e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004550:	e008      	b.n	8004564 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004552:	f7fc fc7d 	bl	8000e50 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e086      	b.n	8004672 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004564:	4b45      	ldr	r3, [pc, #276]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1f0      	bne.n	8004552 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004570:	4b42      	ldr	r3, [pc, #264]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004574:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	493f      	ldr	r1, [pc, #252]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004580:	4313      	orrs	r3, r2
 8004582:	628b      	str	r3, [r1, #40]	; 0x28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	3b01      	subs	r3, #1
 800458a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	3b01      	subs	r3, #1
 8004594:	025b      	lsls	r3, r3, #9
 8004596:	b29b      	uxth	r3, r3
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	3b01      	subs	r3, #1
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	061b      	lsls	r3, r3, #24
 80045b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045b4:	4931      	ldr	r1, [pc, #196]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045ba:	4b30      	ldr	r3, [pc, #192]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	492d      	ldr	r1, [pc, #180]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045cc:	4b2b      	ldr	r3, [pc, #172]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	f023 0220 	bic.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	4928      	ldr	r1, [pc, #160]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045de:	4b27      	ldr	r3, [pc, #156]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	4a26      	ldr	r2, [pc, #152]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045e4:	f023 0310 	bic.w	r3, r3, #16
 80045e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045ea:	4b24      	ldr	r3, [pc, #144]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <RCCEx_PLL2_Config+0x160>)
 80045f0:	4013      	ands	r3, r2
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	69d2      	ldr	r2, [r2, #28]
 80045f6:	00d2      	lsls	r2, r2, #3
 80045f8:	4920      	ldr	r1, [pc, #128]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80045fe:	4b1f      	ldr	r3, [pc, #124]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	4a1e      	ldr	r2, [pc, #120]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004604:	f043 0310 	orr.w	r3, r3, #16
 8004608:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004610:	4b1a      	ldr	r3, [pc, #104]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	4a19      	ldr	r2, [pc, #100]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800461a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800461c:	e00f      	b.n	800463e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d106      	bne.n	8004632 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004624:	4b15      	ldr	r3, [pc, #84]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 800462a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800462e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004630:	e005      	b.n	800463e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	4a11      	ldr	r2, [pc, #68]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800463c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800463e:	4b0f      	ldr	r3, [pc, #60]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a0e      	ldr	r2, [pc, #56]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004644:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004648:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464a:	f7fc fc01 	bl	8000e50 <HAL_GetTick>
 800464e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004650:	e008      	b.n	8004664 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004652:	f7fc fbfd 	bl	8000e50 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e006      	b.n	8004672 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <RCCEx_PLL2_Config+0x15c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	58024400 	.word	0x58024400
 8004680:	ffff0007 	.word	0xffff0007

08004684 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004692:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b03      	cmp	r3, #3
 800469c:	d101      	bne.n	80046a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e099      	b.n	80047d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046a2:	4b4f      	ldr	r3, [pc, #316]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a4e      	ldr	r2, [pc, #312]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 80046a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ae:	f7fc fbcf 	bl	8000e50 <HAL_GetTick>
 80046b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046b4:	e008      	b.n	80046c8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046b6:	f7fc fbcb 	bl	8000e50 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e086      	b.n	80047d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046c8:	4b45      	ldr	r3, [pc, #276]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f0      	bne.n	80046b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046d4:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	051b      	lsls	r3, r3, #20
 80046e2:	493f      	ldr	r1, [pc, #252]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	628b      	str	r3, [r1, #40]	; 0x28
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	025b      	lsls	r3, r3, #9
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	3b01      	subs	r3, #1
 8004704:	041b      	lsls	r3, r3, #16
 8004706:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	3b01      	subs	r3, #1
 8004712:	061b      	lsls	r3, r3, #24
 8004714:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004718:	4931      	ldr	r1, [pc, #196]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 800471a:	4313      	orrs	r3, r2
 800471c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800471e:	4b30      	ldr	r3, [pc, #192]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	492d      	ldr	r1, [pc, #180]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 800472c:	4313      	orrs	r3, r2
 800472e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	4928      	ldr	r1, [pc, #160]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 800473e:	4313      	orrs	r3, r2
 8004740:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004742:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800474c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800474e:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <RCCEx_PLL3_Config+0x160>)
 8004754:	4013      	ands	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	69d2      	ldr	r2, [r2, #28]
 800475a:	00d2      	lsls	r2, r2, #3
 800475c:	4920      	ldr	r1, [pc, #128]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004762:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004774:	4b1a      	ldr	r3, [pc, #104]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 800477a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800477e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004780:	e00f      	b.n	80047a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d106      	bne.n	8004796 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004788:	4b15      	ldr	r3, [pc, #84]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 800478e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004792:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004794:	e005      	b.n	80047a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004796:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 800479c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047a2:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a0e      	ldr	r2, [pc, #56]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047ae:	f7fc fb4f 	bl	8000e50 <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047b4:	e008      	b.n	80047c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047b6:	f7fc fb4b 	bl	8000e50 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e006      	b.n	80047d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <RCCEx_PLL3_Config+0x15c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	58024400 	.word	0x58024400
 80047e4:	ffff0007 	.word	0xffff0007

080047e8 <__errno>:
 80047e8:	4b01      	ldr	r3, [pc, #4]	; (80047f0 <__errno+0x8>)
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	24000010 	.word	0x24000010

080047f4 <__libc_init_array>:
 80047f4:	b570      	push	{r4, r5, r6, lr}
 80047f6:	4d0d      	ldr	r5, [pc, #52]	; (800482c <__libc_init_array+0x38>)
 80047f8:	4c0d      	ldr	r4, [pc, #52]	; (8004830 <__libc_init_array+0x3c>)
 80047fa:	1b64      	subs	r4, r4, r5
 80047fc:	10a4      	asrs	r4, r4, #2
 80047fe:	2600      	movs	r6, #0
 8004800:	42a6      	cmp	r6, r4
 8004802:	d109      	bne.n	8004818 <__libc_init_array+0x24>
 8004804:	4d0b      	ldr	r5, [pc, #44]	; (8004834 <__libc_init_array+0x40>)
 8004806:	4c0c      	ldr	r4, [pc, #48]	; (8004838 <__libc_init_array+0x44>)
 8004808:	f000 f93c 	bl	8004a84 <_init>
 800480c:	1b64      	subs	r4, r4, r5
 800480e:	10a4      	asrs	r4, r4, #2
 8004810:	2600      	movs	r6, #0
 8004812:	42a6      	cmp	r6, r4
 8004814:	d105      	bne.n	8004822 <__libc_init_array+0x2e>
 8004816:	bd70      	pop	{r4, r5, r6, pc}
 8004818:	f855 3b04 	ldr.w	r3, [r5], #4
 800481c:	4798      	blx	r3
 800481e:	3601      	adds	r6, #1
 8004820:	e7ee      	b.n	8004800 <__libc_init_array+0xc>
 8004822:	f855 3b04 	ldr.w	r3, [r5], #4
 8004826:	4798      	blx	r3
 8004828:	3601      	adds	r6, #1
 800482a:	e7f2      	b.n	8004812 <__libc_init_array+0x1e>
 800482c:	08004b08 	.word	0x08004b08
 8004830:	08004b08 	.word	0x08004b08
 8004834:	08004b08 	.word	0x08004b08
 8004838:	08004b0c 	.word	0x08004b0c

0800483c <malloc>:
 800483c:	4b02      	ldr	r3, [pc, #8]	; (8004848 <malloc+0xc>)
 800483e:	4601      	mov	r1, r0
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	f000 b88d 	b.w	8004960 <_malloc_r>
 8004846:	bf00      	nop
 8004848:	24000010 	.word	0x24000010

0800484c <free>:
 800484c:	4b02      	ldr	r3, [pc, #8]	; (8004858 <free+0xc>)
 800484e:	4601      	mov	r1, r0
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	f000 b819 	b.w	8004888 <_free_r>
 8004856:	bf00      	nop
 8004858:	24000010 	.word	0x24000010

0800485c <memcpy>:
 800485c:	440a      	add	r2, r1
 800485e:	4291      	cmp	r1, r2
 8004860:	f100 33ff 	add.w	r3, r0, #4294967295
 8004864:	d100      	bne.n	8004868 <memcpy+0xc>
 8004866:	4770      	bx	lr
 8004868:	b510      	push	{r4, lr}
 800486a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800486e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004872:	4291      	cmp	r1, r2
 8004874:	d1f9      	bne.n	800486a <memcpy+0xe>
 8004876:	bd10      	pop	{r4, pc}

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <_free_r>:
 8004888:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800488a:	2900      	cmp	r1, #0
 800488c:	d044      	beq.n	8004918 <_free_r+0x90>
 800488e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004892:	9001      	str	r0, [sp, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f1a1 0404 	sub.w	r4, r1, #4
 800489a:	bfb8      	it	lt
 800489c:	18e4      	addlt	r4, r4, r3
 800489e:	f000 f8e3 	bl	8004a68 <__malloc_lock>
 80048a2:	4a1e      	ldr	r2, [pc, #120]	; (800491c <_free_r+0x94>)
 80048a4:	9801      	ldr	r0, [sp, #4]
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	b933      	cbnz	r3, 80048b8 <_free_r+0x30>
 80048aa:	6063      	str	r3, [r4, #4]
 80048ac:	6014      	str	r4, [r2, #0]
 80048ae:	b003      	add	sp, #12
 80048b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048b4:	f000 b8de 	b.w	8004a74 <__malloc_unlock>
 80048b8:	42a3      	cmp	r3, r4
 80048ba:	d908      	bls.n	80048ce <_free_r+0x46>
 80048bc:	6825      	ldr	r5, [r4, #0]
 80048be:	1961      	adds	r1, r4, r5
 80048c0:	428b      	cmp	r3, r1
 80048c2:	bf01      	itttt	eq
 80048c4:	6819      	ldreq	r1, [r3, #0]
 80048c6:	685b      	ldreq	r3, [r3, #4]
 80048c8:	1949      	addeq	r1, r1, r5
 80048ca:	6021      	streq	r1, [r4, #0]
 80048cc:	e7ed      	b.n	80048aa <_free_r+0x22>
 80048ce:	461a      	mov	r2, r3
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	b10b      	cbz	r3, 80048d8 <_free_r+0x50>
 80048d4:	42a3      	cmp	r3, r4
 80048d6:	d9fa      	bls.n	80048ce <_free_r+0x46>
 80048d8:	6811      	ldr	r1, [r2, #0]
 80048da:	1855      	adds	r5, r2, r1
 80048dc:	42a5      	cmp	r5, r4
 80048de:	d10b      	bne.n	80048f8 <_free_r+0x70>
 80048e0:	6824      	ldr	r4, [r4, #0]
 80048e2:	4421      	add	r1, r4
 80048e4:	1854      	adds	r4, r2, r1
 80048e6:	42a3      	cmp	r3, r4
 80048e8:	6011      	str	r1, [r2, #0]
 80048ea:	d1e0      	bne.n	80048ae <_free_r+0x26>
 80048ec:	681c      	ldr	r4, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	6053      	str	r3, [r2, #4]
 80048f2:	4421      	add	r1, r4
 80048f4:	6011      	str	r1, [r2, #0]
 80048f6:	e7da      	b.n	80048ae <_free_r+0x26>
 80048f8:	d902      	bls.n	8004900 <_free_r+0x78>
 80048fa:	230c      	movs	r3, #12
 80048fc:	6003      	str	r3, [r0, #0]
 80048fe:	e7d6      	b.n	80048ae <_free_r+0x26>
 8004900:	6825      	ldr	r5, [r4, #0]
 8004902:	1961      	adds	r1, r4, r5
 8004904:	428b      	cmp	r3, r1
 8004906:	bf04      	itt	eq
 8004908:	6819      	ldreq	r1, [r3, #0]
 800490a:	685b      	ldreq	r3, [r3, #4]
 800490c:	6063      	str	r3, [r4, #4]
 800490e:	bf04      	itt	eq
 8004910:	1949      	addeq	r1, r1, r5
 8004912:	6021      	streq	r1, [r4, #0]
 8004914:	6054      	str	r4, [r2, #4]
 8004916:	e7ca      	b.n	80048ae <_free_r+0x26>
 8004918:	b003      	add	sp, #12
 800491a:	bd30      	pop	{r4, r5, pc}
 800491c:	24000af8 	.word	0x24000af8

08004920 <sbrk_aligned>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4e0e      	ldr	r6, [pc, #56]	; (800495c <sbrk_aligned+0x3c>)
 8004924:	460c      	mov	r4, r1
 8004926:	6831      	ldr	r1, [r6, #0]
 8004928:	4605      	mov	r5, r0
 800492a:	b911      	cbnz	r1, 8004932 <sbrk_aligned+0x12>
 800492c:	f000 f88c 	bl	8004a48 <_sbrk_r>
 8004930:	6030      	str	r0, [r6, #0]
 8004932:	4621      	mov	r1, r4
 8004934:	4628      	mov	r0, r5
 8004936:	f000 f887 	bl	8004a48 <_sbrk_r>
 800493a:	1c43      	adds	r3, r0, #1
 800493c:	d00a      	beq.n	8004954 <sbrk_aligned+0x34>
 800493e:	1cc4      	adds	r4, r0, #3
 8004940:	f024 0403 	bic.w	r4, r4, #3
 8004944:	42a0      	cmp	r0, r4
 8004946:	d007      	beq.n	8004958 <sbrk_aligned+0x38>
 8004948:	1a21      	subs	r1, r4, r0
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f87c 	bl	8004a48 <_sbrk_r>
 8004950:	3001      	adds	r0, #1
 8004952:	d101      	bne.n	8004958 <sbrk_aligned+0x38>
 8004954:	f04f 34ff 	mov.w	r4, #4294967295
 8004958:	4620      	mov	r0, r4
 800495a:	bd70      	pop	{r4, r5, r6, pc}
 800495c:	24000afc 	.word	0x24000afc

08004960 <_malloc_r>:
 8004960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004964:	1ccd      	adds	r5, r1, #3
 8004966:	f025 0503 	bic.w	r5, r5, #3
 800496a:	3508      	adds	r5, #8
 800496c:	2d0c      	cmp	r5, #12
 800496e:	bf38      	it	cc
 8004970:	250c      	movcc	r5, #12
 8004972:	2d00      	cmp	r5, #0
 8004974:	4607      	mov	r7, r0
 8004976:	db01      	blt.n	800497c <_malloc_r+0x1c>
 8004978:	42a9      	cmp	r1, r5
 800497a:	d905      	bls.n	8004988 <_malloc_r+0x28>
 800497c:	230c      	movs	r3, #12
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	2600      	movs	r6, #0
 8004982:	4630      	mov	r0, r6
 8004984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004988:	4e2e      	ldr	r6, [pc, #184]	; (8004a44 <_malloc_r+0xe4>)
 800498a:	f000 f86d 	bl	8004a68 <__malloc_lock>
 800498e:	6833      	ldr	r3, [r6, #0]
 8004990:	461c      	mov	r4, r3
 8004992:	bb34      	cbnz	r4, 80049e2 <_malloc_r+0x82>
 8004994:	4629      	mov	r1, r5
 8004996:	4638      	mov	r0, r7
 8004998:	f7ff ffc2 	bl	8004920 <sbrk_aligned>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	4604      	mov	r4, r0
 80049a0:	d14d      	bne.n	8004a3e <_malloc_r+0xde>
 80049a2:	6834      	ldr	r4, [r6, #0]
 80049a4:	4626      	mov	r6, r4
 80049a6:	2e00      	cmp	r6, #0
 80049a8:	d140      	bne.n	8004a2c <_malloc_r+0xcc>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	4631      	mov	r1, r6
 80049ae:	4638      	mov	r0, r7
 80049b0:	eb04 0803 	add.w	r8, r4, r3
 80049b4:	f000 f848 	bl	8004a48 <_sbrk_r>
 80049b8:	4580      	cmp	r8, r0
 80049ba:	d13a      	bne.n	8004a32 <_malloc_r+0xd2>
 80049bc:	6821      	ldr	r1, [r4, #0]
 80049be:	3503      	adds	r5, #3
 80049c0:	1a6d      	subs	r5, r5, r1
 80049c2:	f025 0503 	bic.w	r5, r5, #3
 80049c6:	3508      	adds	r5, #8
 80049c8:	2d0c      	cmp	r5, #12
 80049ca:	bf38      	it	cc
 80049cc:	250c      	movcc	r5, #12
 80049ce:	4629      	mov	r1, r5
 80049d0:	4638      	mov	r0, r7
 80049d2:	f7ff ffa5 	bl	8004920 <sbrk_aligned>
 80049d6:	3001      	adds	r0, #1
 80049d8:	d02b      	beq.n	8004a32 <_malloc_r+0xd2>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	442b      	add	r3, r5
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	e00e      	b.n	8004a00 <_malloc_r+0xa0>
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	1b52      	subs	r2, r2, r5
 80049e6:	d41e      	bmi.n	8004a26 <_malloc_r+0xc6>
 80049e8:	2a0b      	cmp	r2, #11
 80049ea:	d916      	bls.n	8004a1a <_malloc_r+0xba>
 80049ec:	1961      	adds	r1, r4, r5
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	6025      	str	r5, [r4, #0]
 80049f2:	bf18      	it	ne
 80049f4:	6059      	strne	r1, [r3, #4]
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	bf08      	it	eq
 80049fa:	6031      	streq	r1, [r6, #0]
 80049fc:	5162      	str	r2, [r4, r5]
 80049fe:	604b      	str	r3, [r1, #4]
 8004a00:	4638      	mov	r0, r7
 8004a02:	f104 060b 	add.w	r6, r4, #11
 8004a06:	f000 f835 	bl	8004a74 <__malloc_unlock>
 8004a0a:	f026 0607 	bic.w	r6, r6, #7
 8004a0e:	1d23      	adds	r3, r4, #4
 8004a10:	1af2      	subs	r2, r6, r3
 8004a12:	d0b6      	beq.n	8004982 <_malloc_r+0x22>
 8004a14:	1b9b      	subs	r3, r3, r6
 8004a16:	50a3      	str	r3, [r4, r2]
 8004a18:	e7b3      	b.n	8004982 <_malloc_r+0x22>
 8004a1a:	6862      	ldr	r2, [r4, #4]
 8004a1c:	42a3      	cmp	r3, r4
 8004a1e:	bf0c      	ite	eq
 8004a20:	6032      	streq	r2, [r6, #0]
 8004a22:	605a      	strne	r2, [r3, #4]
 8004a24:	e7ec      	b.n	8004a00 <_malloc_r+0xa0>
 8004a26:	4623      	mov	r3, r4
 8004a28:	6864      	ldr	r4, [r4, #4]
 8004a2a:	e7b2      	b.n	8004992 <_malloc_r+0x32>
 8004a2c:	4634      	mov	r4, r6
 8004a2e:	6876      	ldr	r6, [r6, #4]
 8004a30:	e7b9      	b.n	80049a6 <_malloc_r+0x46>
 8004a32:	230c      	movs	r3, #12
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	4638      	mov	r0, r7
 8004a38:	f000 f81c 	bl	8004a74 <__malloc_unlock>
 8004a3c:	e7a1      	b.n	8004982 <_malloc_r+0x22>
 8004a3e:	6025      	str	r5, [r4, #0]
 8004a40:	e7de      	b.n	8004a00 <_malloc_r+0xa0>
 8004a42:	bf00      	nop
 8004a44:	24000af8 	.word	0x24000af8

08004a48 <_sbrk_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d06      	ldr	r5, [pc, #24]	; (8004a64 <_sbrk_r+0x1c>)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	4604      	mov	r4, r0
 8004a50:	4608      	mov	r0, r1
 8004a52:	602b      	str	r3, [r5, #0]
 8004a54:	f7fc f88e 	bl	8000b74 <_sbrk>
 8004a58:	1c43      	adds	r3, r0, #1
 8004a5a:	d102      	bne.n	8004a62 <_sbrk_r+0x1a>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	b103      	cbz	r3, 8004a62 <_sbrk_r+0x1a>
 8004a60:	6023      	str	r3, [r4, #0]
 8004a62:	bd38      	pop	{r3, r4, r5, pc}
 8004a64:	24000b00 	.word	0x24000b00

08004a68 <__malloc_lock>:
 8004a68:	4801      	ldr	r0, [pc, #4]	; (8004a70 <__malloc_lock+0x8>)
 8004a6a:	f000 b809 	b.w	8004a80 <__retarget_lock_acquire_recursive>
 8004a6e:	bf00      	nop
 8004a70:	24000b04 	.word	0x24000b04

08004a74 <__malloc_unlock>:
 8004a74:	4801      	ldr	r0, [pc, #4]	; (8004a7c <__malloc_unlock+0x8>)
 8004a76:	f000 b804 	b.w	8004a82 <__retarget_lock_release_recursive>
 8004a7a:	bf00      	nop
 8004a7c:	24000b04 	.word	0x24000b04

08004a80 <__retarget_lock_acquire_recursive>:
 8004a80:	4770      	bx	lr

08004a82 <__retarget_lock_release_recursive>:
 8004a82:	4770      	bx	lr

08004a84 <_init>:
 8004a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a86:	bf00      	nop
 8004a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8a:	bc08      	pop	{r3}
 8004a8c:	469e      	mov	lr, r3
 8004a8e:	4770      	bx	lr

08004a90 <_fini>:
 8004a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a92:	bf00      	nop
 8004a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a96:	bc08      	pop	{r3}
 8004a98:	469e      	mov	lr, r3
 8004a9a:	4770      	bx	lr
