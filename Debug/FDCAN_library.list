
FDCAN_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004980  08004980  00014980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08004984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000900  24000078  080049fc  00020078  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  24000978  080049fc  00020978  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e696  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001be8  00000000  00000000  0002e73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ab0  00000000  00000000  00030328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009d8  00000000  00000000  00030dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035d53  00000000  00000000  000317b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000bf08  00000000  00000000  00067503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00158c67  00000000  00000000  0007340b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001cc072  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e30  00000000  00000000  001cc0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000078 	.word	0x24000078
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080048f8 	.word	0x080048f8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400007c 	.word	0x2400007c
 80002d4:	080048f8 	.word	0x080048f8

080002d8 <__aeabi_f2ulz>:
 80002d8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000308 <__aeabi_f2ulz+0x30>
 80002dc:	ee07 0a90 	vmov	s15, r0
 80002e0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000310 <__aeabi_f2ulz+0x38>
 80002e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80002e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80002ec:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80002f0:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80002f4:	eea4 7b45 	vfms.f64	d7, d4, d5
 80002f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80002fc:	ee16 1a10 	vmov	r1, s12
 8000300:	ee17 0a90 	vmov	r0, s15
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	00000000 	.word	0x00000000
 800030c:	3df00000 	.word	0x3df00000
 8000310:	00000000 	.word	0x00000000
 8000314:	41f00000 	.word	0x41f00000

08000318 <HAL_FDCAN_RxFifo0Callback>:
 * @brief  Função chamada quando detectado uma mensagem no barramento da CAN
 * @param  hfdcan: Handle da CAN || normalmente "hfdcan1"
 * @param  RxFifo0ITs: FIFO de interrupção utilizado
 * @retval ***NONE***
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	6039      	str	r1, [r7, #0]
	/* Pisca o  LED 2 caso tenha algo para receber pela CAN */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000322:	2101      	movs	r1, #1
 8000324:	480d      	ldr	r0, [pc, #52]	; (800035c <HAL_FDCAN_RxFifo0Callback+0x44>)
 8000326:	f002 f93c 	bl	80025a2 <HAL_GPIO_TogglePin>

	/* Pega as informações e dados da CAN, e armazena respectivamente em RxHeader e RxData */
	HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData);
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800032e:	2140      	movs	r1, #64	; 0x40
 8000330:	480d      	ldr	r0, [pc, #52]	; (8000368 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000332:	f001 f877 	bl	8001424 <HAL_FDCAN_GetRxMessage>

	/* Chama a função de tratamento de dados */
	canMessageReceived(&RxHeader, RxData);
 8000336:	490a      	ldr	r1, [pc, #40]	; (8000360 <HAL_FDCAN_RxFifo0Callback+0x48>)
 8000338:	480a      	ldr	r0, [pc, #40]	; (8000364 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 800033a:	f000 f879 	bl	8000430 <canMessageReceived>

	/* Ativa novamente a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 800033e:	2200      	movs	r2, #0
 8000340:	2101      	movs	r1, #1
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000344:	f001 f9dc 	bl	8001700 <HAL_FDCAN_ActivateNotification>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <HAL_FDCAN_RxFifo0Callback+0x3a>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 800034e:	f000 fa7b 	bl	8000848 <Error_Handler>
	}
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	58020400 	.word	0x58020400
 8000360:	240008b0 	.word	0x240008b0
 8000364:	24000888 	.word	0x24000888
 8000368:	240008b8 	.word	0x240008b8

0800036c <CAN_stream_Init>:
/**
 * @brief  Inicialização do vetor de dados da CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_stream_Init(void) {
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
	/* Zera cada posição do vetor de dados - Redundância */
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 8000372:	2300      	movs	r3, #0
 8000374:	80fb      	strh	r3, [r7, #6]
 8000376:	e01a      	b.n	80003ae <CAN_stream_Init+0x42>
		free(CAN_stream.Data_buf[i]);
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	4a11      	ldr	r2, [pc, #68]	; (80003c0 <CAN_stream_Init+0x54>)
 800037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000380:	4618      	mov	r0, r3
 8000382:	f004 f99d 	bl	80046c0 <free>
		CAN_stream.Data_buf[i] = NULL;
 8000386:	88fb      	ldrh	r3, [r7, #6]
 8000388:	4a0d      	ldr	r2, [pc, #52]	; (80003c0 <CAN_stream_Init+0x54>)
 800038a:	2100      	movs	r1, #0
 800038c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		*CAN_stream.Data_buf[i] = 0;
 8000390:	88fb      	ldrh	r3, [r7, #6]
 8000392:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <CAN_stream_Init+0x54>)
 8000394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000398:	2200      	movs	r2, #0
 800039a:	701a      	strb	r2, [r3, #0]
		CAN_stream.Size_buf[i] = 0;
 800039c:	88fb      	ldrh	r3, [r7, #6]
 800039e:	4a08      	ldr	r2, [pc, #32]	; (80003c0 <CAN_stream_Init+0x54>)
 80003a0:	4413      	add	r3, r2
 80003a2:	2200      	movs	r2, #0
 80003a4:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
	for (uint16_t i = 0; i < CAN_IDS_NUMBER; i++) {
 80003a8:	88fb      	ldrh	r3, [r7, #6]
 80003aa:	3301      	adds	r3, #1
 80003ac:	80fb      	strh	r3, [r7, #6]
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80003b4:	d3e0      	bcc.n	8000378 <CAN_stream_Init+0xc>
	}
}
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	24000094 	.word	0x24000094

080003c4 <CAN_Init>:
/**
 * @brief  Inicialização da comunicação via CAN
 * @param  ***NONE***
 * @retval ***NONE***
 */
void CAN_Init() {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	/* Chama a função de configuração dos parâmetros da CAN */
	//	CAN_Configure_Init();
	/* Chama a função de limpeza do vetor de armazenamento de dados */
	CAN_stream_Init();
 80003c8:	f7ff ffd0 	bl	800036c <CAN_stream_Init>

	/* Começa a comunicação via CAN */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80003cc:	4816      	ldr	r0, [pc, #88]	; (8000428 <CAN_Init+0x64>)
 80003ce:	f000 ffa3 	bl	8001318 <HAL_FDCAN_Start>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <CAN_Init+0x18>
		// Caso de errado, chama a função de erro
		Error_Handler();
 80003d8:	f000 fa36 	bl	8000848 <Error_Handler>
	}

	/* Ativa a notificação para caso haja algo a receber */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80003dc:	2200      	movs	r2, #0
 80003de:	2101      	movs	r1, #1
 80003e0:	4811      	ldr	r0, [pc, #68]	; (8000428 <CAN_Init+0x64>)
 80003e2:	f001 f98d 	bl	8001700 <HAL_FDCAN_ActivateNotification>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <CAN_Init+0x2c>
			0) != HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 80003ec:	f000 fa2c 	bl	8000848 <Error_Handler>
	}

	/* Configura os parametros para envio de mensagem */
	TxHeader.IdType = FDCAN_STANDARD_ID; // TIPO DE IDENTIFICADOR - STANDARD OU EXTENDED
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <CAN_Init+0x68>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME; // TIPO DE FLAME - DATA OU REMOTE
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <CAN_Init+0x68>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8; // TAMANHO DOS DADOS - 0 A 64 WORDS - CONVERTIDO PRA 4
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <CAN_Init+0x68>)
 80003fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000402:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE; // INDICADOR DE ERRO - ATIVO OU PASSIVO
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <CAN_Init+0x68>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;	// BIT DE INTERRUPÇÃO - ON OU OFF
 800040a:	4b08      	ldr	r3, [pc, #32]	; (800042c <CAN_Init+0x68>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;		// TIPO DE CAN - NORMAL OU FDCAN
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <CAN_Init+0x68>)
 8000412:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000416:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS; // ARMAZENAMENTO DE EVENTOS DE ENVIO - ON OU OFF
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <CAN_Init+0x68>)
 800041a:	2200      	movs	r2, #0
 800041c:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;				// MASCARA DA MENSAGEM - 0 A 0xFF
 800041e:	4b03      	ldr	r3, [pc, #12]	; (800042c <CAN_Init+0x68>)
 8000420:	2200      	movs	r2, #0
 8000422:	621a      	str	r2, [r3, #32]
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	240008b8 	.word	0x240008b8
 800042c:	24000864 	.word	0x24000864

08000430 <canMessageReceived>:
 * @brief  Função de tratamento das mensagens recebidas
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void canMessageReceived(FDCAN_RxHeaderTypeDef *hRxFDCAN, uint8_t *DATA) {
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
	/* Caso o ID passe do maior valor, a função quebra */

	/* Variavel para armazenamento do tamanho de dados */
	uint8_t SIZE_DATA = hRxFDCAN->DataLength >> 16U;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	0c1b      	lsrs	r3, r3, #16
 8000440:	72fb      	strb	r3, [r7, #11]

	/* Variavel para armazenamento do identificador */
	uint16_t IDENTIFIER = hRxFDCAN->Identifier;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	813b      	strh	r3, [r7, #8]

	/* Caso o indentificador não faça parte dos ID's utilizados a função quebra */
	if (IDENTIFIER > CAN_IDS_NUMBER)
 8000448:	893b      	ldrh	r3, [r7, #8]
 800044a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800044e:	d82c      	bhi.n	80004aa <canMessageReceived+0x7a>
		return;

	/* Armazenando o tamanho da variável no buffer da CAN */
	CAN_stream.Size_buf[IDENTIFIER] = SIZE_DATA;
 8000450:	893b      	ldrh	r3, [r7, #8]
 8000452:	4a18      	ldr	r2, [pc, #96]	; (80004b4 <canMessageReceived+0x84>)
 8000454:	4413      	add	r3, r2
 8000456:	7afa      	ldrb	r2, [r7, #11]
 8000458:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640

	/* Libera a memória para que não ocorra Hard Fault */
	free(CAN_stream.Data_buf[IDENTIFIER]);
 800045c:	893b      	ldrh	r3, [r7, #8]
 800045e:	4a15      	ldr	r2, [pc, #84]	; (80004b4 <canMessageReceived+0x84>)
 8000460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000464:	4618      	mov	r0, r3
 8000466:	f004 f92b 	bl	80046c0 <free>

	/* Aloca o espaço necessário para armazenamento do dado*/
	CAN_stream.Data_buf[IDENTIFIER] = malloc(SIZE_DATA * sizeof(uint8_t));
 800046a:	7afb      	ldrb	r3, [r7, #11]
 800046c:	893c      	ldrh	r4, [r7, #8]
 800046e:	4618      	mov	r0, r3
 8000470:	f004 f91e 	bl	80046b0 <malloc>
 8000474:	4603      	mov	r3, r0
 8000476:	461a      	mov	r2, r3
 8000478:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <canMessageReceived+0x84>)
 800047a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	/* Armazena o valor do dado na memória alocada*/
	for (int i = 0; i < SIZE_DATA; i++)
 800047e:	2300      	movs	r3, #0
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	e00d      	b.n	80004a0 <canMessageReceived+0x70>
		CAN_stream.Data_buf[IDENTIFIER][i] = DATA[i];
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	683a      	ldr	r2, [r7, #0]
 8000488:	441a      	add	r2, r3
 800048a:	893b      	ldrh	r3, [r7, #8]
 800048c:	4909      	ldr	r1, [pc, #36]	; (80004b4 <canMessageReceived+0x84>)
 800048e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	440b      	add	r3, r1
 8000496:	7812      	ldrb	r2, [r2, #0]
 8000498:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < SIZE_DATA; i++)
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3301      	adds	r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	7afb      	ldrb	r3, [r7, #11]
 80004a2:	68fa      	ldr	r2, [r7, #12]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbed      	blt.n	8000484 <canMessageReceived+0x54>
 80004a8:	e000      	b.n	80004ac <canMessageReceived+0x7c>
		return;
 80004aa:	bf00      	nop
}
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd90      	pop	{r4, r7, pc}
 80004b2:	bf00      	nop
 80004b4:	24000094 	.word	0x24000094

080004b8 <CAN_TxData>:
 * @brief  Envio de mensagem pelo barramento CAN
 * @param  ID: Identificador da mensagem
 * @param  DATA: Buffer de dados da mensagem
 * @retval ***NONE***
 */
void CAN_TxData(uint16_t Identifier, uint64_t data) {
 80004b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ba:	b089      	sub	sp, #36	; 0x24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4601      	mov	r1, r0
 80004c0:	e9c7 2300 	strd	r2, r3, [r7]
 80004c4:	460b      	mov	r3, r1
 80004c6:	81fb      	strh	r3, [r7, #14]
	uint64_t *pData = &data;
 80004c8:	463b      	mov	r3, r7
 80004ca:	617b      	str	r3, [r7, #20]
	uint32_t Size_data = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < 8; i++)
 80004d0:	2300      	movs	r3, #0
 80004d2:	61bb      	str	r3, [r7, #24]
 80004d4:	e01b      	b.n	800050e <CAN_TxData+0x56>
		if (data >> 8 * i == 0) {
 80004d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80004da:	69b9      	ldr	r1, [r7, #24]
 80004dc:	00c9      	lsls	r1, r1, #3
 80004de:	f1c1 0620 	rsb	r6, r1, #32
 80004e2:	f1a1 0020 	sub.w	r0, r1, #32
 80004e6:	fa22 f401 	lsr.w	r4, r2, r1
 80004ea:	fa03 f606 	lsl.w	r6, r3, r6
 80004ee:	4334      	orrs	r4, r6
 80004f0:	fa23 f000 	lsr.w	r0, r3, r0
 80004f4:	4304      	orrs	r4, r0
 80004f6:	fa23 f501 	lsr.w	r5, r3, r1
 80004fa:	ea54 0305 	orrs.w	r3, r4, r5
 80004fe:	d103      	bne.n	8000508 <CAN_TxData+0x50>
			Size_data = i << 16U;
 8000500:	69bb      	ldr	r3, [r7, #24]
 8000502:	041b      	lsls	r3, r3, #16
 8000504:	61fb      	str	r3, [r7, #28]
			break;
 8000506:	e005      	b.n	8000514 <CAN_TxData+0x5c>
	for (int i = 0; i < 8; i++)
 8000508:	69bb      	ldr	r3, [r7, #24]
 800050a:	3301      	adds	r3, #1
 800050c:	61bb      	str	r3, [r7, #24]
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2b07      	cmp	r3, #7
 8000512:	dde0      	ble.n	80004d6 <CAN_TxData+0x1e>
		}

	/* Armazena o identificador da mensagem no struct de informação (TxHeader) */
	TxHeader.Identifier = Identifier;
 8000514:	89fb      	ldrh	r3, [r7, #14]
 8000516:	4a09      	ldr	r2, [pc, #36]	; (800053c <CAN_TxData+0x84>)
 8000518:	6013      	str	r3, [r2, #0]

	TxHeader.DataLength = Size_data;
 800051a:	4a08      	ldr	r2, [pc, #32]	; (800053c <CAN_TxData+0x84>)
 800051c:	69fb      	ldr	r3, [r7, #28]
 800051e:	60d3      	str	r3, [r2, #12]

	/* Envia os dados recebidos na chamada (data) pela CAN, de acordo com as informações de TxHeader */
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, (uint8_t*) pData)
 8000520:	697a      	ldr	r2, [r7, #20]
 8000522:	4906      	ldr	r1, [pc, #24]	; (800053c <CAN_TxData+0x84>)
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <CAN_TxData+0x88>)
 8000526:	f000 ff22 	bl	800136e <HAL_FDCAN_AddMessageToTxFifoQ>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <CAN_TxData+0x7c>
			!= HAL_OK) {
		/* Caso de errado, chama a função de erro */
		Error_Handler();
 8000530:	f000 f98a 	bl	8000848 <Error_Handler>
	}
}
 8000534:	bf00      	nop
 8000536:	3724      	adds	r7, #36	; 0x24
 8000538:	46bd      	mov	sp, r7
 800053a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053c:	24000864 	.word	0x24000864
 8000540:	240008b8 	.word	0x240008b8

08000544 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000548:	f000 fb36 	bl	8000bb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800054c:	f000 f81e 	bl	800058c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000550:	f000 f900 	bl	8000754 <MX_GPIO_Init>
	MX_FDCAN1_Init();
 8000554:	f000 f898 	bl	8000688 <MX_FDCAN1_Init>
	/* USER CODE BEGIN 2 */
	CAN_Init();
 8000558:	f7ff ff34 	bl	80003c4 <CAN_Init>

	TxData1 = var1;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <main+0x40>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff feb9 	bl	80002d8 <__aeabi_f2ulz>
 8000566:	4602      	mov	r2, r0
 8000568:	460b      	mov	r3, r1
 800056a:	4907      	ldr	r1, [pc, #28]	; (8000588 <main+0x44>)
 800056c:	e9c1 2300 	strd	r2, r3, [r1]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		CAN_TxData(100, TxData1);
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <main+0x44>)
 8000572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000576:	2064      	movs	r0, #100	; 0x64
 8000578:	f7ff ff9e 	bl	80004b8 <CAN_TxData>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(70);
 800057c:	2046      	movs	r0, #70	; 0x46
 800057e:	f000 fbad 	bl	8000cdc <HAL_Delay>
		CAN_TxData(100, TxData1);
 8000582:	e7f5      	b.n	8000570 <main+0x2c>
 8000584:	24000000 	.word	0x24000000
 8000588:	24000958 	.word	0x24000958

0800058c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b09c      	sub	sp, #112	; 0x70
 8000590:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000596:	224c      	movs	r2, #76	; 0x4c
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 f8a6 	bl	80046ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2220      	movs	r2, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 f8a0 	bl	80046ec <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80005ac:	2002      	movs	r0, #2
 80005ae:	f002 f813 	bl	80025d8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b32      	ldr	r3, [pc, #200]	; (8000680 <SystemClock_Config+0xf4>)
 80005b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005ba:	4a31      	ldr	r2, [pc, #196]	; (8000680 <SystemClock_Config+0xf4>)
 80005bc:	f023 0301 	bic.w	r3, r3, #1
 80005c0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <SystemClock_Config+0xf4>)
 80005c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	4b2d      	ldr	r3, [pc, #180]	; (8000684 <SystemClock_Config+0xf8>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <SystemClock_Config+0xf8>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <SystemClock_Config+0xf8>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80005e8:	bf00      	nop
 80005ea:	4b26      	ldr	r3, [pc, #152]	; (8000684 <SystemClock_Config+0xf8>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005f6:	d1f8      	bne.n	80005ea <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2340      	movs	r3, #64	; 0x40
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800060c:	2304      	movs	r3, #4
 800060e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000610:	230c      	movs	r3, #12
 8000612:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000618:	2304      	movs	r3, #4
 800061a:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000620:	230c      	movs	r3, #12
 8000622:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000624:	2300      	movs	r3, #0
 8000626:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062c:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800062e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000632:	4618      	mov	r0, r3
 8000634:	f002 f80a 	bl	800264c <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xb6>
		Error_Handler();
 800063e:	f000 f903 	bl	8000848 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000642:	233f      	movs	r3, #63	; 0x3f
 8000644:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fc1e 	bl	8002ea8 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xea>
		Error_Handler();
 8000672:	f000 f8e9 	bl	8000848 <Error_Handler>
	}
}
 8000676:	bf00      	nop
 8000678:	3770      	adds	r7, #112	; 0x70
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	58000400 	.word	0x58000400
 8000684:	58024800 	.word	0x58024800

08000688 <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN1_Init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 800068c:	4b2f      	ldr	r3, [pc, #188]	; (800074c <MX_FDCAN1_Init+0xc4>)
 800068e:	4a30      	ldr	r2, [pc, #192]	; (8000750 <MX_FDCAN1_Init+0xc8>)
 8000690:	601a      	str	r2, [r3, #0]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000692:	4b2e      	ldr	r3, [pc, #184]	; (800074c <MX_FDCAN1_Init+0xc4>)
 8000694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000698:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <MX_FDCAN1_Init+0xc4>)
 800069c:	2203      	movs	r2, #3
 800069e:	60da      	str	r2, [r3, #12]
	hfdcan1.Init.AutoRetransmission = DISABLE;
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 1;
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006b4:	2201      	movs	r2, #1
 80006b6:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 7;
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006ba:	2207      	movs	r2, #7
 80006bc:	619a      	str	r2, [r3, #24]
	hfdcan1.Init.NominalTimeSeg1 = 42;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006c0:	222a      	movs	r2, #42	; 0x2a
 80006c2:	61da      	str	r2, [r3, #28]
	hfdcan1.Init.NominalTimeSeg2 = 27;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006c6:	221b      	movs	r2, #27
 80006c8:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 2;
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 12;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan1.Init.DataTimeSeg1 = 12;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006d8:	220c      	movs	r2, #12
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan1.Init.DataTimeSeg2 = 12;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006de:	220c      	movs	r2, #12
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.MessageRAMOffset = 0;
 80006e2:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.StdFiltersNbr = 0;
 80006e8:	4b18      	ldr	r3, [pc, #96]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.ExtFiltersNbr = 0;
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006fa:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_FDCAN1_Init+0xc4>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_FDCAN1_Init+0xc4>)
 8000702:	2200      	movs	r2, #0
 8000704:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_FDCAN1_Init+0xc4>)
 8000708:	2204      	movs	r2, #4
 800070a:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan1.Init.RxBuffersNbr = 0;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_FDCAN1_Init+0xc4>)
 800070e:	2200      	movs	r2, #0
 8000710:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_FDCAN1_Init+0xc4>)
 8000714:	2204      	movs	r2, #4
 8000716:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan1.Init.TxEventsNbr = 0;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_FDCAN1_Init+0xc4>)
 800071a:	2200      	movs	r2, #0
 800071c:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan1.Init.TxBuffersNbr = 0;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_FDCAN1_Init+0xc4>)
 8000720:	2200      	movs	r2, #0
 8000722:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_FDCAN1_Init+0xc4>)
 8000726:	2201      	movs	r2, #1
 8000728:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_FDCAN1_Init+0xc4>)
 800072c:	2200      	movs	r2, #0
 800072e:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_FDCAN1_Init+0xc4>)
 8000732:	2204      	movs	r2, #4
 8000734:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_FDCAN1_Init+0xc4>)
 8000738:	f000 fc10 	bl	8000f5c <HAL_FDCAN_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_FDCAN1_Init+0xbe>
		Error_Handler();
 8000742:	f000 f881 	bl	8000848 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	240008b8 	.word	0x240008b8
 8000750:	4000a000 	.word	0x4000a000

08000754 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	4b34      	ldr	r3, [pc, #208]	; (800083c <MX_GPIO_Init+0xe8>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	4a32      	ldr	r2, [pc, #200]	; (800083c <MX_GPIO_Init+0xe8>)
 8000772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <MX_GPIO_Init+0xe8>)
 800077c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <MX_GPIO_Init+0xe8>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	4a2b      	ldr	r2, [pc, #172]	; (800083c <MX_GPIO_Init+0xe8>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <MX_GPIO_Init+0xe8>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b25      	ldr	r3, [pc, #148]	; (800083c <MX_GPIO_Init+0xe8>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a23      	ldr	r2, [pc, #140]	; (800083c <MX_GPIO_Init+0xe8>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_GPIO_Init+0xe8>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_GPIO_Init+0xe8>)
 80007c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_GPIO_Init+0xe8>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_GPIO_Init+0xe8>)
 80007d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007da:	f003 0310 	and.w	r3, r3, #16
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_14, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	f244 0101 	movw	r1, #16385	; 0x4001
 80007e8:	4815      	ldr	r0, [pc, #84]	; (8000840 <MX_GPIO_Init+0xec>)
 80007ea:	f001 fec1 	bl	8002570 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2102      	movs	r1, #2
 80007f2:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_GPIO_Init+0xf0>)
 80007f4:	f001 febc 	bl	8002570 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB0 PB14 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_14;
 80007f8:	f244 0301 	movw	r3, #16385	; 0x4001
 80007fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080a:	f107 0314 	add.w	r3, r7, #20
 800080e:	4619      	mov	r1, r3
 8000810:	480b      	ldr	r0, [pc, #44]	; (8000840 <MX_GPIO_Init+0xec>)
 8000812:	f001 fcfd 	bl	8002210 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000816:	2302      	movs	r3, #2
 8000818:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_GPIO_Init+0xf0>)
 800082e:	f001 fcef 	bl	8002210 <HAL_GPIO_Init>

}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	58024400 	.word	0x58024400
 8000840:	58020400 	.word	0x58020400
 8000844:	58021000 	.word	0x58021000

08000848 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000850:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000854:	4801      	ldr	r0, [pc, #4]	; (800085c <Error_Handler+0x14>)
 8000856:	f001 fea4 	bl	80025a2 <HAL_GPIO_TogglePin>
 800085a:	e7f9      	b.n	8000850 <Error_Handler+0x8>
 800085c:	58020400 	.word	0x58020400

08000860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_MspInit+0x30>)
 8000868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x30>)
 800086e:	f043 0302 	orr.w	r3, r3, #2
 8000872:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x30>)
 8000878:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800087c:	f003 0302 	and.w	r3, r3, #2
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	58024400 	.word	0x58024400

08000894 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0b8      	sub	sp, #224	; 0xe0
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	22bc      	movs	r2, #188	; 0xbc
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 ff19 	bl	80046ec <memset>
  if(hfdcan->Instance==FDCAN1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a29      	ldr	r2, [pc, #164]	; (8000964 <HAL_FDCAN_MspInit+0xd0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d14b      	bne.n	800095c <HAL_FDCAN_MspInit+0xc8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80008c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80008ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80008ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	4618      	mov	r0, r3
 80008d6:	f002 fe17 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80008e0:	f7ff ffb2 	bl	8000848 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008e4:	4b20      	ldr	r3, [pc, #128]	; (8000968 <HAL_FDCAN_MspInit+0xd4>)
 80008e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008ea:	4a1f      	ldr	r2, [pc, #124]	; (8000968 <HAL_FDCAN_MspInit+0xd4>)
 80008ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_FDCAN_MspInit+0xd4>)
 80008f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <HAL_FDCAN_MspInit+0xd4>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_FDCAN_MspInit+0xd4>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_FDCAN_MspInit+0xd4>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000920:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000924:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800093a:	2309      	movs	r3, #9
 800093c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000944:	4619      	mov	r1, r3
 8000946:	4809      	ldr	r0, [pc, #36]	; (800096c <HAL_FDCAN_MspInit+0xd8>)
 8000948:	f001 fc62 	bl	8002210 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2013      	movs	r0, #19
 8000952:	f000 face 	bl	8000ef2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000956:	2013      	movs	r0, #19
 8000958:	f000 fae5 	bl	8000f26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	37e0      	adds	r7, #224	; 0xe0
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	4000a000 	.word	0x4000a000
 8000968:	58024400 	.word	0x58024400
 800096c:	58020000 	.word	0x58020000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>
	...

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800097c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000980:	4801      	ldr	r0, [pc, #4]	; (8000988 <HardFault_Handler+0x10>)
 8000982:	f001 fe0e 	bl	80025a2 <HAL_GPIO_TogglePin>
 8000986:	e7f9      	b.n	800097c <HardFault_Handler+0x4>
 8000988:	58020400 	.word	0x58020400

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f966 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <FDCAN1_IT0_IRQHandler+0x10>)
 80009da:	f000 ff0b 	bl	80017f4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	240008b8 	.word	0x240008b8

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f003 fe20 	bl	800465c <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	24080000 	.word	0x24080000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	24000960 	.word	0x24000960
 8000a50:	24000978 	.word	0x24000978

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a58:	4b37      	ldr	r3, [pc, #220]	; (8000b38 <SystemInit+0xe4>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5e:	4a36      	ldr	r2, [pc, #216]	; (8000b38 <SystemInit+0xe4>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a68:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <SystemInit+0xe8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 030f 	and.w	r3, r3, #15
 8000a70:	2b06      	cmp	r3, #6
 8000a72:	d807      	bhi.n	8000a84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a74:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <SystemInit+0xe8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f023 030f 	bic.w	r3, r3, #15
 8000a7c:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <SystemInit+0xe8>)
 8000a7e:	f043 0307 	orr.w	r3, r3, #7
 8000a82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a84:	4b2e      	ldr	r3, [pc, #184]	; (8000b40 <SystemInit+0xec>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a2d      	ldr	r2, [pc, #180]	; (8000b40 <SystemInit+0xec>)
 8000a8a:	f043 0301 	orr.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a90:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <SystemInit+0xec>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <SystemInit+0xec>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4929      	ldr	r1, [pc, #164]	; (8000b40 <SystemInit+0xec>)
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <SystemInit+0xf0>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <SystemInit+0xe8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d007      	beq.n	8000abe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <SystemInit+0xe8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f023 030f 	bic.w	r3, r3, #15
 8000ab6:	4a21      	ldr	r2, [pc, #132]	; (8000b3c <SystemInit+0xe8>)
 8000ab8:	f043 0307 	orr.w	r3, r3, #7
 8000abc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <SystemInit+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <SystemInit+0xec>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <SystemInit+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <SystemInit+0xec>)
 8000ad2:	4a1d      	ldr	r2, [pc, #116]	; (8000b48 <SystemInit+0xf4>)
 8000ad4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <SystemInit+0xec>)
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <SystemInit+0xf8>)
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <SystemInit+0xec>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <SystemInit+0xfc>)
 8000ae0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <SystemInit+0xec>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <SystemInit+0xec>)
 8000aea:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <SystemInit+0xfc>)
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <SystemInit+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <SystemInit+0xec>)
 8000af6:	4a16      	ldr	r2, [pc, #88]	; (8000b50 <SystemInit+0xfc>)
 8000af8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <SystemInit+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <SystemInit+0xec>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <SystemInit+0xec>)
 8000b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <SystemInit+0xec>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <SystemInit+0x100>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <SystemInit+0x104>)
 8000b18:	4013      	ands	r3, r2
 8000b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b1e:	d202      	bcs.n	8000b26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <SystemInit+0x108>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <SystemInit+0x10c>)
 8000b28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00
 8000b3c:	52002000 	.word	0x52002000
 8000b40:	58024400 	.word	0x58024400
 8000b44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b48:	02020200 	.word	0x02020200
 8000b4c:	01ff0000 	.word	0x01ff0000
 8000b50:	01010280 	.word	0x01010280
 8000b54:	5c001000 	.word	0x5c001000
 8000b58:	ffff0000 	.word	0xffff0000
 8000b5c:	51008108 	.word	0x51008108
 8000b60:	52004000 	.word	0x52004000

08000b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b68:	f7ff ff74 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	; (8000ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	; (8000bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f003 fd69 	bl	8004668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b96:	f7ff fcd5 	bl	8000544 <main>
  bx  lr
 8000b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ba0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ba4:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000ba8:	08004984 	.word	0x08004984
  ldr r2, =_sbss
 8000bac:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000bb0:	24000978 	.word	0x24000978

08000bb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC3_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbe:	2003      	movs	r0, #3
 8000bc0:	f000 f98c 	bl	8000edc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bc4:	f002 fb26 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_Init+0x68>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	0a1b      	lsrs	r3, r3, #8
 8000bd0:	f003 030f 	and.w	r3, r3, #15
 8000bd4:	4913      	ldr	r1, [pc, #76]	; (8000c24 <HAL_Init+0x6c>)
 8000bd6:	5ccb      	ldrb	r3, [r1, r3]
 8000bd8:	f003 031f 	and.w	r3, r3, #31
 8000bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000be0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_Init+0x68>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <HAL_Init+0x6c>)
 8000bec:	5cd3      	ldrb	r3, [r2, r3]
 8000bee:	f003 031f 	and.w	r3, r3, #31
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_Init+0x70>)
 8000bfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bfc:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <HAL_Init+0x74>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c02:	200f      	movs	r0, #15
 8000c04:	f000 f814 	bl	8000c30 <HAL_InitTick>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e002      	b.n	8000c18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c12:	f7ff fe25 	bl	8000860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	58024400 	.word	0x58024400
 8000c24:	0800495c 	.word	0x0800495c
 8000c28:	24000008 	.word	0x24000008
 8000c2c:	24000004 	.word	0x24000004

08000c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_InitTick+0x60>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e021      	b.n	8000c88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_InitTick+0x64>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_InitTick+0x60>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f971 	bl	8000f42 <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f000 f93b 	bl	8000ef2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x68>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	24000010 	.word	0x24000010
 8000c94:	24000004 	.word	0x24000004
 8000c98:	2400000c 	.word	0x2400000c

08000c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_IncTick+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <HAL_IncTick+0x24>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	24000010 	.word	0x24000010
 8000cc0:	24000964 	.word	0x24000964

08000cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_GetTick+0x14>)
 8000cca:	681b      	ldr	r3, [r3, #0]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	24000964 	.word	0x24000964

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff ffee 	bl	8000cc4 <HAL_GetTick>
 8000ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d02:	bf00      	nop
 8000d04:	f7ff ffde 	bl	8000cc4 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	bf00      	nop
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	24000010 	.word	0x24000010

08000d24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetREVID+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0c1b      	lsrs	r3, r3, #16
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	5c001000 	.word	0x5c001000

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <__NVIC_SetPriorityGrouping+0x40>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	05fa0000 	.word	0x05fa0000

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ea8:	d301      	bcc.n	8000eae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00f      	b.n	8000ece <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <SysTick_Config+0x40>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f7ff ff8e 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <SysTick_Config+0x40>)
 8000ec8:	2207      	movs	r2, #7
 8000eca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	e000e010 	.word	0xe000e010

08000edc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff29 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	4603      	mov	r3, r0
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f00:	f7ff ff40 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000f04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	68b9      	ldr	r1, [r7, #8]
 8000f0a:	6978      	ldr	r0, [r7, #20]
 8000f0c:	f7ff ff90 	bl	8000e30 <NVIC_EncodePriority>
 8000f10:	4602      	mov	r2, r0
 8000f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff5f 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff33 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ffa4 	bl	8000e98 <SysTick_Config>
 8000f50:	4603      	mov	r3, r0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b098      	sub	sp, #96	; 0x60
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000f64:	4a84      	ldr	r2, [pc, #528]	; (8001178 <HAL_FDCAN_Init+0x21c>)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	224c      	movs	r2, #76	; 0x4c
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f003 fbae 	bl	80046d0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e1c6      	b.n	800130c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7e      	ldr	r2, [pc, #504]	; (800117c <HAL_FDCAN_Init+0x220>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d106      	bne.n	8000f96 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fc72 	bl	8000894 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	699a      	ldr	r2, [r3, #24]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0210 	bic.w	r2, r2, #16
 8000fbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc0:	f7ff fe80 	bl	8000cc4 <HAL_GetTick>
 8000fc4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fc6:	e014      	b.n	8000ff2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fc8:	f7ff fe7c 	bl	8000cc4 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b0a      	cmp	r3, #10
 8000fd4:	d90d      	bls.n	8000ff2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e18c      	b.n	800130c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d0e3      	beq.n	8000fc8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001010:	f7ff fe58 	bl	8000cc4 <HAL_GetTick>
 8001014:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001016:	e014      	b.n	8001042 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001018:	f7ff fe54 	bl	8000cc4 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b0a      	cmp	r3, #10
 8001024:	d90d      	bls.n	8001042 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2203      	movs	r2, #3
 800103a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e164      	b.n	800130c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0e3      	beq.n	8001018 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0202 	orr.w	r2, r2, #2
 800105e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7c1b      	ldrb	r3, [r3, #16]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	699a      	ldr	r2, [r3, #24]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001076:	619a      	str	r2, [r3, #24]
 8001078:	e007      	b.n	800108a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699a      	ldr	r2, [r3, #24]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001088:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7c5b      	ldrb	r3, [r3, #17]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	699a      	ldr	r2, [r3, #24]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010a0:	619a      	str	r2, [r3, #24]
 80010a2:	e007      	b.n	80010b4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	699a      	ldr	r2, [r3, #24]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010b2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7c9b      	ldrb	r3, [r3, #18]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d108      	bne.n	80010ce <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	699a      	ldr	r2, [r3, #24]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010ca:	619a      	str	r2, [r3, #24]
 80010cc:	e007      	b.n	80010de <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	699a      	ldr	r2, [r3, #24]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010dc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	430a      	orrs	r2, r1
 80010f2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	699a      	ldr	r2, [r3, #24]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001102:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0210 	bic.w	r2, r2, #16
 8001112:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d108      	bne.n	800112e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	699a      	ldr	r2, [r3, #24]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f042 0204 	orr.w	r2, r2, #4
 800112a:	619a      	str	r2, [r3, #24]
 800112c:	e030      	b.n	8001190 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02c      	beq.n	8001190 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d020      	beq.n	8001180 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800114c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0210 	orr.w	r2, r2, #16
 800115c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d114      	bne.n	8001190 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f042 0220 	orr.w	r2, r2, #32
 8001174:	619a      	str	r2, [r3, #24]
 8001176:	e00b      	b.n	8001190 <HAL_FDCAN_Init+0x234>
 8001178:	08004910 	.word	0x08004910
 800117c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	699a      	ldr	r2, [r3, #24]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0220 	orr.w	r2, r2, #32
 800118e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	3b01      	subs	r3, #1
 8001196:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	3b01      	subs	r3, #1
 800119e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011a0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011a8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011b8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011ba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011c4:	d115      	bne.n	80011f2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	3b01      	subs	r3, #1
 80011d2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80011d4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	3b01      	subs	r3, #1
 80011dc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80011de:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	3b01      	subs	r3, #1
 80011e8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80011ee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80011f0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00a      	beq.n	8001210 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	430a      	orrs	r2, r1
 800120c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001218:	4413      	add	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d011      	beq.n	8001242 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001226:	f023 0107 	bic.w	r1, r3, #7
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	3360      	adds	r3, #96	; 0x60
 8001232:	443b      	add	r3, r7
 8001234:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	2b00      	cmp	r3, #0
 8001248:	d011      	beq.n	800126e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001252:	f023 0107 	bic.w	r1, r3, #7
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	3360      	adds	r3, #96	; 0x60
 800125e:	443b      	add	r3, r7
 8001260:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001272:	2b00      	cmp	r3, #0
 8001274:	d012      	beq.n	800129c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800127e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	3360      	adds	r3, #96	; 0x60
 800128a:	443b      	add	r3, r7
 800128c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001290:	011a      	lsls	r2, r3, #4
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d012      	beq.n	80012ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80012ac:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	3360      	adds	r3, #96	; 0x60
 80012b8:	443b      	add	r3, r7
 80012ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80012be:	021a      	lsls	r2, r3, #8
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a11      	ldr	r2, [pc, #68]	; (8001314 <HAL_FDCAN_Init+0x3b8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d107      	bne.n	80012e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f022 0203 	bic.w	r2, r2, #3
 80012e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fd83 	bl	8001e08 <FDCAN_CalcultateRamBlockAddresses>
 8001302:	4603      	mov	r3, r0
 8001304:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001308:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800130c:	4618      	mov	r0, r3
 800130e:	3760      	adds	r7, #96	; 0x60
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	4000a000 	.word	0x4000a000

08001318 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d111      	bne.n	8001350 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2202      	movs	r2, #2
 8001330:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	699a      	ldr	r2, [r3, #24]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	e008      	b.n	8001362 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001356:	f043 0204 	orr.w	r2, r3, #4
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
  }
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d141      	bne.n	800140a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800138e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800139c:	f043 0220 	orr.w	r2, r3, #32
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e038      	b.n	800141c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e026      	b.n	800141c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80013d6:	0c1b      	lsrs	r3, r3, #16
 80013d8:	f003 031f 	and.w	r3, r3, #31
 80013dc:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	68b9      	ldr	r1, [r7, #8]
 80013e4:	68f8      	ldr	r0, [r7, #12]
 80013e6:	f000 fe95 	bl	8002114 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2101      	movs	r1, #1
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80013fa:	2201      	movs	r2, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e008      	b.n	800141c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001410:	f043 0208 	orr.w	r2, r3, #8
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
  }
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001424:	b480      	push	{r7}
 8001426:	b08b      	sub	sp, #44	; 0x2c
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800143c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800143e:	7efb      	ldrb	r3, [r7, #27]
 8001440:	2b02      	cmp	r3, #2
 8001442:	f040 814b 	bne.w	80016dc <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2b40      	cmp	r3, #64	; 0x40
 800144a:	d14d      	bne.n	80014e8 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001454:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d109      	bne.n	8001470 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001462:	f043 0220 	orr.w	r2, r3, #32
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e13e      	b.n	80016ee <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001486:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e12c      	b.n	80016ee <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800149c:	0e1b      	lsrs	r3, r3, #24
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d10b      	bne.n	80014be <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014ae:	0fdb      	lsrs	r3, r3, #31
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014b8:	d101      	bne.n	80014be <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	4413      	add	r3, r2
 80014d0:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	69f9      	ldr	r1, [r7, #28]
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
 80014e6:	e069      	b.n	80015bc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b41      	cmp	r3, #65	; 0x41
 80014ec:	d14d      	bne.n	800158a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80014f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001504:	f043 0220 	orr.w	r2, r3, #32
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0ed      	b.n	80016ee <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800151a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001528:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0db      	b.n	80016ee <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800153e:	0e1b      	lsrs	r3, r3, #24
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d10b      	bne.n	8001560 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001550:	0fdb      	lsrs	r3, r3, #31
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800155a:	d101      	bne.n	8001560 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	4413      	add	r3, r2
 8001572:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	69f9      	ldr	r1, [r7, #28]
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
 8001588:	e018      	b.n	80015bc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	429a      	cmp	r2, r3
 8001592:	d309      	bcc.n	80015a8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800159a:	f043 0220 	orr.w	r2, r3, #32
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0a2      	b.n	80016ee <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	4413      	add	r3, r2
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0c9b      	lsrs	r3, r3, #18
 80015d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e005      	b.n	80015ec <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	3304      	adds	r3, #4
 8001608:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	0e1b      	lsrs	r3, r3, #24
 800163e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	0fda      	lsrs	r2, r3, #31
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	3304      	adds	r3, #4
 8001654:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
 800165e:	e00a      	b.n	8001676 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	441a      	add	r2, r3
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	440b      	add	r3, r1
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	3301      	adds	r3, #1
 8001674:	623b      	str	r3, [r7, #32]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	0c1b      	lsrs	r3, r3, #16
 800167c:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_FDCAN_GetRxMessage+0x2d8>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	461a      	mov	r2, r3
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	4293      	cmp	r3, r2
 8001686:	d3eb      	bcc.n	8001660 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b40      	cmp	r3, #64	; 0x40
 800168c:	d105      	bne.n	800169a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69fa      	ldr	r2, [r7, #28]
 8001694:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001698:	e01e      	b.n	80016d8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	2b41      	cmp	r3, #65	; 0x41
 800169e:	d105      	bne.n	80016ac <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80016aa:	e015      	b.n	80016d8 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b1f      	cmp	r3, #31
 80016b0:	d808      	bhi.n	80016c4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2101      	movs	r1, #1
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	fa01 f202 	lsl.w	r2, r1, r2
 80016be:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80016c2:	e009      	b.n	80016d8 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	f003 021f 	and.w	r2, r3, #31
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e008      	b.n	80016ee <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016e2:	f043 0208 	orr.w	r2, r3, #8
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
  }
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	372c      	adds	r7, #44	; 0x2c
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	0800496c 	.word	0x0800496c

08001700 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001712:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d002      	beq.n	8001720 <HAL_FDCAN_ActivateNotification+0x20>
 800171a:	7dfb      	ldrb	r3, [r7, #23]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d155      	bne.n	80017cc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d108      	bne.n	8001740 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0201 	orr.w	r2, r2, #1
 800173c:	65da      	str	r2, [r3, #92]	; 0x5c
 800173e:	e014      	b.n	800176a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	4013      	ands	r3, r2
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	429a      	cmp	r2, r3
 800174e:	d108      	bne.n	8001762 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0202 	orr.w	r2, r2, #2
 800175e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001760:	e003      	b.n	800176a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2203      	movs	r2, #3
 8001768:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001770:	2b00      	cmp	r3, #0
 8001772:	d009      	beq.n	8001788 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	430a      	orrs	r2, r1
 8001784:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178e:	2b00      	cmp	r3, #0
 8001790:	d009      	beq.n	80017a6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_FDCAN_ActivateNotification+0xec>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	430b      	orrs	r3, r1
 80017b8:	6553      	str	r3, [r2, #84]	; 0x54
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	0f9b      	lsrs	r3, r3, #30
 80017c2:	490b      	ldr	r1, [pc, #44]	; (80017f0 <HAL_FDCAN_ActivateNotification+0xf0>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	e008      	b.n	80017de <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80017d2:	f043 0202 	orr.w	r2, r3, #2
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	3fcfffff 	.word	0x3fcfffff
 80017f0:	4000a800 	.word	0x4000a800

080017f4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b096      	sub	sp, #88	; 0x58
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80017fc:	4b9a      	ldr	r3, [pc, #616]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	079b      	lsls	r3, r3, #30
 8001802:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001804:	4b98      	ldr	r3, [pc, #608]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	079b      	lsls	r3, r3, #30
 800180a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800180c:	4013      	ands	r3, r2
 800180e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001816:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800181a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001824:	4013      	ands	r3, r2
 8001826:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800183c:	4013      	ands	r3, r2
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001854:	4013      	ands	r3, r2
 8001856:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8001862:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800186c:	4013      	ands	r3, r2
 800186e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001876:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800187a:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001884:	4013      	ands	r3, r2
 8001886:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800189a:	0a1b      	lsrs	r3, r3, #8
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d010      	beq.n	80018c6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80018a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b8:	651a      	str	r2, [r3, #80]	; 0x50
 80018ba:	4b6b      	ldr	r3, [pc, #428]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 fa54 	bl	8001d6e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80018c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c8:	0a9b      	lsrs	r3, r3, #10
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d01d      	beq.n	800190e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80018d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d4:	0a9b      	lsrs	r3, r3, #10
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80018e6:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80018f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018f2:	4013      	ands	r3, r2
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018fe:	651a      	str	r2, [r3, #80]	; 0x50
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001906:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fa07 	bl	8001d1c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800190e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00d      	beq.n	8001930 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800191a:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <HAL_FDCAN_IRQHandler+0x278>)
 800191c:	400b      	ands	r3, r1
 800191e:	6513      	str	r3, [r2, #80]	; 0x50
 8001920:	4a51      	ldr	r2, [pc, #324]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001924:	0f9b      	lsrs	r3, r3, #30
 8001926:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f9c0 	bl	8001cb0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00d      	beq.n	8001952 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800193c:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <HAL_FDCAN_IRQHandler+0x278>)
 800193e:	400b      	ands	r3, r1
 8001940:	6513      	str	r3, [r2, #80]	; 0x50
 8001942:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001946:	0f9b      	lsrs	r3, r3, #30
 8001948:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800194a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 f9ba 	bl	8001cc6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00d      	beq.n	8001974 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_FDCAN_IRQHandler+0x278>)
 8001960:	400b      	ands	r3, r1
 8001962:	6513      	str	r3, [r2, #80]	; 0x50
 8001964:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001968:	0f9b      	lsrs	r3, r3, #30
 800196a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800196c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7fe fcd2 	bl	8000318 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00d      	beq.n	8001996 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <HAL_FDCAN_IRQHandler+0x278>)
 8001982:	400b      	ands	r3, r1
 8001984:	6513      	str	r3, [r2, #80]	; 0x50
 8001986:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800198a:	0f9b      	lsrs	r3, r3, #30
 800198c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800198e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 f9a3 	bl	8001cdc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001998:	0adb      	lsrs	r3, r3, #11
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d010      	beq.n	80019c4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a4:	0adb      	lsrs	r3, r3, #11
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00a      	beq.n	80019c4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f997 	bl	8001cf2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80019c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019c6:	0a5b      	lsrs	r3, r3, #9
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01d      	beq.n	8001a0c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80019d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d2:	0a5b      	lsrs	r3, r3, #9
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d017      	beq.n	8001a0c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019e4:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019f0:	4013      	ands	r3, r2
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fc:	651a      	str	r2, [r3, #80]	; 0x50
 80019fe:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f97d 	bl	8001d06 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0e:	0cdb      	lsrs	r3, r3, #19
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	0cdb      	lsrs	r3, r3, #19
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00a      	beq.n	8001a3a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a2c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f97c 	bl	8001d32 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d016      	beq.n	8001a74 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001a5c:	4b02      	ldr	r3, [pc, #8]	; (8001a68 <HAL_FDCAN_IRQHandler+0x274>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	e004      	b.n	8001a70 <HAL_FDCAN_IRQHandler+0x27c>
 8001a66:	bf00      	nop
 8001a68:	4000a800 	.word	0x4000a800
 8001a6c:	3fcfffff 	.word	0x3fcfffff
 8001a70:	f000 f969 	bl	8001d46 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a76:	0c9b      	lsrs	r3, r3, #18
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a82:	0c9b      	lsrs	r3, r3, #18
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00a      	beq.n	8001aa2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a94:	651a      	str	r2, [r3, #80]	; 0x50
 8001a96:	4b83      	ldr	r3, [pc, #524]	; (8001ca4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f95c 	bl	8001d5a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aa4:	0c5b      	lsrs	r3, r3, #17
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d015      	beq.n	8001ada <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab0:	0c5b      	lsrs	r3, r3, #17
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00f      	beq.n	8001ada <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ac2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ac4:	4b77      	ldr	r3, [pc, #476]	; (8001ca4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001ada:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00d      	beq.n	8001afc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001ae6:	4b70      	ldr	r3, [pc, #448]	; (8001ca8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001ae8:	400b      	ands	r3, r1
 8001aea:	6513      	str	r3, [r2, #80]	; 0x50
 8001aec:	4a6d      	ldr	r2, [pc, #436]	; (8001ca4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af0:	0f9b      	lsrs	r3, r3, #30
 8001af2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f94d 	bl	8001d96 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d011      	beq.n	8001b26 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b08:	4b67      	ldr	r3, [pc, #412]	; (8001ca8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001b0a:	400b      	ands	r3, r1
 8001b0c:	6513      	str	r3, [r2, #80]	; 0x50
 8001b0e:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b12:	0f9b      	lsrs	r3, r3, #30
 8001b14:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a60      	ldr	r2, [pc, #384]	; (8001cac <HAL_FDCAN_IRQHandler+0x4b8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	f040 80ac 	bne.w	8001c8a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80a4 	beq.w	8001c8a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b56:	4013      	ands	r3, r2
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b6e:	4013      	ands	r3, r2
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b86:	4013      	ands	r3, r2
 8001b88:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001b94:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001bac:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8e6 	bl	8001dac <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8e6 	bl	8001dc2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01a      	beq.n	8001c38 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d014      	beq.n	8001c38 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c24:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2240      	movs	r2, #64	; 0x40
 8001c2c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	6939      	ldr	r1, [r7, #16]
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8d0 	bl	8001dd8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c44:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001c46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f8d1 	bl	8001df0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001c4e:	6a3b      	ldr	r3, [r7, #32]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00b      	beq.n	8001c6c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	6a3a      	ldr	r2, [r7, #32]
 8001c5a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f874 	bl	8001d82 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3758      	adds	r7, #88	; 0x58
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	4000a800 	.word	0x4000a800
 8001ca8:	3fcfffff 	.word	0x3fcfffff
 8001cac:	4000a000 	.word	0x4000a000

08001cb0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e14:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e1e:	4ba7      	ldr	r3, [pc, #668]	; (80020bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	0091      	lsls	r1, r2, #2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	430b      	orrs	r3, r1
 8001e2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e38:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	041a      	lsls	r2, r3, #16
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	4413      	add	r3, r2
 8001e54:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e5e:	4b97      	ldr	r3, [pc, #604]	; (80020bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	0091      	lsls	r1, r2, #2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e78:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e80:	041a      	lsls	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	4413      	add	r3, r2
 8001e96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001ea0:	4b86      	ldr	r3, [pc, #536]	; (80020bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	68ba      	ldr	r2, [r7, #8]
 8001ea6:	0091      	lsls	r1, r2, #2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001eba:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	041a      	lsls	r2, r3, #16
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4413      	add	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ee8:	4b74      	ldr	r3, [pc, #464]	; (80020bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	0091      	lsls	r1, r2, #2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f02:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f0a:	041a      	lsls	r2, r3, #16
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f1e:	fb02 f303 	mul.w	r3, r2, r3
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	4413      	add	r3, r2
 8001f26:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001f30:	4b62      	ldr	r3, [pc, #392]	; (80020bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	0091      	lsls	r1, r2, #2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	4413      	add	r3, r2
 8001f52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	0091      	lsls	r1, r2, #2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6812      	ldr	r2, [r2, #0]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f76:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	041a      	lsls	r2, r3, #16
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	4413      	add	r3, r2
 8001f94:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	0091      	lsls	r1, r2, #2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	430b      	orrs	r3, r1
 8001fac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fb8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	041a      	lsls	r2, r3, #16
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fd4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fdc:	061a      	lsls	r2, r3, #24
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fec:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	009a      	lsls	r2, r3, #2
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	441a      	add	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	441a      	add	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	441a      	add	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	441a      	add	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	441a      	add	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	441a      	add	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	441a      	add	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	441a      	add	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d915      	bls.n	80020e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80020b8:	e006      	b.n	80020c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80020ba:	bf00      	nop
 80020bc:	ffff0003 	.word	0xffff0003
 80020c0:	10002b00 	.word	0x10002b00
 80020c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020ce:	f043 0220 	orr.w	r2, r3, #32
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2203      	movs	r2, #3
 80020dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e010      	b.n	8002106 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e005      	b.n	80020f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3304      	adds	r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	429a      	cmp	r2, r3
 8002102:	d3f3      	bcc.n	80020ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop

08002114 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10a      	bne.n	8002140 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002132:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800213a:	4313      	orrs	r3, r2
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	e00a      	b.n	8002156 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002148:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800214e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002150:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002154:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002160:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002166:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800216c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002172:	4313      	orrs	r3, r2
 8002174:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002180:	6839      	ldr	r1, [r7, #0]
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	3304      	adds	r3, #4
 8002196:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	3304      	adds	r3, #4
 80021a2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e020      	b.n	80021ec <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3303      	adds	r3, #3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3302      	adds	r3, #2
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	440b      	add	r3, r1
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80021c2:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	440b      	add	r3, r1
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80021d0:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	440a      	add	r2, r1
 80021d8:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80021da:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	3304      	adds	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3304      	adds	r3, #4
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	4a06      	ldr	r2, [pc, #24]	; (800220c <FDCAN_CopyMessageToRAM+0xf8>)
 80021f4:	5cd3      	ldrb	r3, [r2, r3]
 80021f6:	461a      	mov	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d3d5      	bcc.n	80021aa <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	3724      	adds	r7, #36	; 0x24
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	0800496c 	.word	0x0800496c

08002210 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800221e:	4b89      	ldr	r3, [pc, #548]	; (8002444 <HAL_GPIO_Init+0x234>)
 8002220:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002222:	e194      	b.n	800254e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8186 	beq.w	8002548 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d005      	beq.n	8002254 <HAL_GPIO_Init+0x44>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d130      	bne.n	80022b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800228a:	2201      	movs	r2, #1
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	f003 0201 	and.w	r2, r3, #1
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b03      	cmp	r3, #3
 80022c0:	d017      	beq.n	80022f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d123      	bne.n	8002346 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	08da      	lsrs	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3208      	adds	r2, #8
 8002306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	08da      	lsrs	r2, r3, #3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3208      	adds	r2, #8
 8002340:	69b9      	ldr	r1, [r7, #24]
 8002342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	2203      	movs	r2, #3
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0203 	and.w	r2, r3, #3
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 80e0 	beq.w	8002548 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <HAL_GPIO_Init+0x238>)
 800238a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800238e:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <HAL_GPIO_Init+0x238>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002398:	4b2b      	ldr	r3, [pc, #172]	; (8002448 <HAL_GPIO_Init+0x238>)
 800239a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023a6:	4a29      	ldr	r2, [pc, #164]	; (800244c <HAL_GPIO_Init+0x23c>)
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	220f      	movs	r2, #15
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a20      	ldr	r2, [pc, #128]	; (8002450 <HAL_GPIO_Init+0x240>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d052      	beq.n	8002478 <HAL_GPIO_Init+0x268>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <HAL_GPIO_Init+0x244>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d031      	beq.n	800243e <HAL_GPIO_Init+0x22e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_GPIO_Init+0x248>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02b      	beq.n	800243a <HAL_GPIO_Init+0x22a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_GPIO_Init+0x24c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d025      	beq.n	8002436 <HAL_GPIO_Init+0x226>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a1c      	ldr	r2, [pc, #112]	; (8002460 <HAL_GPIO_Init+0x250>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d01f      	beq.n	8002432 <HAL_GPIO_Init+0x222>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <HAL_GPIO_Init+0x254>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d019      	beq.n	800242e <HAL_GPIO_Init+0x21e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a1a      	ldr	r2, [pc, #104]	; (8002468 <HAL_GPIO_Init+0x258>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d013      	beq.n	800242a <HAL_GPIO_Init+0x21a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_GPIO_Init+0x25c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d00d      	beq.n	8002426 <HAL_GPIO_Init+0x216>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_GPIO_Init+0x260>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d007      	beq.n	8002422 <HAL_GPIO_Init+0x212>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_GPIO_Init+0x264>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_GPIO_Init+0x20e>
 800241a:	2309      	movs	r3, #9
 800241c:	e02d      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800241e:	230a      	movs	r3, #10
 8002420:	e02b      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002422:	2308      	movs	r3, #8
 8002424:	e029      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002426:	2307      	movs	r3, #7
 8002428:	e027      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800242a:	2306      	movs	r3, #6
 800242c:	e025      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800242e:	2305      	movs	r3, #5
 8002430:	e023      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002432:	2304      	movs	r3, #4
 8002434:	e021      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002436:	2303      	movs	r3, #3
 8002438:	e01f      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800243a:	2302      	movs	r3, #2
 800243c:	e01d      	b.n	800247a <HAL_GPIO_Init+0x26a>
 800243e:	2301      	movs	r3, #1
 8002440:	e01b      	b.n	800247a <HAL_GPIO_Init+0x26a>
 8002442:	bf00      	nop
 8002444:	58000080 	.word	0x58000080
 8002448:	58024400 	.word	0x58024400
 800244c:	58000400 	.word	0x58000400
 8002450:	58020000 	.word	0x58020000
 8002454:	58020400 	.word	0x58020400
 8002458:	58020800 	.word	0x58020800
 800245c:	58020c00 	.word	0x58020c00
 8002460:	58021000 	.word	0x58021000
 8002464:	58021400 	.word	0x58021400
 8002468:	58021800 	.word	0x58021800
 800246c:	58021c00 	.word	0x58021c00
 8002470:	58022000 	.word	0x58022000
 8002474:	58022400 	.word	0x58022400
 8002478:	2300      	movs	r3, #0
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	0092      	lsls	r2, r2, #2
 8002482:	4093      	lsls	r3, r2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800248a:	4938      	ldr	r1, [pc, #224]	; (800256c <HAL_GPIO_Init+0x35c>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80024be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	3301      	adds	r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	f47f ae63 	bne.w	8002224 <HAL_GPIO_Init+0x14>
  }
}
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3724      	adds	r7, #36	; 0x24
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	58000400 	.word	0x58000400

08002570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800258c:	e003      	b.n	8002596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800258e:	887b      	ldrh	r3, [r7, #2]
 8002590:	041a      	lsls	r2, r3, #16
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	619a      	str	r2, [r3, #24]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b085      	sub	sp, #20
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	460b      	mov	r3, r1
 80025ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b4:	887a      	ldrh	r2, [r7, #2]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4013      	ands	r3, r2
 80025ba:	041a      	lsls	r2, r3, #16
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43d9      	mvns	r1, r3
 80025c0:	887b      	ldrh	r3, [r7, #2]
 80025c2:	400b      	ands	r3, r1
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_PWREx_ConfigSupply+0x70>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d00a      	beq.n	8002602 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_PWREx_ConfigSupply+0x70>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e01f      	b.n	800263e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e01d      	b.n	800263e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_PWREx_ConfigSupply+0x70>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	490f      	ldr	r1, [pc, #60]	; (8002648 <HAL_PWREx_ConfigSupply+0x70>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4313      	orrs	r3, r2
 8002610:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002612:	f7fe fb57 	bl	8000cc4 <HAL_GetTick>
 8002616:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002618:	e009      	b.n	800262e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800261a:	f7fe fb53 	bl	8000cc4 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002628:	d901      	bls.n	800262e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e007      	b.n	800263e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_PWREx_ConfigSupply+0x70>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263a:	d1ee      	bne.n	800261a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	58024800 	.word	0x58024800

0800264c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08c      	sub	sp, #48	; 0x30
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d102      	bne.n	8002660 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	f000 bc1d 	b.w	8002e9a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 8087 	beq.w	800277c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800266e:	4b99      	ldr	r3, [pc, #612]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002678:	4b96      	ldr	r3, [pc, #600]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002680:	2b10      	cmp	r3, #16
 8002682:	d007      	beq.n	8002694 <HAL_RCC_OscConfig+0x48>
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002686:	2b18      	cmp	r3, #24
 8002688:	d110      	bne.n	80026ac <HAL_RCC_OscConfig+0x60>
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d10b      	bne.n	80026ac <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	4b8f      	ldr	r3, [pc, #572]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d06c      	beq.n	800277a <HAL_RCC_OscConfig+0x12e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d168      	bne.n	800277a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e3f6      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x78>
 80026b6:	4b87      	ldr	r3, [pc, #540]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a86      	ldr	r2, [pc, #536]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e02e      	b.n	8002722 <HAL_RCC_OscConfig+0xd6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x9a>
 80026cc:	4b81      	ldr	r3, [pc, #516]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a80      	ldr	r2, [pc, #512]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b7e      	ldr	r3, [pc, #504]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a7d      	ldr	r2, [pc, #500]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	e01d      	b.n	8002722 <HAL_RCC_OscConfig+0xd6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026ee:	d10c      	bne.n	800270a <HAL_RCC_OscConfig+0xbe>
 80026f0:	4b78      	ldr	r3, [pc, #480]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a77      	ldr	r2, [pc, #476]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a74      	ldr	r2, [pc, #464]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e00b      	b.n	8002722 <HAL_RCC_OscConfig+0xd6>
 800270a:	4b72      	ldr	r3, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a71      	ldr	r2, [pc, #452]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800271c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d013      	beq.n	8002752 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe facb 	bl	8000cc4 <HAL_GetTick>
 800272e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002732:	f7fe fac7 	bl	8000cc4 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e3aa      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002744:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f0      	beq.n	8002732 <HAL_RCC_OscConfig+0xe6>
 8002750:	e014      	b.n	800277c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fab7 	bl	8000cc4 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275a:	f7fe fab3 	bl	8000cc4 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b64      	cmp	r3, #100	; 0x64
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e396      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x10e>
 8002778:	e000      	b.n	800277c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80cb 	beq.w	8002920 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	4b52      	ldr	r3, [pc, #328]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002792:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002794:	4b4f      	ldr	r3, [pc, #316]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <HAL_RCC_OscConfig+0x164>
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2b18      	cmp	r3, #24
 80027a4:	d156      	bne.n	8002854 <HAL_RCC_OscConfig+0x208>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d151      	bne.n	8002854 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027b0:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_OscConfig+0x17c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e368      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027c8:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 0219 	bic.w	r2, r3, #25
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	493f      	ldr	r1, [pc, #252]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027da:	f7fe fa73 	bl	8000cc4 <HAL_GetTick>
 80027de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fa6f 	bl	8000cc4 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e352      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f4:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	f7fe fa90 	bl	8000d24 <HAL_GetREVID>
 8002804:	4603      	mov	r3, r0
 8002806:	f241 0203 	movw	r2, #4099	; 0x1003
 800280a:	4293      	cmp	r3, r2
 800280c:	d817      	bhi.n	800283e <HAL_RCC_OscConfig+0x1f2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	d108      	bne.n	8002828 <HAL_RCC_OscConfig+0x1dc>
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800281e:	4a2d      	ldr	r2, [pc, #180]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002824:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002826:	e07b      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	031b      	lsls	r3, r3, #12
 8002836:	4927      	ldr	r1, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283c:	e070      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	4921      	ldr	r1, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002852:	e065      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d048      	beq.n	80028ee <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 0219 	bic.w	r2, r3, #25
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	491a      	ldr	r1, [pc, #104]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fe fa29 	bl	8000cc4 <HAL_GetTick>
 8002872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002876:	f7fe fa25 	bl	8000cc4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e308      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	f7fe fa46 	bl	8000d24 <HAL_GetREVID>
 8002898:	4603      	mov	r3, r0
 800289a:	f241 0203 	movw	r2, #4099	; 0x1003
 800289e:	4293      	cmp	r3, r2
 80028a0:	d81a      	bhi.n	80028d8 <HAL_RCC_OscConfig+0x28c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d108      	bne.n	80028bc <HAL_RCC_OscConfig+0x270>
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80028b2:	4a08      	ldr	r2, [pc, #32]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80028b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b8:	6053      	str	r3, [r2, #4]
 80028ba:	e031      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	031b      	lsls	r3, r3, #12
 80028ca:	4902      	ldr	r1, [pc, #8]	; (80028d4 <HAL_RCC_OscConfig+0x288>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
 80028d0:	e026      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
 80028d2:	bf00      	nop
 80028d4:	58024400 	.word	0x58024400
 80028d8:	4b9a      	ldr	r3, [pc, #616]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	061b      	lsls	r3, r3, #24
 80028e6:	4997      	ldr	r1, [pc, #604]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
 80028ec:	e018      	b.n	8002920 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ee:	4b95      	ldr	r3, [pc, #596]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a94      	ldr	r2, [pc, #592]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	f023 0301 	bic.w	r3, r3, #1
 80028f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fa:	f7fe f9e3 	bl	8000cc4 <HAL_GetTick>
 80028fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002902:	f7fe f9df 	bl	8000cc4 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e2c2      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002914:	4b8b      	ldr	r3, [pc, #556]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f0      	bne.n	8002902 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a9 	beq.w	8002a80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800292e:	4b85      	ldr	r3, [pc, #532]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002936:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002938:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d007      	beq.n	8002954 <HAL_RCC_OscConfig+0x308>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b18      	cmp	r3, #24
 8002948:	d13a      	bne.n	80029c0 <HAL_RCC_OscConfig+0x374>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d135      	bne.n	80029c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002954:	4b7b      	ldr	r3, [pc, #492]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x320>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b80      	cmp	r3, #128	; 0x80
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e296      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296c:	f7fe f9da 	bl	8000d24 <HAL_GetREVID>
 8002970:	4603      	mov	r3, r0
 8002972:	f241 0203 	movw	r2, #4099	; 0x1003
 8002976:	4293      	cmp	r3, r2
 8002978:	d817      	bhi.n	80029aa <HAL_RCC_OscConfig+0x35e>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	2b20      	cmp	r3, #32
 8002980:	d108      	bne.n	8002994 <HAL_RCC_OscConfig+0x348>
 8002982:	4b70      	ldr	r3, [pc, #448]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800298a:	4a6e      	ldr	r2, [pc, #440]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 800298c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002990:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002992:	e075      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002994:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	069b      	lsls	r3, r3, #26
 80029a2:	4968      	ldr	r1, [pc, #416]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a8:	e06a      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029aa:	4b66      	ldr	r3, [pc, #408]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	4962      	ldr	r1, [pc, #392]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029be:	e05f      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d042      	beq.n	8002a4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029c8:	4b5e      	ldr	r3, [pc, #376]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5d      	ldr	r2, [pc, #372]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe f976 	bl	8000cc4 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029dc:	f7fe f972 	bl	8000cc4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e255      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ee:	4b55      	ldr	r3, [pc, #340]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fa:	f7fe f993 	bl	8000d24 <HAL_GetREVID>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d817      	bhi.n	8002a38 <HAL_RCC_OscConfig+0x3ec>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d108      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3d6>
 8002a10:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a18:	4a4a      	ldr	r2, [pc, #296]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a1e:	6053      	str	r3, [r2, #4]
 8002a20:	e02e      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
 8002a22:	4b48      	ldr	r3, [pc, #288]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	069b      	lsls	r3, r3, #26
 8002a30:	4944      	ldr	r1, [pc, #272]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
 8002a36:	e023      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
 8002a38:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	061b      	lsls	r3, r3, #24
 8002a46:	493f      	ldr	r1, [pc, #252]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60cb      	str	r3, [r1, #12]
 8002a4c:	e018      	b.n	8002a80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a3c      	ldr	r2, [pc, #240]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5a:	f7fe f933 	bl	8000cc4 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a62:	f7fe f92f 	bl	8000cc4 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e212      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a74:	4b33      	ldr	r3, [pc, #204]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d036      	beq.n	8002afa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d019      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a94:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a98:	4a2a      	ldr	r2, [pc, #168]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe f910 	bl	8000cc4 <HAL_GetTick>
 8002aa4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe f90c 	bl	8000cc4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e1ef      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x45c>
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002acc:	4a1d      	ldr	r2, [pc, #116]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe f8f6 	bl	8000cc4 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe f8f2 	bl	8000cc4 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1d5      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d039      	beq.n	8002b7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d01c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a0c      	ldr	r2, [pc, #48]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe f8d3 	bl	8000cc4 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b22:	f7fe f8cf 	bl	8000cc4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1b2      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_RCC_OscConfig+0x4f8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4d6>
 8002b40:	e01b      	b.n	8002b7a <HAL_RCC_OscConfig+0x52e>
 8002b42:	bf00      	nop
 8002b44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b48:	4b9b      	ldr	r3, [pc, #620]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a9a      	ldr	r2, [pc, #616]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b54:	f7fe f8b6 	bl	8000cc4 <HAL_GetTick>
 8002b58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b5c:	f7fe f8b2 	bl	8000cc4 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e195      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b6e:	4b92      	ldr	r3, [pc, #584]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8081 	beq.w	8002c8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b88:	4b8c      	ldr	r3, [pc, #560]	; (8002dbc <HAL_RCC_OscConfig+0x770>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a8b      	ldr	r2, [pc, #556]	; (8002dbc <HAL_RCC_OscConfig+0x770>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b94:	f7fe f896 	bl	8000cc4 <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b9c:	f7fe f892 	bl	8000cc4 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b64      	cmp	r3, #100	; 0x64
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e175      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bae:	4b83      	ldr	r3, [pc, #524]	; (8002dbc <HAL_RCC_OscConfig+0x770>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d106      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x584>
 8002bc2:	4b7d      	ldr	r3, [pc, #500]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	4a7c      	ldr	r2, [pc, #496]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bce:	e02d      	b.n	8002c2c <HAL_RCC_OscConfig+0x5e0>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10c      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x5a6>
 8002bd8:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bdc:	4a76      	ldr	r2, [pc, #472]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6713      	str	r3, [r2, #112]	; 0x70
 8002be4:	4b74      	ldr	r3, [pc, #464]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a73      	ldr	r2, [pc, #460]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x5e0>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x5c8>
 8002bfa:	4b6f      	ldr	r3, [pc, #444]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a6e      	ldr	r2, [pc, #440]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	4b6c      	ldr	r3, [pc, #432]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a6b      	ldr	r2, [pc, #428]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x5e0>
 8002c14:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a67      	ldr	r2, [pc, #412]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a64      	ldr	r2, [pc, #400]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe f846 	bl	8000cc4 <HAL_GetTick>
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe f842 	bl	8000cc4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e123      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c52:	4b59      	ldr	r3, [pc, #356]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x5f0>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe f830 	bl	8000cc4 <HAL_GetTick>
 8002c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe f82c 	bl	8000cc4 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e10d      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c7e:	4b4e      	ldr	r3, [pc, #312]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8102 	beq.w	8002e98 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c94:	4b48      	ldr	r3, [pc, #288]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c9c:	2b18      	cmp	r3, #24
 8002c9e:	f000 80bd 	beq.w	8002e1c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	f040 809e 	bne.w	8002de8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a41      	ldr	r2, [pc, #260]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002cb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe f804 	bl	8000cc4 <HAL_GetTick>
 8002cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc0:	f7fe f800 	bl	8000cc4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e0e3      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd2:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cde:	4b36      	ldr	r3, [pc, #216]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce2:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_RCC_OscConfig+0x774>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cee:	0112      	lsls	r2, r2, #4
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	4931      	ldr	r1, [pc, #196]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	3b01      	subs	r3, #1
 8002d08:	025b      	lsls	r3, r3, #9
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	3b01      	subs	r3, #1
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	3b01      	subs	r3, #1
 8002d22:	061b      	lsls	r3, r3, #24
 8002d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d28:	4923      	ldr	r1, [pc, #140]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3e:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_RCC_OscConfig+0x778>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d46:	00d2      	lsls	r2, r2, #3
 8002d48:	491b      	ldr	r1, [pc, #108]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d4e:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f023 020c 	bic.w	r2, r3, #12
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4917      	ldr	r1, [pc, #92]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	f023 0202 	bic.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6c:	4912      	ldr	r1, [pc, #72]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	4a10      	ldr	r2, [pc, #64]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	4a0a      	ldr	r2, [pc, #40]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da2:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fd ff89 	bl	8000cc4 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002db4:	e011      	b.n	8002dda <HAL_RCC_OscConfig+0x78e>
 8002db6:	bf00      	nop
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58024800 	.word	0x58024800
 8002dc0:	fffffc0c 	.word	0xfffffc0c
 8002dc4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fd ff7c 	bl	8000cc4 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e05f      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dda:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_RCC_OscConfig+0x858>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x77c>
 8002de6:	e057      	b.n	8002e98 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de8:	4b2e      	ldr	r3, [pc, #184]	; (8002ea4 <HAL_RCC_OscConfig+0x858>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a2d      	ldr	r2, [pc, #180]	; (8002ea4 <HAL_RCC_OscConfig+0x858>)
 8002dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df4:	f7fd ff66 	bl	8000cc4 <HAL_GetTick>
 8002df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfc:	f7fd ff62 	bl	8000cc4 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e045      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0e:	4b25      	ldr	r3, [pc, #148]	; (8002ea4 <HAL_RCC_OscConfig+0x858>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x7b0>
 8002e1a:	e03d      	b.n	8002e98 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e1c:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_RCC_OscConfig+0x858>)
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_OscConfig+0x858>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d031      	beq.n	8002e94 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f003 0203 	and.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d12a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d122      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d11a      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	0a5b      	lsrs	r3, r3, #9
 8002e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d111      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	0c1b      	lsrs	r3, r3, #16
 8002e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d108      	bne.n	8002e94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	0e1b      	lsrs	r3, r3, #24
 8002e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e000      	b.n	8002e9a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3730      	adds	r7, #48	; 0x30
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	58024400 	.word	0x58024400

08002ea8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e19c      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ebc:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d910      	bls.n	8002eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eca:	4b87      	ldr	r3, [pc, #540]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f023 020f 	bic.w	r2, r3, #15
 8002ed2:	4985      	ldr	r1, [pc, #532]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eda:	4b83      	ldr	r3, [pc, #524]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e184      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d010      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b7b      	ldr	r3, [pc, #492]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d908      	bls.n	8002f1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f08:	4b78      	ldr	r3, [pc, #480]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	4975      	ldr	r1, [pc, #468]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	4b70      	ldr	r3, [pc, #448]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d908      	bls.n	8002f48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f36:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	496a      	ldr	r1, [pc, #424]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699a      	ldr	r2, [r3, #24]
 8002f58:	4b64      	ldr	r3, [pc, #400]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d908      	bls.n	8002f76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f64:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	495e      	ldr	r1, [pc, #376]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d908      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f92:	4b56      	ldr	r3, [pc, #344]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4953      	ldr	r1, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d908      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f023 020f 	bic.w	r2, r3, #15
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4947      	ldr	r1, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d055      	beq.n	800308a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fde:	4b43      	ldr	r3, [pc, #268]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	4940      	ldr	r1, [pc, #256]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff8:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d121      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0f6      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d107      	bne.n	8003020 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003010:	4b36      	ldr	r3, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0ea      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0de      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003038:	4b2c      	ldr	r3, [pc, #176]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e0d6      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f023 0207 	bic.w	r2, r3, #7
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4925      	ldr	r1, [pc, #148]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 8003056:	4313      	orrs	r3, r2
 8003058:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fd fe33 	bl	8000cc4 <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003060:	e00a      	b.n	8003078 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003062:	f7fd fe2f 	bl	8000cc4 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0be      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	429a      	cmp	r2, r3
 8003088:	d1eb      	bne.n	8003062 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d010      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d208      	bcs.n	80030b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x244>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d214      	bcs.n	80030f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 020f 	bic.w	r2, r3, #15
 80030ce:	4906      	ldr	r1, [pc, #24]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <HAL_RCC_ClockConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e086      	b.n	80031f6 <HAL_RCC_ClockConfig+0x34e>
 80030e8:	52002000 	.word	0x52002000
 80030ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003108:	429a      	cmp	r2, r3
 800310a:	d208      	bcs.n	800311e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	4939      	ldr	r1, [pc, #228]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800311a:	4313      	orrs	r3, r2
 800311c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003136:	429a      	cmp	r2, r3
 8003138:	d208      	bcs.n	800314c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	492e      	ldr	r1, [pc, #184]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003164:	429a      	cmp	r2, r3
 8003166:	d208      	bcs.n	800317a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003168:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	4922      	ldr	r1, [pc, #136]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003176:	4313      	orrs	r3, r2
 8003178:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003192:	429a      	cmp	r2, r3
 8003194:	d208      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4917      	ldr	r1, [pc, #92]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031a8:	f000 f834 	bl	8003214 <HAL_RCC_GetSysClockFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	4912      	ldr	r1, [pc, #72]	; (8003204 <HAL_RCC_ClockConfig+0x35c>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x358>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_RCC_ClockConfig+0x35c>)
 80031d0:	5cd3      	ldrb	r3, [r2, r3]
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <HAL_RCC_ClockConfig+0x360>)
 80031de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_RCC_ClockConfig+0x364>)
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_RCC_ClockConfig+0x368>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fd fd20 	bl	8000c30 <HAL_InitTick>
 80031f0:	4603      	mov	r3, r0
 80031f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	58024400 	.word	0x58024400
 8003204:	0800495c 	.word	0x0800495c
 8003208:	24000008 	.word	0x24000008
 800320c:	24000004 	.word	0x24000004
 8003210:	2400000c 	.word	0x2400000c

08003214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321a:	4bb3      	ldr	r3, [pc, #716]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003222:	2b18      	cmp	r3, #24
 8003224:	f200 8155 	bhi.w	80034d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003295 	.word	0x08003295
 8003234:	080034d3 	.word	0x080034d3
 8003238:	080034d3 	.word	0x080034d3
 800323c:	080034d3 	.word	0x080034d3
 8003240:	080034d3 	.word	0x080034d3
 8003244:	080034d3 	.word	0x080034d3
 8003248:	080034d3 	.word	0x080034d3
 800324c:	080034d3 	.word	0x080034d3
 8003250:	080032bb 	.word	0x080032bb
 8003254:	080034d3 	.word	0x080034d3
 8003258:	080034d3 	.word	0x080034d3
 800325c:	080034d3 	.word	0x080034d3
 8003260:	080034d3 	.word	0x080034d3
 8003264:	080034d3 	.word	0x080034d3
 8003268:	080034d3 	.word	0x080034d3
 800326c:	080034d3 	.word	0x080034d3
 8003270:	080032c1 	.word	0x080032c1
 8003274:	080034d3 	.word	0x080034d3
 8003278:	080034d3 	.word	0x080034d3
 800327c:	080034d3 	.word	0x080034d3
 8003280:	080034d3 	.word	0x080034d3
 8003284:	080034d3 	.word	0x080034d3
 8003288:	080034d3 	.word	0x080034d3
 800328c:	080034d3 	.word	0x080034d3
 8003290:	080032c7 	.word	0x080032c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003294:	4b94      	ldr	r3, [pc, #592]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032a0:	4b91      	ldr	r3, [pc, #580]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	08db      	lsrs	r3, r3, #3
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	4a90      	ldr	r2, [pc, #576]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
 80032b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80032b2:	e111      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032b4:	4b8d      	ldr	r3, [pc, #564]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032b6:	61bb      	str	r3, [r7, #24]
    break;
 80032b8:	e10e      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032ba:	4b8d      	ldr	r3, [pc, #564]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032bc:	61bb      	str	r3, [r7, #24]
    break;
 80032be:	e10b      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032c0:	4b8c      	ldr	r3, [pc, #560]	; (80034f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032c2:	61bb      	str	r3, [r7, #24]
    break;
 80032c4:	e108      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032d0:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032dc:	4b82      	ldr	r3, [pc, #520]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032e6:	4b80      	ldr	r3, [pc, #512]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ea:	08db      	lsrs	r3, r3, #3
 80032ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80e1 	beq.w	80034cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b02      	cmp	r3, #2
 800330e:	f000 8083 	beq.w	8003418 <HAL_RCC_GetSysClockFreq+0x204>
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	2b02      	cmp	r3, #2
 8003316:	f200 80a1 	bhi.w	800345c <HAL_RCC_GetSysClockFreq+0x248>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x114>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d056      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003326:	e099      	b.n	800345c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d02d      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003334:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	08db      	lsrs	r3, r3, #3
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	4a6b      	ldr	r2, [pc, #428]	; (80034ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	ee07 3a90 	vmov	s15, r3
 800334c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800335e:	4b62      	ldr	r3, [pc, #392]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800336e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003372:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800337e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800338e:	e087      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800339a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800339e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033a2:	4b51      	ldr	r3, [pc, #324]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033aa:	ee07 3a90 	vmov	s15, r3
 80033ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033d2:	e065      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003500 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033e6:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ee:	ee07 3a90 	vmov	s15, r3
 80033f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800340a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800340e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003416:	e043      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003422:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003504 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343a:	ed97 6a02 	vldr	s12, [r7, #8]
 800343e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800344e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800345a:	e021      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800346e:	4b1e      	ldr	r3, [pc, #120]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800347e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003482:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800349e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	0a5b      	lsrs	r3, r3, #9
 80034a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034aa:	3301      	adds	r3, #1
 80034ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80034bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034c4:	ee17 3a90 	vmov	r3, s15
 80034c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034ca:	e005      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    break;
 80034d0:	e002      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034d2:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034d4:	61bb      	str	r3, [r7, #24]
    break;
 80034d6:	bf00      	nop
  }

  return sysclockfreq;
 80034d8:	69bb      	ldr	r3, [r7, #24]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3724      	adds	r7, #36	; 0x24
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	58024400 	.word	0x58024400
 80034ec:	03d09000 	.word	0x03d09000
 80034f0:	003d0900 	.word	0x003d0900
 80034f4:	017d7840 	.word	0x017d7840
 80034f8:	46000000 	.word	0x46000000
 80034fc:	4c742400 	.word	0x4c742400
 8003500:	4a742400 	.word	0x4a742400
 8003504:	4bbebc20 	.word	0x4bbebc20

08003508 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003510:	2300      	movs	r3, #0
 8003512:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003514:	2300      	movs	r3, #0
 8003516:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03f      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003528:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800352c:	d02a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800352e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003532:	d824      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003538:	d018      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800353a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800353e:	d81e      	bhi.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003548:	d007      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800354a:	e018      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354c:	4ba3      	ldr	r3, [pc, #652]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4aa2      	ldr	r2, [pc, #648]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003558:	e015      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3304      	adds	r3, #4
 800355e:	2102      	movs	r1, #2
 8003560:	4618      	mov	r0, r3
 8003562:	f000 ff17 	bl	8004394 <RCCEx_PLL2_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800356a:	e00c      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3324      	adds	r3, #36	; 0x24
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 ffc0 	bl	80044f8 <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800357c:	e003      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	75fb      	strb	r3, [r7, #23]
      break;
 8003582:	e000      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003584:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d109      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800358c:	4b93      	ldr	r3, [pc, #588]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800358e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003598:	4990      	ldr	r1, [pc, #576]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800359a:	4313      	orrs	r3, r2
 800359c:	650b      	str	r3, [r1, #80]	; 0x50
 800359e:	e001      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
 80035a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d03d      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d826      	bhi.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80035b8:	a201      	add	r2, pc, #4	; (adr r2, 80035c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80035ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035be:	bf00      	nop
 80035c0:	080035d5 	.word	0x080035d5
 80035c4:	080035e3 	.word	0x080035e3
 80035c8:	080035f5 	.word	0x080035f5
 80035cc:	0800360d 	.word	0x0800360d
 80035d0:	0800360d 	.word	0x0800360d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d4:	4b81      	ldr	r3, [pc, #516]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4a80      	ldr	r2, [pc, #512]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035e0:	e015      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 fed3 	bl	8004394 <RCCEx_PLL2_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80035f2:	e00c      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3324      	adds	r3, #36	; 0x24
 80035f8:	2100      	movs	r1, #0
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 ff7c 	bl	80044f8 <RCCEx_PLL3_Config>
 8003600:	4603      	mov	r3, r0
 8003602:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003604:	e003      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
      break;
 800360a:	e000      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800360c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003614:	4b71      	ldr	r3, [pc, #452]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	f023 0207 	bic.w	r2, r3, #7
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	496e      	ldr	r1, [pc, #440]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	650b      	str	r3, [r1, #80]	; 0x50
 8003626:	e001      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003634:	2b00      	cmp	r3, #0
 8003636:	d042      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003640:	d02b      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	d825      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003648:	2bc0      	cmp	r3, #192	; 0xc0
 800364a:	d028      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800364c:	2bc0      	cmp	r3, #192	; 0xc0
 800364e:	d821      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003650:	2b80      	cmp	r3, #128	; 0x80
 8003652:	d016      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003654:	2b80      	cmp	r3, #128	; 0x80
 8003656:	d81d      	bhi.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d007      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003660:	e018      	b.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003662:	4b5e      	ldr	r3, [pc, #376]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	4a5d      	ldr	r2, [pc, #372]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800366e:	e017      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fe8c 	bl	8004394 <RCCEx_PLL2_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003680:	e00e      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3324      	adds	r3, #36	; 0x24
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f000 ff35 	bl	80044f8 <RCCEx_PLL3_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003692:	e005      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	75fb      	strb	r3, [r7, #23]
      break;
 8003698:	e002      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800369e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036a0:	7dfb      	ldrb	r3, [r7, #23]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036a6:	4b4d      	ldr	r3, [pc, #308]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	494a      	ldr	r1, [pc, #296]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	650b      	str	r3, [r1, #80]	; 0x50
 80036b8:	e001      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	7dfb      	ldrb	r3, [r7, #23]
 80036bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d049      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036d4:	d030      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80036d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036da:	d82a      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036e0:	d02c      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80036e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036e6:	d824      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ec:	d018      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036f2:	d81e      	bhi.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80036f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036fc:	d007      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80036fe:	e018      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003700:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4a35      	ldr	r2, [pc, #212]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800370c:	e017      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	3304      	adds	r3, #4
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fe3d 	bl	8004394 <RCCEx_PLL2_Config>
 800371a:	4603      	mov	r3, r0
 800371c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800371e:	e00e      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3324      	adds	r3, #36	; 0x24
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fee6 	bl	80044f8 <RCCEx_PLL3_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003730:	e005      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
      break;
 8003736:	e002      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003738:	bf00      	nop
 800373a:	e000      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800373c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800373e:	7dfb      	ldrb	r3, [r7, #23]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003752:	4922      	ldr	r1, [pc, #136]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	658b      	str	r3, [r1, #88]	; 0x58
 8003758:	e001      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003766:	2b00      	cmp	r3, #0
 8003768:	d04b      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003770:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003774:	d030      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003776:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800377a:	d82a      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800377c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003780:	d02e      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003782:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003786:	d824      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800378c:	d018      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800378e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003792:	d81e      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800379c:	d007      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800379e:	e018      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a0:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	4a0d      	ldr	r2, [pc, #52]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037ac:	e019      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fded 	bl	8004394 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037be:	e010      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3324      	adds	r3, #36	; 0x24
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fe96 	bl	80044f8 <RCCEx_PLL3_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037d0:	e007      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
      break;
 80037d6:	e004      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80037d8:	bf00      	nop
 80037da:	e002      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80037dc:	58024400 	.word	0x58024400
      break;
 80037e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e2:	7dfb      	ldrb	r3, [r7, #23]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10a      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037e8:	4b99      	ldr	r3, [pc, #612]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037f6:	4996      	ldr	r1, [pc, #600]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	658b      	str	r3, [r1, #88]	; 0x58
 80037fc:	e001      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	7dfb      	ldrb	r3, [r7, #23]
 8003800:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d032      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	2b30      	cmp	r3, #48	; 0x30
 8003814:	d01c      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003816:	2b30      	cmp	r3, #48	; 0x30
 8003818:	d817      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d00c      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800381e:	2b20      	cmp	r3, #32
 8003820:	d813      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003826:	2b10      	cmp	r3, #16
 8003828:	d10f      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382a:	4b89      	ldr	r3, [pc, #548]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a88      	ldr	r2, [pc, #544]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003836:	e00e      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	2102      	movs	r1, #2
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fda8 	bl	8004394 <RCCEx_PLL2_Config>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003848:	e005      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
      break;
 800384e:	e002      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003850:	bf00      	nop
 8003852:	e000      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800385c:	4b7c      	ldr	r3, [pc, #496]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800385e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003860:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003868:	4979      	ldr	r1, [pc, #484]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800386a:	4313      	orrs	r3, r2
 800386c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800386e:	e001      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d047      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003888:	d030      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800388a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800388e:	d82a      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003890:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003894:	d02c      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003896:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800389a:	d824      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a0:	d018      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a6:	d81e      	bhi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b0:	d007      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80038b2:	e018      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b4:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	4a65      	ldr	r2, [pc, #404]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038c0:	e017      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fd63 	bl	8004394 <RCCEx_PLL2_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038d2:	e00e      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3324      	adds	r3, #36	; 0x24
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fe0c 	bl	80044f8 <RCCEx_PLL3_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	75fb      	strb	r3, [r7, #23]
      break;
 80038ea:	e002      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038ec:	bf00      	nop
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80038f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038f8:	4b55      	ldr	r3, [pc, #340]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	4952      	ldr	r1, [pc, #328]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003906:	4313      	orrs	r3, r2
 8003908:	650b      	str	r3, [r1, #80]	; 0x50
 800390a:	e001      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390c:	7dfb      	ldrb	r3, [r7, #23]
 800390e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d049      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003924:	d02e      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003926:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392a:	d828      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800392c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003930:	d02a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003932:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003936:	d822      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003938:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800393c:	d026      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800393e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003942:	d81c      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003948:	d010      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800394a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394e:	d816      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003950:	2b00      	cmp	r3, #0
 8003952:	d01d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d111      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3304      	adds	r3, #4
 800395e:	2101      	movs	r1, #1
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fd17 	bl	8004394 <RCCEx_PLL2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800396a:	e012      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3324      	adds	r3, #36	; 0x24
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fdc0 	bl	80044f8 <RCCEx_PLL3_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800397c:	e009      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	75fb      	strb	r3, [r7, #23]
      break;
 8003982:	e006      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003984:	bf00      	nop
 8003986:	e004      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003988:	bf00      	nop
 800398a:	e002      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003998:	4b2d      	ldr	r3, [pc, #180]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a4:	492a      	ldr	r1, [pc, #168]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	650b      	str	r3, [r1, #80]	; 0x50
 80039aa:	e001      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d04d      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80039c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c6:	d02e      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80039c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039cc:	d828      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d2:	d02a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d8:	d822      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039de:	d026      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80039e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039e4:	d81c      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ea:	d010      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80039ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f0:	d816      	bhi.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01d      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80039f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039fa:	d111      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3304      	adds	r3, #4
 8003a00:	2101      	movs	r1, #1
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fcc6 	bl	8004394 <RCCEx_PLL2_Config>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a0c:	e012      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3324      	adds	r3, #36	; 0x24
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 fd6f 	bl	80044f8 <RCCEx_PLL3_Config>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003a1e:	e009      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	75fb      	strb	r3, [r7, #23]
      break;
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a26:	bf00      	nop
 8003a28:	e004      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e002      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003a32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a34:	7dfb      	ldrb	r3, [r7, #23]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a3a:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a48:	4901      	ldr	r1, [pc, #4]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a4e:	e003      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d02f      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6c:	d00e      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a72:	d814      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d015      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7c:	d10f      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7e:	4baf      	ldr	r3, [pc, #700]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	4aae      	ldr	r2, [pc, #696]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a8a:	e00c      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	2101      	movs	r1, #1
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fc7e 	bl	8004394 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003a9c:	e003      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aa6:	7dfb      	ldrb	r3, [r7, #23]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aac:	4ba3      	ldr	r3, [pc, #652]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab8:	49a0      	ldr	r1, [pc, #640]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	650b      	str	r3, [r1, #80]	; 0x50
 8003abe:	e001      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
 8003ac2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d032      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d81b      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ad8:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ade:	bf00      	nop
 8003ae0:	08003b17 	.word	0x08003b17
 8003ae4:	08003af1 	.word	0x08003af1
 8003ae8:	08003aff 	.word	0x08003aff
 8003aec:	08003b17 	.word	0x08003b17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af0:	4b92      	ldr	r3, [pc, #584]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	4a91      	ldr	r2, [pc, #580]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003afc:	e00c      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2102      	movs	r1, #2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fc45 	bl	8004394 <RCCEx_PLL2_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b0e:	e003      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	75fb      	strb	r3, [r7, #23]
      break;
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b1e:	4b87      	ldr	r3, [pc, #540]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	4984      	ldr	r1, [pc, #528]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b30:	e001      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 8086 	beq.w	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b44:	4b7e      	ldr	r3, [pc, #504]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a7d      	ldr	r2, [pc, #500]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b50:	f7fd f8b8 	bl	8000cc4 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b56:	e009      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b58:	f7fd f8b4 	bl	8000cc4 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d902      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	75fb      	strb	r3, [r7, #23]
        break;
 8003b6a:	e005      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b6c:	4b74      	ldr	r3, [pc, #464]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0ef      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d166      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b7e:	4b6f      	ldr	r3, [pc, #444]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b88:	4053      	eors	r3, r2
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d013      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b92:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b9c:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba0:	4a66      	ldr	r2, [pc, #408]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba8:	4b64      	ldr	r3, [pc, #400]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bac:	4a63      	ldr	r2, [pc, #396]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bb4:	4a61      	ldr	r2, [pc, #388]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc6:	f7fd f87d 	bl	8000cc4 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bcc:	e00b      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bce:	f7fd f879 	bl	8000cc4 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d902      	bls.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	75fb      	strb	r3, [r7, #23]
            break;
 8003be4:	e005      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003be6:	4b55      	ldr	r3, [pc, #340]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0ed      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d126      	bne.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c06:	d10d      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003c08:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c16:	0919      	lsrs	r1, r3, #4
 8003c18:	4b4a      	ldr	r3, [pc, #296]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003c1a:	400b      	ands	r3, r1
 8003c1c:	4947      	ldr	r1, [pc, #284]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	610b      	str	r3, [r1, #16]
 8003c22:	e005      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003c24:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	4a44      	ldr	r2, [pc, #272]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c2a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c2e:	6113      	str	r3, [r2, #16]
 8003c30:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	493f      	ldr	r1, [pc, #252]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	670b      	str	r3, [r1, #112]	; 0x70
 8003c44:	e004      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	75bb      	strb	r3, [r7, #22]
 8003c4a:	e001      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 8085 	beq.w	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c62:	2b28      	cmp	r3, #40	; 0x28
 8003c64:	d866      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003c66:	a201      	add	r2, pc, #4	; (adr r2, 8003c6c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6c:	08003d49 	.word	0x08003d49
 8003c70:	08003d35 	.word	0x08003d35
 8003c74:	08003d35 	.word	0x08003d35
 8003c78:	08003d35 	.word	0x08003d35
 8003c7c:	08003d35 	.word	0x08003d35
 8003c80:	08003d35 	.word	0x08003d35
 8003c84:	08003d35 	.word	0x08003d35
 8003c88:	08003d35 	.word	0x08003d35
 8003c8c:	08003d11 	.word	0x08003d11
 8003c90:	08003d35 	.word	0x08003d35
 8003c94:	08003d35 	.word	0x08003d35
 8003c98:	08003d35 	.word	0x08003d35
 8003c9c:	08003d35 	.word	0x08003d35
 8003ca0:	08003d35 	.word	0x08003d35
 8003ca4:	08003d35 	.word	0x08003d35
 8003ca8:	08003d35 	.word	0x08003d35
 8003cac:	08003d23 	.word	0x08003d23
 8003cb0:	08003d35 	.word	0x08003d35
 8003cb4:	08003d35 	.word	0x08003d35
 8003cb8:	08003d35 	.word	0x08003d35
 8003cbc:	08003d35 	.word	0x08003d35
 8003cc0:	08003d35 	.word	0x08003d35
 8003cc4:	08003d35 	.word	0x08003d35
 8003cc8:	08003d35 	.word	0x08003d35
 8003ccc:	08003d49 	.word	0x08003d49
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003d35 	.word	0x08003d35
 8003cd8:	08003d35 	.word	0x08003d35
 8003cdc:	08003d35 	.word	0x08003d35
 8003ce0:	08003d35 	.word	0x08003d35
 8003ce4:	08003d35 	.word	0x08003d35
 8003ce8:	08003d35 	.word	0x08003d35
 8003cec:	08003d49 	.word	0x08003d49
 8003cf0:	08003d35 	.word	0x08003d35
 8003cf4:	08003d35 	.word	0x08003d35
 8003cf8:	08003d35 	.word	0x08003d35
 8003cfc:	08003d35 	.word	0x08003d35
 8003d00:	08003d35 	.word	0x08003d35
 8003d04:	08003d35 	.word	0x08003d35
 8003d08:	08003d35 	.word	0x08003d35
 8003d0c:	08003d49 	.word	0x08003d49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fb3c 	bl	8004394 <RCCEx_PLL2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d20:	e013      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3324      	adds	r3, #36	; 0x24
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 fbe5 	bl	80044f8 <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003d32:	e00a      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	75fb      	strb	r3, [r7, #23]
      break;
 8003d38:	e007      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003d3a:	bf00      	nop
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	58024800 	.word	0x58024800
 8003d44:	00ffffcf 	.word	0x00ffffcf
      break;
 8003d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d50:	4b96      	ldr	r3, [pc, #600]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5c:	4993      	ldr	r1, [pc, #588]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	654b      	str	r3, [r1, #84]	; 0x54
 8003d62:	e001      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d038      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d821      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003d7c:	a201      	add	r2, pc, #4	; (adr r2, 8003d84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d82:	bf00      	nop
 8003d84:	08003dc7 	.word	0x08003dc7
 8003d88:	08003d9d 	.word	0x08003d9d
 8003d8c:	08003daf 	.word	0x08003daf
 8003d90:	08003dc7 	.word	0x08003dc7
 8003d94:	08003dc7 	.word	0x08003dc7
 8003d98:	08003dc7 	.word	0x08003dc7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	2101      	movs	r1, #1
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 faf6 	bl	8004394 <RCCEx_PLL2_Config>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003dac:	e00c      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3324      	adds	r3, #36	; 0x24
 8003db2:	2101      	movs	r1, #1
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 fb9f 	bl	80044f8 <RCCEx_PLL3_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003dbe:	e003      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dce:	4b77      	ldr	r3, [pc, #476]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f023 0207 	bic.w	r2, r3, #7
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	4974      	ldr	r1, [pc, #464]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	654b      	str	r3, [r1, #84]	; 0x54
 8003de0:	e001      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de2:	7dfb      	ldrb	r3, [r7, #23]
 8003de4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d03a      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d821      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e47 	.word	0x08003e47
 8003e08:	08003e1d 	.word	0x08003e1d
 8003e0c:	08003e2f 	.word	0x08003e2f
 8003e10:	08003e47 	.word	0x08003e47
 8003e14:	08003e47 	.word	0x08003e47
 8003e18:	08003e47 	.word	0x08003e47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fab6 	bl	8004394 <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e2c:	e00c      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	3324      	adds	r3, #36	; 0x24
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fb5f 	bl	80044f8 <RCCEx_PLL3_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	e000      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e4e:	4b57      	ldr	r3, [pc, #348]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	f023 0207 	bic.w	r2, r3, #7
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	4953      	ldr	r1, [pc, #332]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	658b      	str	r3, [r1, #88]	; 0x58
 8003e62:	e001      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d04b      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e7e:	d02e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e84:	d828      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d02a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d822      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e96:	d026      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003e98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e9c:	d81c      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea8:	d816      	bhi.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01d      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fa6a 	bl	8004394 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ec4:	e012      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3324      	adds	r3, #36	; 0x24
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fb13 	bl	80044f8 <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ed6:	e009      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
      break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ede:	bf00      	nop
 8003ee0:	e004      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef2:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f00:	492a      	ldr	r1, [pc, #168]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	654b      	str	r3, [r1, #84]	; 0x54
 8003f06:	e001      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d04d      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f22:	d02e      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003f24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f28:	d828      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f2e:	d02a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f34:	d822      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f3a:	d026      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f40:	d81c      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f46:	d010      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d816      	bhi.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d01d      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d111      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fa18 	bl	8004394 <RCCEx_PLL2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f68:	e012      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3324      	adds	r3, #36	; 0x24
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fac1 	bl	80044f8 <RCCEx_PLL3_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f82:	bf00      	nop
 8003f84:	e004      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f86:	bf00      	nop
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f96:	4b05      	ldr	r3, [pc, #20]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa4:	4901      	ldr	r1, [pc, #4]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8003faa:	e003      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003fac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7dfb      	ldrb	r3, [r7, #23]
 8003fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d04b      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fca:	d02e      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003fcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003fd0:	d828      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd6:	d02a      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fdc:	d822      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fe2:	d026      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fe4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003fe8:	d81c      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fee:	d010      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ff4:	d816      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d01d      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffe:	d111      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f9c4 	bl	8004394 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004010:	e012      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3324      	adds	r3, #36	; 0x24
 8004016:	2102      	movs	r1, #2
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fa6d 	bl	80044f8 <RCCEx_PLL3_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004022:	e009      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	75fb      	strb	r3, [r7, #23]
      break;
 8004028:	e006      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800402a:	bf00      	nop
 800402c:	e004      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800402e:	bf00      	nop
 8004030:	e002      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004032:	bf00      	nop
 8004034:	e000      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800403e:	4b9d      	ldr	r3, [pc, #628]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800404c:	4999      	ldr	r1, [pc, #612]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800404e:	4313      	orrs	r3, r2
 8004050:	658b      	str	r3, [r1, #88]	; 0x58
 8004052:	e001      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7dfb      	ldrb	r3, [r7, #23]
 8004056:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d10a      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3324      	adds	r3, #36	; 0x24
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fa3e 	bl	80044f8 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004086:	4b8b      	ldr	r3, [pc, #556]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004094:	4987      	ldr	r1, [pc, #540]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004096:	4313      	orrs	r3, r2
 8004098:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d01a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040b0:	d10a      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3324      	adds	r3, #36	; 0x24
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fa1d 	bl	80044f8 <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c8:	4b7a      	ldr	r3, [pc, #488]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d6:	4977      	ldr	r1, [pc, #476]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d034      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f2:	d01d      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80040f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040f8:	d817      	bhi.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80040fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004102:	d009      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004104:	e011      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3304      	adds	r3, #4
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f941 	bl	8004394 <RCCEx_PLL2_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004116:	e00c      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3324      	adds	r3, #36	; 0x24
 800411c:	2102      	movs	r1, #2
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f9ea 	bl	80044f8 <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004128:	e003      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
      break;
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004138:	4b5e      	ldr	r3, [pc, #376]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004146:	495b      	ldr	r1, [pc, #364]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004148:	4313      	orrs	r3, r2
 800414a:	658b      	str	r3, [r1, #88]	; 0x58
 800414c:	e001      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414e:	7dfb      	ldrb	r3, [r7, #23]
 8004150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d033      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004168:	d01c      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800416a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800416e:	d816      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004174:	d003      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800417a:	d007      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800417c:	e00f      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417e:	4b4d      	ldr	r3, [pc, #308]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	4a4c      	ldr	r2, [pc, #304]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800418a:	e00c      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3324      	adds	r3, #36	; 0x24
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f9b0 	bl	80044f8 <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	75fb      	strb	r3, [r7, #23]
      break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80041a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10a      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ac:	4b41      	ldr	r3, [pc, #260]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ba:	493e      	ldr	r1, [pc, #248]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	654b      	str	r3, [r1, #84]	; 0x54
 80041c0:	e001      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
 80041c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d029      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d007      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80041e0:	e00f      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e2:	4b34      	ldr	r3, [pc, #208]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a33      	ldr	r2, [pc, #204]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80041ee:	e00b      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 f8cc 	bl	8004394 <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004200:	e002      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	75fb      	strb	r3, [r7, #23]
      break;
 8004206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800420e:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	4926      	ldr	r1, [pc, #152]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800421c:	4313      	orrs	r3, r2
 800421e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004220:	e001      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3324      	adds	r3, #36	; 0x24
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f95d 	bl	80044f8 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d033      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425c:	d017      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800425e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004262:	d811      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004268:	d013      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800426a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426e:	d80b      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004278:	d106      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a0d      	ldr	r2, [pc, #52]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004286:	e007      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	75fb      	strb	r3, [r7, #23]
      break;
 800428c:	e004      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800428e:	bf00      	nop
 8004290:	e002      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004292:	bf00      	nop
 8004294:	e000      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10c      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042aa:	4902      	ldr	r1, [pc, #8]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	654b      	str	r3, [r1, #84]	; 0x54
 80042b0:	e004      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80042b2:	bf00      	nop
 80042b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80042c8:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	492e      	ldr	r1, [pc, #184]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80042e6:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042f4:	4926      	ldr	r1, [pc, #152]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d008      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004306:	4b22      	ldr	r3, [pc, #136]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004312:	491f      	ldr	r1, [pc, #124]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004314:	4313      	orrs	r3, r2
 8004316:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00d      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004324:	4b1a      	ldr	r3, [pc, #104]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	4a19      	ldr	r2, [pc, #100]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800432a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800432e:	6113      	str	r3, [r2, #16]
 8004330:	4b17      	ldr	r3, [pc, #92]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800433a:	4915      	ldr	r1, [pc, #84]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800433c:	4313      	orrs	r3, r2
 800433e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	da08      	bge.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800434a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004354:	490e      	ldr	r1, [pc, #56]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004356:	4313      	orrs	r3, r2
 8004358:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	4906      	ldr	r1, [pc, #24]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004376:	4313      	orrs	r3, r2
 8004378:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800437a:	7dbb      	ldrb	r3, [r7, #22]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400

08004394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043a2:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80043a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	2b03      	cmp	r3, #3
 80043ac:	d101      	bne.n	80043b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e099      	b.n	80044e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80043b2:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a4e      	ldr	r2, [pc, #312]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80043b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043be:	f7fc fc81 	bl	8000cc4 <HAL_GetTick>
 80043c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043c4:	e008      	b.n	80043d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043c6:	f7fc fc7d 	bl	8000cc4 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e086      	b.n	80044e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043d8:	4b45      	ldr	r3, [pc, #276]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1f0      	bne.n	80043c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043e4:	4b42      	ldr	r3, [pc, #264]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80043e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	031b      	lsls	r3, r3, #12
 80043f2:	493f      	ldr	r1, [pc, #252]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	628b      	str	r3, [r1, #40]	; 0x28
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	3b01      	subs	r3, #1
 8004408:	025b      	lsls	r3, r3, #9
 800440a:	b29b      	uxth	r3, r3
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	3b01      	subs	r3, #1
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	3b01      	subs	r3, #1
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004428:	4931      	ldr	r1, [pc, #196]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 800442a:	4313      	orrs	r3, r2
 800442c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800442e:	4b30      	ldr	r3, [pc, #192]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	492d      	ldr	r1, [pc, #180]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 800443c:	4313      	orrs	r3, r2
 800443e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004440:	4b2b      	ldr	r3, [pc, #172]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	f023 0220 	bic.w	r2, r3, #32
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	4928      	ldr	r1, [pc, #160]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 800444e:	4313      	orrs	r3, r2
 8004450:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	4a26      	ldr	r2, [pc, #152]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800445e:	4b24      	ldr	r3, [pc, #144]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 8004460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004462:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <RCCEx_PLL2_Config+0x160>)
 8004464:	4013      	ands	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	69d2      	ldr	r2, [r2, #28]
 800446a:	00d2      	lsls	r2, r2, #3
 800446c:	4920      	ldr	r1, [pc, #128]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004472:	4b1f      	ldr	r3, [pc, #124]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 8004478:	f043 0310 	orr.w	r3, r3, #16
 800447c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004484:	4b1a      	ldr	r3, [pc, #104]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	4a19      	ldr	r2, [pc, #100]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 800448a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800448e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004490:	e00f      	b.n	80044b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d106      	bne.n	80044a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	4a14      	ldr	r2, [pc, #80]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 800449e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044a4:	e005      	b.n	80044b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044a6:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80044b2:	4b0f      	ldr	r3, [pc, #60]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80044b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044be:	f7fc fc01 	bl	8000cc4 <HAL_GetTick>
 80044c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044c4:	e008      	b.n	80044d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80044c6:	f7fc fbfd 	bl	8000cc4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e006      	b.n	80044e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <RCCEx_PLL2_Config+0x15c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
 80044f4:	ffff0007 	.word	0xffff0007

080044f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004506:	4b53      	ldr	r3, [pc, #332]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	2b03      	cmp	r3, #3
 8004510:	d101      	bne.n	8004516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e099      	b.n	800464a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004516:	4b4f      	ldr	r3, [pc, #316]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a4e      	ldr	r2, [pc, #312]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004522:	f7fc fbcf 	bl	8000cc4 <HAL_GetTick>
 8004526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004528:	e008      	b.n	800453c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800452a:	f7fc fbcb 	bl	8000cc4 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e086      	b.n	800464a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800453c:	4b45      	ldr	r3, [pc, #276]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f0      	bne.n	800452a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004548:	4b42      	ldr	r3, [pc, #264]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	051b      	lsls	r3, r3, #20
 8004556:	493f      	ldr	r1, [pc, #252]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 8004558:	4313      	orrs	r3, r2
 800455a:	628b      	str	r3, [r1, #40]	; 0x28
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	3b01      	subs	r3, #1
 8004562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	3b01      	subs	r3, #1
 800456c:	025b      	lsls	r3, r3, #9
 800456e:	b29b      	uxth	r3, r3
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	3b01      	subs	r3, #1
 8004578:	041b      	lsls	r3, r3, #16
 800457a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	3b01      	subs	r3, #1
 8004586:	061b      	lsls	r3, r3, #24
 8004588:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800458c:	4931      	ldr	r1, [pc, #196]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004592:	4b30      	ldr	r3, [pc, #192]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	492d      	ldr	r1, [pc, #180]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045a4:	4b2b      	ldr	r3, [pc, #172]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	4928      	ldr	r1, [pc, #160]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80045b6:	4b27      	ldr	r3, [pc, #156]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c6:	4b24      	ldr	r3, [pc, #144]	; (8004658 <RCCEx_PLL3_Config+0x160>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	69d2      	ldr	r2, [r2, #28]
 80045ce:	00d2      	lsls	r2, r2, #3
 80045d0:	4920      	ldr	r1, [pc, #128]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045d6:	4b1f      	ldr	r3, [pc, #124]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	4a1e      	ldr	r2, [pc, #120]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045e8:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045f4:	e00f      	b.n	8004616 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045fc:	4b15      	ldr	r3, [pc, #84]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	4a14      	ldr	r2, [pc, #80]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 8004602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004608:	e005      	b.n	8004616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	4a11      	ldr	r2, [pc, #68]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 8004610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004614:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004616:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a0e      	ldr	r2, [pc, #56]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 800461c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004622:	f7fc fb4f 	bl	8000cc4 <HAL_GetTick>
 8004626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004628:	e008      	b.n	800463c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800462a:	f7fc fb4b 	bl	8000cc4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e006      	b.n	800464a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <RCCEx_PLL3_Config+0x15c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	58024400 	.word	0x58024400
 8004658:	ffff0007 	.word	0xffff0007

0800465c <__errno>:
 800465c:	4b01      	ldr	r3, [pc, #4]	; (8004664 <__errno+0x8>)
 800465e:	6818      	ldr	r0, [r3, #0]
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	24000014 	.word	0x24000014

08004668 <__libc_init_array>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4d0d      	ldr	r5, [pc, #52]	; (80046a0 <__libc_init_array+0x38>)
 800466c:	4c0d      	ldr	r4, [pc, #52]	; (80046a4 <__libc_init_array+0x3c>)
 800466e:	1b64      	subs	r4, r4, r5
 8004670:	10a4      	asrs	r4, r4, #2
 8004672:	2600      	movs	r6, #0
 8004674:	42a6      	cmp	r6, r4
 8004676:	d109      	bne.n	800468c <__libc_init_array+0x24>
 8004678:	4d0b      	ldr	r5, [pc, #44]	; (80046a8 <__libc_init_array+0x40>)
 800467a:	4c0c      	ldr	r4, [pc, #48]	; (80046ac <__libc_init_array+0x44>)
 800467c:	f000 f93c 	bl	80048f8 <_init>
 8004680:	1b64      	subs	r4, r4, r5
 8004682:	10a4      	asrs	r4, r4, #2
 8004684:	2600      	movs	r6, #0
 8004686:	42a6      	cmp	r6, r4
 8004688:	d105      	bne.n	8004696 <__libc_init_array+0x2e>
 800468a:	bd70      	pop	{r4, r5, r6, pc}
 800468c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004690:	4798      	blx	r3
 8004692:	3601      	adds	r6, #1
 8004694:	e7ee      	b.n	8004674 <__libc_init_array+0xc>
 8004696:	f855 3b04 	ldr.w	r3, [r5], #4
 800469a:	4798      	blx	r3
 800469c:	3601      	adds	r6, #1
 800469e:	e7f2      	b.n	8004686 <__libc_init_array+0x1e>
 80046a0:	0800497c 	.word	0x0800497c
 80046a4:	0800497c 	.word	0x0800497c
 80046a8:	0800497c 	.word	0x0800497c
 80046ac:	08004980 	.word	0x08004980

080046b0 <malloc>:
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <malloc+0xc>)
 80046b2:	4601      	mov	r1, r0
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f000 b88d 	b.w	80047d4 <_malloc_r>
 80046ba:	bf00      	nop
 80046bc:	24000014 	.word	0x24000014

080046c0 <free>:
 80046c0:	4b02      	ldr	r3, [pc, #8]	; (80046cc <free+0xc>)
 80046c2:	4601      	mov	r1, r0
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	f000 b819 	b.w	80046fc <_free_r>
 80046ca:	bf00      	nop
 80046cc:	24000014 	.word	0x24000014

080046d0 <memcpy>:
 80046d0:	440a      	add	r2, r1
 80046d2:	4291      	cmp	r1, r2
 80046d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80046d8:	d100      	bne.n	80046dc <memcpy+0xc>
 80046da:	4770      	bx	lr
 80046dc:	b510      	push	{r4, lr}
 80046de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e6:	4291      	cmp	r1, r2
 80046e8:	d1f9      	bne.n	80046de <memcpy+0xe>
 80046ea:	bd10      	pop	{r4, pc}

080046ec <memset>:
 80046ec:	4402      	add	r2, r0
 80046ee:	4603      	mov	r3, r0
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d100      	bne.n	80046f6 <memset+0xa>
 80046f4:	4770      	bx	lr
 80046f6:	f803 1b01 	strb.w	r1, [r3], #1
 80046fa:	e7f9      	b.n	80046f0 <memset+0x4>

080046fc <_free_r>:
 80046fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046fe:	2900      	cmp	r1, #0
 8004700:	d044      	beq.n	800478c <_free_r+0x90>
 8004702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004706:	9001      	str	r0, [sp, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f1a1 0404 	sub.w	r4, r1, #4
 800470e:	bfb8      	it	lt
 8004710:	18e4      	addlt	r4, r4, r3
 8004712:	f000 f8e3 	bl	80048dc <__malloc_lock>
 8004716:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <_free_r+0x94>)
 8004718:	9801      	ldr	r0, [sp, #4]
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	b933      	cbnz	r3, 800472c <_free_r+0x30>
 800471e:	6063      	str	r3, [r4, #4]
 8004720:	6014      	str	r4, [r2, #0]
 8004722:	b003      	add	sp, #12
 8004724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004728:	f000 b8de 	b.w	80048e8 <__malloc_unlock>
 800472c:	42a3      	cmp	r3, r4
 800472e:	d908      	bls.n	8004742 <_free_r+0x46>
 8004730:	6825      	ldr	r5, [r4, #0]
 8004732:	1961      	adds	r1, r4, r5
 8004734:	428b      	cmp	r3, r1
 8004736:	bf01      	itttt	eq
 8004738:	6819      	ldreq	r1, [r3, #0]
 800473a:	685b      	ldreq	r3, [r3, #4]
 800473c:	1949      	addeq	r1, r1, r5
 800473e:	6021      	streq	r1, [r4, #0]
 8004740:	e7ed      	b.n	800471e <_free_r+0x22>
 8004742:	461a      	mov	r2, r3
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	b10b      	cbz	r3, 800474c <_free_r+0x50>
 8004748:	42a3      	cmp	r3, r4
 800474a:	d9fa      	bls.n	8004742 <_free_r+0x46>
 800474c:	6811      	ldr	r1, [r2, #0]
 800474e:	1855      	adds	r5, r2, r1
 8004750:	42a5      	cmp	r5, r4
 8004752:	d10b      	bne.n	800476c <_free_r+0x70>
 8004754:	6824      	ldr	r4, [r4, #0]
 8004756:	4421      	add	r1, r4
 8004758:	1854      	adds	r4, r2, r1
 800475a:	42a3      	cmp	r3, r4
 800475c:	6011      	str	r1, [r2, #0]
 800475e:	d1e0      	bne.n	8004722 <_free_r+0x26>
 8004760:	681c      	ldr	r4, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	6053      	str	r3, [r2, #4]
 8004766:	4421      	add	r1, r4
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	e7da      	b.n	8004722 <_free_r+0x26>
 800476c:	d902      	bls.n	8004774 <_free_r+0x78>
 800476e:	230c      	movs	r3, #12
 8004770:	6003      	str	r3, [r0, #0]
 8004772:	e7d6      	b.n	8004722 <_free_r+0x26>
 8004774:	6825      	ldr	r5, [r4, #0]
 8004776:	1961      	adds	r1, r4, r5
 8004778:	428b      	cmp	r3, r1
 800477a:	bf04      	itt	eq
 800477c:	6819      	ldreq	r1, [r3, #0]
 800477e:	685b      	ldreq	r3, [r3, #4]
 8004780:	6063      	str	r3, [r4, #4]
 8004782:	bf04      	itt	eq
 8004784:	1949      	addeq	r1, r1, r5
 8004786:	6021      	streq	r1, [r4, #0]
 8004788:	6054      	str	r4, [r2, #4]
 800478a:	e7ca      	b.n	8004722 <_free_r+0x26>
 800478c:	b003      	add	sp, #12
 800478e:	bd30      	pop	{r4, r5, pc}
 8004790:	24000968 	.word	0x24000968

08004794 <sbrk_aligned>:
 8004794:	b570      	push	{r4, r5, r6, lr}
 8004796:	4e0e      	ldr	r6, [pc, #56]	; (80047d0 <sbrk_aligned+0x3c>)
 8004798:	460c      	mov	r4, r1
 800479a:	6831      	ldr	r1, [r6, #0]
 800479c:	4605      	mov	r5, r0
 800479e:	b911      	cbnz	r1, 80047a6 <sbrk_aligned+0x12>
 80047a0:	f000 f88c 	bl	80048bc <_sbrk_r>
 80047a4:	6030      	str	r0, [r6, #0]
 80047a6:	4621      	mov	r1, r4
 80047a8:	4628      	mov	r0, r5
 80047aa:	f000 f887 	bl	80048bc <_sbrk_r>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	d00a      	beq.n	80047c8 <sbrk_aligned+0x34>
 80047b2:	1cc4      	adds	r4, r0, #3
 80047b4:	f024 0403 	bic.w	r4, r4, #3
 80047b8:	42a0      	cmp	r0, r4
 80047ba:	d007      	beq.n	80047cc <sbrk_aligned+0x38>
 80047bc:	1a21      	subs	r1, r4, r0
 80047be:	4628      	mov	r0, r5
 80047c0:	f000 f87c 	bl	80048bc <_sbrk_r>
 80047c4:	3001      	adds	r0, #1
 80047c6:	d101      	bne.n	80047cc <sbrk_aligned+0x38>
 80047c8:	f04f 34ff 	mov.w	r4, #4294967295
 80047cc:	4620      	mov	r0, r4
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	2400096c 	.word	0x2400096c

080047d4 <_malloc_r>:
 80047d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d8:	1ccd      	adds	r5, r1, #3
 80047da:	f025 0503 	bic.w	r5, r5, #3
 80047de:	3508      	adds	r5, #8
 80047e0:	2d0c      	cmp	r5, #12
 80047e2:	bf38      	it	cc
 80047e4:	250c      	movcc	r5, #12
 80047e6:	2d00      	cmp	r5, #0
 80047e8:	4607      	mov	r7, r0
 80047ea:	db01      	blt.n	80047f0 <_malloc_r+0x1c>
 80047ec:	42a9      	cmp	r1, r5
 80047ee:	d905      	bls.n	80047fc <_malloc_r+0x28>
 80047f0:	230c      	movs	r3, #12
 80047f2:	603b      	str	r3, [r7, #0]
 80047f4:	2600      	movs	r6, #0
 80047f6:	4630      	mov	r0, r6
 80047f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fc:	4e2e      	ldr	r6, [pc, #184]	; (80048b8 <_malloc_r+0xe4>)
 80047fe:	f000 f86d 	bl	80048dc <__malloc_lock>
 8004802:	6833      	ldr	r3, [r6, #0]
 8004804:	461c      	mov	r4, r3
 8004806:	bb34      	cbnz	r4, 8004856 <_malloc_r+0x82>
 8004808:	4629      	mov	r1, r5
 800480a:	4638      	mov	r0, r7
 800480c:	f7ff ffc2 	bl	8004794 <sbrk_aligned>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	4604      	mov	r4, r0
 8004814:	d14d      	bne.n	80048b2 <_malloc_r+0xde>
 8004816:	6834      	ldr	r4, [r6, #0]
 8004818:	4626      	mov	r6, r4
 800481a:	2e00      	cmp	r6, #0
 800481c:	d140      	bne.n	80048a0 <_malloc_r+0xcc>
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	4631      	mov	r1, r6
 8004822:	4638      	mov	r0, r7
 8004824:	eb04 0803 	add.w	r8, r4, r3
 8004828:	f000 f848 	bl	80048bc <_sbrk_r>
 800482c:	4580      	cmp	r8, r0
 800482e:	d13a      	bne.n	80048a6 <_malloc_r+0xd2>
 8004830:	6821      	ldr	r1, [r4, #0]
 8004832:	3503      	adds	r5, #3
 8004834:	1a6d      	subs	r5, r5, r1
 8004836:	f025 0503 	bic.w	r5, r5, #3
 800483a:	3508      	adds	r5, #8
 800483c:	2d0c      	cmp	r5, #12
 800483e:	bf38      	it	cc
 8004840:	250c      	movcc	r5, #12
 8004842:	4629      	mov	r1, r5
 8004844:	4638      	mov	r0, r7
 8004846:	f7ff ffa5 	bl	8004794 <sbrk_aligned>
 800484a:	3001      	adds	r0, #1
 800484c:	d02b      	beq.n	80048a6 <_malloc_r+0xd2>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	442b      	add	r3, r5
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	e00e      	b.n	8004874 <_malloc_r+0xa0>
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	1b52      	subs	r2, r2, r5
 800485a:	d41e      	bmi.n	800489a <_malloc_r+0xc6>
 800485c:	2a0b      	cmp	r2, #11
 800485e:	d916      	bls.n	800488e <_malloc_r+0xba>
 8004860:	1961      	adds	r1, r4, r5
 8004862:	42a3      	cmp	r3, r4
 8004864:	6025      	str	r5, [r4, #0]
 8004866:	bf18      	it	ne
 8004868:	6059      	strne	r1, [r3, #4]
 800486a:	6863      	ldr	r3, [r4, #4]
 800486c:	bf08      	it	eq
 800486e:	6031      	streq	r1, [r6, #0]
 8004870:	5162      	str	r2, [r4, r5]
 8004872:	604b      	str	r3, [r1, #4]
 8004874:	4638      	mov	r0, r7
 8004876:	f104 060b 	add.w	r6, r4, #11
 800487a:	f000 f835 	bl	80048e8 <__malloc_unlock>
 800487e:	f026 0607 	bic.w	r6, r6, #7
 8004882:	1d23      	adds	r3, r4, #4
 8004884:	1af2      	subs	r2, r6, r3
 8004886:	d0b6      	beq.n	80047f6 <_malloc_r+0x22>
 8004888:	1b9b      	subs	r3, r3, r6
 800488a:	50a3      	str	r3, [r4, r2]
 800488c:	e7b3      	b.n	80047f6 <_malloc_r+0x22>
 800488e:	6862      	ldr	r2, [r4, #4]
 8004890:	42a3      	cmp	r3, r4
 8004892:	bf0c      	ite	eq
 8004894:	6032      	streq	r2, [r6, #0]
 8004896:	605a      	strne	r2, [r3, #4]
 8004898:	e7ec      	b.n	8004874 <_malloc_r+0xa0>
 800489a:	4623      	mov	r3, r4
 800489c:	6864      	ldr	r4, [r4, #4]
 800489e:	e7b2      	b.n	8004806 <_malloc_r+0x32>
 80048a0:	4634      	mov	r4, r6
 80048a2:	6876      	ldr	r6, [r6, #4]
 80048a4:	e7b9      	b.n	800481a <_malloc_r+0x46>
 80048a6:	230c      	movs	r3, #12
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4638      	mov	r0, r7
 80048ac:	f000 f81c 	bl	80048e8 <__malloc_unlock>
 80048b0:	e7a1      	b.n	80047f6 <_malloc_r+0x22>
 80048b2:	6025      	str	r5, [r4, #0]
 80048b4:	e7de      	b.n	8004874 <_malloc_r+0xa0>
 80048b6:	bf00      	nop
 80048b8:	24000968 	.word	0x24000968

080048bc <_sbrk_r>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4d06      	ldr	r5, [pc, #24]	; (80048d8 <_sbrk_r+0x1c>)
 80048c0:	2300      	movs	r3, #0
 80048c2:	4604      	mov	r4, r0
 80048c4:	4608      	mov	r0, r1
 80048c6:	602b      	str	r3, [r5, #0]
 80048c8:	f7fc f88e 	bl	80009e8 <_sbrk>
 80048cc:	1c43      	adds	r3, r0, #1
 80048ce:	d102      	bne.n	80048d6 <_sbrk_r+0x1a>
 80048d0:	682b      	ldr	r3, [r5, #0]
 80048d2:	b103      	cbz	r3, 80048d6 <_sbrk_r+0x1a>
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	24000970 	.word	0x24000970

080048dc <__malloc_lock>:
 80048dc:	4801      	ldr	r0, [pc, #4]	; (80048e4 <__malloc_lock+0x8>)
 80048de:	f000 b809 	b.w	80048f4 <__retarget_lock_acquire_recursive>
 80048e2:	bf00      	nop
 80048e4:	24000974 	.word	0x24000974

080048e8 <__malloc_unlock>:
 80048e8:	4801      	ldr	r0, [pc, #4]	; (80048f0 <__malloc_unlock+0x8>)
 80048ea:	f000 b804 	b.w	80048f6 <__retarget_lock_release_recursive>
 80048ee:	bf00      	nop
 80048f0:	24000974 	.word	0x24000974

080048f4 <__retarget_lock_acquire_recursive>:
 80048f4:	4770      	bx	lr

080048f6 <__retarget_lock_release_recursive>:
 80048f6:	4770      	bx	lr

080048f8 <_init>:
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fa:	bf00      	nop
 80048fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048fe:	bc08      	pop	{r3}
 8004900:	469e      	mov	lr, r3
 8004902:	4770      	bx	lr

08004904 <_fini>:
 8004904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004906:	bf00      	nop
 8004908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800490a:	bc08      	pop	{r3}
 800490c:	469e      	mov	lr, r3
 800490e:	4770      	bx	lr
